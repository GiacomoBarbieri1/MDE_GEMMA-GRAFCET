{"version":3,"sources":["canvas/arrow.tsx","canvas/canvas.tsx","utils.ts","canvas/config-view.tsx","canvas/persistence.ts","step/step.tsx","node/node-model.tsx","canvas/store.tsx","properties/properties-table.tsx","properties/properties-view.tsx","step/custom_parser.ts","fields/choice-field.tsx","fields/primitive-field.tsx","step/gemma-templates.ts","grammar/SimpleBooleanLexer.ts","grammar/SimpleBooleanParser.ts","step/signal.tsx","step/antlr_parser.ts","step/transition.tsx","codegen/file-system.ts","node/node.tsx","step/openxml-templates.ts","step/macro-step.ts","step/gemma.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["triangleFromCenter","x","y","height","width","y0","ArrowView","observer","connection","rootStore","useStore","isHidden","showHidden","firstArrow","from","to","isSelected","connectionStartPosition","data","undefined","b","top","bottom","left","right","getStartPositionConnection","x1","y1","x2","y2","points","connectionPoints","Triangle","dy","dx","changeX","changeY","withNodeDelta","m","Math","abs","deltaX","xa","ya","degrees","atan2","PI","d","transform","onClick","_","selectConnection","innerPoints","map","p","index","push","cx","cy","r","fill","key","lineAndPoint","style","strokeWidth","stroke","opacity","event","shiftKey","floor","length","ceil","xm","ym","RectAndText","texts","connectionText","rectFill","padding","React","useState","textRefs","setTextRefs","curr","reduce","c","text","prev","setPrev","fullbbox","getBBox","max","useEffect","id","setTimeout","clearTimeout","xPrev","cursor","t","bbox","ref","e","nn","MainCanvas","ops","nodes","values","overflow","flex","outline","background","tabIndex","onMouseMove","selectedPointIndex","document","getElementById","focus","onKeyUp","selectedConnection","splice","className","globalData","CanvasView","position","flatMap","op","inputs","defaultResizeEnable","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","k","v","downloadToClient","content","fileName","contentType","a","createElement","file","Blob","type","href","URL","createObjectURL","download","click","importJson","files","target","Promise","resolve","window","alert","reader","FileReader","onload","result","onabort","onerror","readAsText","DBStores","ConfigView","isWarningsDialogOpen","setIsWarningsDialogOpen","isDownloadMenuOpen","setIsDownloadMenuOpen","isCodesysVersionOpen","setIsCodesysVersionOpen","anchorElem","setAnchorElem","connections","forEach","get","set","Map","orderedOps","counts","filter","withDependencies","numProcessed","size","slice","outs","dep","delete","toggleDownloadMenu","toggleCodesysVersion","tryDownload","format","codesysVersion","warnings","some","downloadSourceCode","minWidth","defaultSize","boxShadow","border","enable","borderBottom","justifyContent","margin","Button","Menu","anchorEl","keepMounted","open","onClose","MenuItem","paddingTop","paddingBottom","fontSize","paddingLeft","stopPropagation","toggleDialog","accept","version","setCodesysVersion","generateMainFile","CodesysVesionDialog","setVersion","versionInput","setVersionInput","error","setError","prevOpen","setPrevOpen","updateError","hasError","match","send","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","TextField","value","onChange","replace","label","helperText","inputRef","onKeyDown","DialogActions","color","openDB","upgrade","db","createObjectStore","graph","keyPath","autoIncrement","node","createIndex","IndexedDB","getKeyFromConnection","conn","connectionWithKey","graphKey","assign","StepType","ProcedureType","this","getAll","put","tx","transaction","objectStore","dbKey","openCursor","continue","done","all","getAllFromIndex","_g","n","store","add","path","updateMany","close","clear","keys","items","val","Error","item","ConnModel","dataBuilder","json","observable","array","toJson","computed","NodeModel","resizeObserver","element","setElement","setSize","getBoundingClientRect","disconnect","ResizeObserver","observe","name","outputs","action","rect","RootStoreModel","builders","hideOnDelete","saveModel","clearDB","updateGraph","addNodes","addConnections","downloadModel","JSON","stringify","_addToZip","root","dir","newRoot","folder","when","zip","JSZip","sourceCode","generateSourceCode","generateAsync","generateProjectInFormat","graphBuilder","v4","nodeBuilder","addConnection","selectedNode","next","_n","initState","addEventListener","mouseMoveEvent","reaction","getElementsByClassName","clientX","clientY","localStorage","getItem","setItem","nodeType","pos","canAddNode","_in","remove","_out","selectingInputFor","_selectingInputKeyListener","connectionBuilder","addOutput","removeEventListener","ev","PropertiesTable","children","PropertiesTableStyled","PropertiesTableNode","self","spec","plotField","model","nInputs","alignItems","variant","styled","table","PropertiesView","inner","maxWidth","backgroundColor","display","IconButton","activateNode","removeNode","icon","activateConnection","removeConnection","ConnectionView","View","minHeight","VarId","ButtonsDiv","div","ChoiceFieldSpec","choices","default","isObservableMap","Symbol","toStringTag","mobxProp","types","optional","string","Array","setValue","ChoiceField","maxButton","Select","autoWidth","marginBottom","disabled","ButtonGroup","aria-label","buttonStyle","StrFieldSpec","maxLength","minLength","multiline","errors","fullWidth","inputProps","textAlign","BoolFieldSpec","required","boolean","Switch","checked","BaseStep","l","Number","POSITIVE_INFINITY","CONTAINER","isInitial","SIMPLE","toString","_color","A","D","F","family","innerStyle","wrapper","nodeHeight","ENCLOSING","MACRO","borderTop","borderRight","borderLeft","otherInitial","automationSystem","steps","find","s","aFamily","dFamily","fFamily","sort","priority","_transitions","transitions","concat","delta","parseInt","inputNodes","every","EnclosingDecoration","H","textOrEmpty","cond","memoryTransitionSuffix","templateCondition","expressionTokens","tok","savedSignalsWithMemory","withMemory","isNaN","parseFloat","generatingXML","join","templateGemmaGrafcetSimpleStep","isNested","templateTransitions","templateGemmaGrafcetNestedStep","signalsWithMemory","sm","behaviour","templateFBEntry","condition","_isInner","innerTransitionsLength","isNegated","_evaluateComplete","trim","templateGemmaGrafcet","initialStep","gemmaVariables","gemmaBehaviour","step","prefix","SimpleBooleanLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","AND","OR","NOT","TRUE","FALSE","GT","GE","LT","DIF","LE","EQ","LPAREN","RPAREN","DECIMAL","IDENTIFIER","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","SimpleBooleanParser","ParserATNSimulator","_localctx","ParseContext","_ctx","state","enterRule","RULE_parse","enterOuterAlt","expression","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","ExpressionContext","RULE_expression","sync","interpreter","adaptivePredict","_input","OrExpressionContext","_left","expressionAnd","_right","AndParentExpressionContext","ExpressionAndContext","RULE_expressionAnd","AndExpressionContext","expressionSimple","SimpleExpressionContext","ExpressionSimpleContext","RULE_expressionSimple","NotExpressionContext","ComparatorExpressionContext","numExpression","_op","comparator","IdentifierExpressionContext","ParenExpressionContext","NumExpressionContext","RULE_numExpression","LA","IdentifierNumExpressionContext","DecimalExpressionContext","NoViableAltException","_la","ComparatorContext","RULE_comparator","recoverInline","Token","matchedEOF","reportMatch","consume","Parser","SignalTypeBase","SignalType","SignalTypeSize","parent","invokingState","getRuleContext","getToken","listener","enterParse","exitParse","visitor","visitParse","visitChildren","ParserRuleContext","ctx","copyFrom","enterOrExpression","exitOrExpression","visitOrExpression","enterAndParentExpression","exitAndParentExpression","visitAndParentExpression","enterAndExpression","exitAndExpression","visitAndExpression","enterSimpleExpression","exitSimpleExpression","visitSimpleExpression","enterNotExpression","exitNotExpression","visitNotExpression","i","getRuleContexts","enterComparatorExpression","exitComparatorExpression","visitComparatorExpression","enterIdentifierExpression","exitIdentifierExpression","visitIdentifierExpression","enterParenExpression","exitParenExpression","visitParenExpression","enterIdentifierNumExpression","exitIdentifierNumExpression","visitIdentifierNumExpression","enterDecimalExpression","exitDecimalExpression","visitDecimalExpression","tryGetToken","enterComparator","exitComparator","visitComparator","ErrorVisitor","signals","isInvalid","boolSignals","aggregate","nextResult","valid","includes","numSignals","AbstractParseTreeVisitor","signalSizeMap","bool","int","uint","real","SignalRow","signal","showDelete","removeSignal","TableRow","TableCell","Tooltip","title","setTypeBase","typeBase","typeSize","defaultValue","align","regexSignalDefaultValid","regex","message","Signal","bound","description","typePrim","base","lreal","startsWith","charAt","signalTypeToPrimitives","sizeStr","substring","findIndex","s2","validator","Name","test","Transition","conditionExpression","priorityChoices","priorityUi","setPriority","ConditionInput","parsedExpression","marginTop","err","signalsInCondition","token","MemCheckbox","ObservableMap","hasNegation","textDecoration","_jsonSignals","omit","addSignal","prevToken","strPrev","getCustomTokens","gemma","inputStream","CharStreams","fromString","lexer","tokenStream","CommonTokenStream","tree","parse","countFunctionsVisitor","visit","toProcess","pop","childCount","getChild","parseBoolExpression","_signals","Set","hiddenTransitions","ind","_update","Checkbox","paddingRight","prevIndex","_spanStyleRef","useRef","font","whiteSpace","textIndex","repeat","onScroll","current","scrollTo","currentTarget","scrollTop","caretColor","spellCheck","SourceItem","SourceFile","SourceDirectory","StyledNode","NodeView","params","selectingInput","isValidInput","useCallback","assignInput","selectNode","bounds","variableDefinition","toUpperCase","objectIdData","objectId","projectTemplate","projectHeader","tasks","gemmaImplementation","libraries","device","projectStructure","now","Date","toISOString","GemmaGrafcet","setShowDelete","flexDirection","Table","stickyHeader","TableHead","TableBody","alignSelf","w","h","_d","isArray","fromJson","_selected","_selectedTrans","addNode","setName","main","globals","variables","signalsErrors","unnamedSignals","isUnnamed","hasInitialStep","stepsWithNoInputTransitions","stepsWithNoOutputTransitions","stepsErrors","Steps","Transitions","Signals","gemmaBuilders","g","makeBaseGemmaTemplate","mm","storeContext","createContext","useContext","App","globalDB","setDB","setStore","_isReset","resetStore","createIndexedDB","then","fetchGraphs","graphs","loadGraph","graphExt","_store","Provider","TopMenu","ToggleShowHidden","isResetDialogOpen","setIsResetDialogOpen","htmlFor","console","log","WarningsDialog","sectionTitle","Boolean","location","hostname","library","faChevronDown","faChevronUp","faTrashAlt","faEye","faEyeSlash","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f41f30c4.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NodeModel, ConnModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\nexport type ArrowModel = {\n  from: NodeModel<any, any, any>;\n  to: NodeModel<any, any, any>;\n};\n\ntype ArrowViewProps = { connection: ConnModel<any, any, any> };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nconst getStartPositionConnection = (\n  from: NodeModel<any, any, any>\n): { x: number; y: number } => {\n  const connectionStartPosition = (from.data as NodeData<any, any, any>)\n    .connectionStartPosition;\n\n  if (connectionStartPosition !== undefined) {\n    const b = connectionStartPosition();\n    if (b !== undefined) {\n      let x = from.x;\n      let y = from.y;\n      if (\"top\" in b) {\n        y += b.top;\n      } else {\n        y += from.height - b.bottom;\n      }\n\n      if (\"left\" in b) {\n        x += b.left;\n      } else {\n        y += from.width - b.right;\n      }\n      return { x, y };\n    }\n  }\n  return { x: from.x + from.width / 2, y: from.y + from.height / 2 };\n};\n\ntype TwoPoints = {\n  y1: number;\n  x1: number;\n  x2: number;\n  y2: number;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ connection }: ArrowViewProps) => {\n    const rootStore = useStore();\n\n    if (connection.isHidden && !rootStore.showHidden) {\n      return <></>;\n    }\n    const { from, to, isSelected } = connection;\n    let { x: x1, y: y1 } = getStartPositionConnection(from);\n\n    const [x2, y2] = [to.x + to.width / 2, to.y + to.height / 2];\n\n    // const getRelative = (event: {\n    //   clientX: number;\n    //   clientY: number;\n    // }): { x: number; y: number } => {\n    //   const canvasScrollBbox = document\n    //     .getElementsByClassName(\"canvas-wrapper\")[0]!\n    //     .getBoundingClientRect();\n    //   return {\n    //     x: event.clientX - canvasScrollBbox.left,\n    //     y: event.clientY - canvasScrollBbox.top,\n    //   };\n    // };\n\n    const addInnerPoint = (\n      event: { clientX: number; clientY: number },\n      index: number\n    ) => {\n      // connection.innerPoints.splice(index, 0, getRelative(event));\n    };\n\n    const points: JSX.Element[] = [];\n    const connectionPoints = { y1, x1, x2, y2 };\n    const Triangle = ({\n      y1,\n      x1,\n      x2,\n      y2,\n      withNodeDelta,\n    }: TwoPoints & { withNodeDelta: boolean }) => {\n      const dy = y2 - y1;\n      const dx = x2 - x1;\n\n      let changeX = 0;\n      let changeY = 0;\n      if (withNodeDelta) {\n        if (dx === 0) {\n          changeX = 0;\n          changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n        } else if (dy === 0) {\n          changeY = 0;\n          changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n        } else {\n          const m = Math.abs(dy / dx);\n          const [deltaX, deltaY] =\n            m > to.height / to.width\n              ? [to.height / 2 / m, to.height / 2]\n              : [to.width / 2, (to.width / 2) * m];\n          changeY = (y2 > y1 ? 1 : -1) * deltaY;\n          changeX = (x2 > x1 ? 1 : -1) * deltaX;\n        }\n      }\n      const xa = x2 - changeX;\n      const ya = y2 - changeY;\n      const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n      return (\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n          onClick={(_) => rootStore.selectConnection(connection)}\n        />\n      );\n    };\n    const connectionText = ({ y1, x1, x2, y2 }: TwoPoints) => {\n      const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n      return (\n        <RectAndText\n          connection={connection}\n          texts={connection.data.connectionText}\n          x={xm}\n          rectFill={isSelected ? \"#eeedff\" : \"#eee\"}\n          y={ym}\n          onClick={(_) => rootStore.selectConnection(connection)}\n        />\n      );\n    };\n    let firstArrow;\n\n    return (\n      <>\n        <>\n          {connection.innerPoints.map((p, index) => {\n            points.push(\n              <circle\n                cx={p.x}\n                cy={p.y}\n                r=\"1.1\"\n                fill=\"black\"\n                key={`${connection.from.key}${connection.to.key}${index}`}\n                onClick={(_) => {\n                  // connection.graph.selectedConnection = connection;\n                  // if (connection.graph.selectedPointIndex !== undefined) {\n                  //   connection.graph.selectedPointIndex = undefined;\n                  // } else {\n                  //   connection.graph.selectedPointIndex = index;\n                  // }\n                }}\n              />\n            );\n            const key = `${connection.from.key}${connection.to.key}${\n              index - 1\n            }${index}`;\n\n            const lineAndPoint = (\n              <path\n                key={key}\n                style={{\n                  strokeWidth: 3,\n                  stroke: \"black\",\n                  opacity: connection.isHidden ? 0.07 : 1,\n                }}\n                d={`M${x1} ${y1} L${p.x} ${p.y}`}\n                onClick={(event) => {\n                  if (event.shiftKey) {\n                    addInnerPoint(event, index);\n                  } else {\n                    rootStore.selectConnection(connection);\n                  }\n                }}\n              />\n            );\n            if (index === 0) {\n              firstArrow = (\n                <Triangle\n                  key={key + \"t\"}\n                  x1={x1}\n                  y1={y1}\n                  x2={p.x}\n                  y2={p.y}\n                  withNodeDelta={false}\n                />\n              );\n            }\n\n            x1 = p.x;\n            y1 = p.y;\n            if (index === Math.floor(connection.innerPoints.length / 2 - 0.1)) {\n              connectionPoints.x1 = x1;\n              connectionPoints.y1 = y1;\n            } else if (\n              index === Math.ceil(connection.innerPoints.length / 2 - 0.1)\n            ) {\n              connectionPoints.x2 = x1;\n              connectionPoints.y2 = y1;\n            }\n            return lineAndPoint;\n          })}\n        </>\n        {!connection.isHidden && firstArrow}\n        <path\n          style={{\n            strokeWidth: 3,\n            stroke: \"black\",\n            opacity: connection.isHidden ? 0.07 : 1,\n          }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onClick={(event) => {\n            if (event.shiftKey) {\n              addInnerPoint(event, connection.innerPoints.length);\n            } else {\n              rootStore.selectConnection(connection);\n            }\n          }}\n        />\n        {!connection.isHidden &&\n          Triangle({ x1, y1, x2, y2, withNodeDelta: true })}\n        {!connection.isHidden && points}\n        {!connection.isHidden && connectionText(connectionPoints)}\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  texts: { text: string; style?: React.CSSProperties }[];\n  connection: ConnModel<any, any, any>;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n  onClick: (event: React.MouseEvent<any, MouseEvent>) => void;\n}> = observer(\n  ({\n    texts,\n    x: xm,\n    y: ym,\n    rectFill = \"#eee\",\n    padding = 3,\n    onClick,\n    connection,\n  }) => {\n    const [textRefs, setTextRefs] = React.useState<SVGTextElement[]>([]);\n    const curr = texts.reduce((p, c) => p + c.text, \"\");\n    const [prev, setPrev] = React.useState(curr);\n    const fullbbox = textRefs.reduce(\n      (p, c) => {\n        if (c === undefined) {\n          return p;\n        }\n        const b = c.getBBox();\n\n        return {\n          width: p.width + b.width,\n          height: Math.max(p.height, b.height),\n        };\n      },\n      { width: 0, height: 0 }\n    );\n    React.useEffect(() => {\n      if (prev !== curr) {\n        const id = setTimeout(() => setPrev(curr), 0);\n        return () => clearTimeout(id);\n      }\n    });\n    let xPrev = 0;\n    return (\n      <>\n        <rect\n          width={fullbbox.width + padding * 2}\n          height={fullbbox.height + padding * 2}\n          x={xm - fullbbox.width / 2 - padding}\n          y={ym - fullbbox.height + padding}\n          fill={rectFill}\n          onClick={onClick}\n          style={{ cursor: \"pointer\" }}\n        ></rect>\n        {texts.map((t, index) => {\n          const bbox = textRefs[index]?.getBBox();\n          const x =\n            (fullbbox !== undefined ? xm - fullbbox.width / 2 : xm) + xPrev;\n          xPrev += bbox !== undefined ? bbox.width : 0;\n          return (\n            <text\n              key={`${connection.from.key}${connection.to.key}${index}`}\n              x={x}\n              y={ym + 2}\n              fill=\"black\"\n              ref={(e) => {\n                if (e === null || e === undefined || !!textRefs[index]) return;\n                const nn = [...textRefs];\n                nn[index] = e;\n                setTextRefs(nn);\n              }}\n              onClick={onClick}\n              style={{ cursor: \"pointer\", ...(t.style ?? {}) }}\n            >\n              {t.text}\n            </text>\n          );\n        })}\n      </>\n    );\n  }\n);\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { ArrowView } from \"./arrow\";\nimport \"./canvas.css\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  const ops = [...rootStore.nodes.values()];\n\n  return (\n    <div\n      style={{\n        overflow: \"auto\",\n        flex: \"1\",\n        outline: \"none\",\n        background: \"white\",\n      }}\n      id=\"canvas-scroll\"\n      tabIndex={0}\n      onMouseMove={(_) => {\n        if (rootStore.selectedPointIndex !== undefined) {\n          const target = document.getElementById(\n            \"canvas-scroll\"\n          )! as HTMLElement;\n          target.focus();\n        }\n      }}\n      onKeyUp={(event) => {\n        if (\n          event.key === \"Escape\" &&\n          rootStore.selectedPointIndex !== undefined &&\n          rootStore.selectedConnection !== undefined\n        ) {\n          rootStore.selectedConnection.innerPoints.splice(\n            rootStore.selectedPointIndex,\n            1\n          );\n          rootStore.selectedPointIndex = undefined;\n        }\n      }}\n    >\n      <div className=\"canvas-wrapper\" style={{ background: \"white\" }}>\n        {/* <CanvasWidget engine={engine} className=\"canvas-widget\" /> */}\n        <rootStore.globalData.CanvasView />\n        <svg\n          style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}\n          id=\"canvas-svg\"\n        >\n          {ops\n            .flatMap((op) => op.inputs)\n            .map((connection) => (\n              <ArrowView\n                connection={connection}\n                key={connection.from.key + connection.to.key}\n              />\n            ))}\n        </svg>\n      </div>\n    </div>\n  );\n});\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce(\n    (p, [k, v]) => {\n      if (v !== undefined) {\n        p[k as keyof typeof defaultResizeEnable] = v;\n      }\n      return p;\n    },\n    { ...defaultResizeEnable }\n  );\n}\n\nexport function downloadToClient(\n  content: BlobPart,\n  fileName: string,\n  contentType: string\n) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: contentType });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function importJson(\n  event: React.ChangeEvent<HTMLInputElement>\n): Promise<string | ArrayBuffer | null | undefined> {\n  const files = event.target.files;\n  return new Promise((resolve, _) => {\n    if (files !== null && files.length !== 0) {\n      const file = files[0];\n      if (file.type !== \"application/json\") {\n        window.alert(\n          \"Debes seleccionar un archivo válido, la extensión debe ser '.json'.\"\n        );\n        return resolve(undefined);\n      }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          resolve(e.target?.result);\n        };\n        reader.onabort = (e) => {\n          resolve(undefined);\n        };\n        reader.onerror = (e) => {\n          resolve(undefined);\n        };\n        reader.readAsText(file);\n    } else {\n      resolve(undefined);\n    }\n  });\n}\n","import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React, { useEffect, useState } from \"react\";\nimport { useStore, WarningsDialog } from \"../App\";\nimport { NodeModel } from \"../node/node-model\";\nimport { resizableEnable } from \"../utils\";\nimport { GlobalData } from \"./store\";\n\ntype Props = {};\n\nexport const ConfigView: React.FC<Props> = observer(<\n  G extends GlobalData<any>\n>() => {\n  const rootStore = useStore<any, G, any>();\n  const [isWarningsDialogOpen, setIsWarningsDialogOpen] = useState<\n    \"XML\" | \"TXT\" | undefined\n  >(undefined);\n  const [isDownloadMenuOpen, setIsDownloadMenuOpen] = useState(false);\n  const [isCodesysVersionOpen, setIsCodesysVersionOpen] = useState(false);\n  const [anchorElem, setAnchorElem] = useState<HTMLButtonElement | null>(null);\n\n  const ops = [...rootStore.nodes.values()];\n  const connections = ops.reduce((p, c) => {\n    c.inputs.forEach((v) => {\n      let m = p.get(v.to);\n      if (m === undefined) {\n        m = [];\n        p.set(v.to, m);\n      }\n      m.push(c);\n    });\n    return p;\n  }, new Map<NodeModel<any, any, any>, NodeModel<any, any, any>[]>());\n\n  const orderedOps: NodeModel<any, any, any>[] = [];\n  const counts = new Map(\n    ops\n      .filter((op) => {\n        const withDependencies = op.data.length !== 0;\n        if (!withDependencies) {\n          orderedOps.push(op);\n        }\n        return withDependencies;\n      })\n      .map((op) => [op, op.data.length])\n  );\n  let numProcessed = 0;\n  while (counts.size !== 0 && orderedOps.length !== numProcessed) {\n    for (let k of orderedOps.slice(numProcessed)) {\n      numProcessed += 1;\n      const outs = connections.get(k);\n      if (outs === undefined) continue;\n\n      for (let dep of outs) {\n        const m = counts.get(dep)!;\n        if (m === 1) {\n          counts.delete(dep);\n          orderedOps.push(dep);\n        } else {\n          counts.set(dep, m - 1);\n        }\n      }\n    }\n  }\n\n  if (counts.size !== 0) {\n    // CICLE ?\n  }\n\n  const toggleDownloadMenu = () => {\n    setIsDownloadMenuOpen(!isDownloadMenuOpen);\n  };\n\n  const toggleCodesysVersion = () => {\n    setIsCodesysVersionOpen(!isCodesysVersionOpen);\n  };\n\n  const tryDownload = (format: \"XML\" | \"TXT\") => () => {\n    if (format === \"XML\" && rootStore.codesysVersion === null) {\n      toggleCodesysVersion();\n      return;\n    }\n    const hasWarnings = Object.values(rootStore.globalData.warnings).some(\n      (v) => v.length > 0\n    );\n    if (hasWarnings) {\n      setIsWarningsDialogOpen(format);\n    } else {\n      rootStore.downloadSourceCode(format);\n    }\n    toggleDownloadMenu();\n  };\n\n  return (\n    <Resizable\n      minWidth={200}\n      defaultSize={{ height: \"auto\", width: 350 }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ left: true })}\n    >\n      <div className=\"col\" style={{ height: \"100%\" }}>\n        <div style={{ borderBottom: \"rgb(221 220 220) solid 1.5px\" }}>\n          <div className=\"row\" style={{ justifyContent: \"space-between\" }}>\n            <h3 style={{ margin: \"3px 0px 0px 10px\" }}>PLC Code</h3>\n            <Button\n              onClick={toggleDownloadMenu}\n              ref={(ref) => {\n                if (ref !== null) {\n                  setAnchorElem(ref);\n                }\n              }}\n            >\n              Download Code\n            </Button>\n          </div>\n          <Menu\n            anchorEl={anchorElem}\n            keepMounted\n            open={isDownloadMenuOpen}\n            onClose={toggleDownloadMenu}\n          >\n            <MenuItem\n              onClick={tryDownload(\"XML\")}\n              style={\n                rootStore.codesysVersion !== null\n                  ? {\n                      paddingTop: \"1px\",\n                      paddingBottom: \"1px\",\n                    }\n                  : undefined\n              }\n            >\n              PLCopen XML\n              {rootStore.codesysVersion !== null && (\n                <div\n                  className=\"col\"\n                  style={{ fontSize: \"0.7em\", paddingLeft: \"10px\" }}\n                >\n                  <div>CodeSys version</div>\n                  <div\n                    className=\"row\"\n                    style={{ justifyContent: \"space-between\" }}\n                  >\n                    {rootStore.codesysVersion}\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleCodesysVersion();\n                      }}\n                      style={{ fontSize: \"0.8em\" }}\n                    >\n                      Edit\n                    </button>\n                  </div>\n                </div>\n              )}\n            </MenuItem>\n            <MenuItem onClick={tryDownload(\"TXT\")}>Text Files</MenuItem>\n          </Menu>\n          <CodesysVesionDialog\n            open={isCodesysVersionOpen}\n            toggleDialog={toggleCodesysVersion}\n            accept={(version: string) => {\n              rootStore.setCodesysVersion(version);\n              toggleCodesysVersion();\n              tryDownload(\"XML\")();\n            }}\n          />\n          <WarningsDialog\n            open={isWarningsDialogOpen !== undefined}\n            toggleDialog={() => setIsWarningsDialogOpen(undefined)}\n            warnings={rootStore.globalData.warnings}\n            accept={() => rootStore.downloadSourceCode(isWarningsDialogOpen!)}\n          />\n        </div>\n        <div\n          style={{\n            overflow: \"auto\",\n            height: \"100%\",\n            padding: \"0 10px\",\n            flex: 1,\n          }}\n        >\n          <pre>{rootStore.globalData.generateMainFile}</pre>\n        </div>\n      </div>\n    </Resizable>\n  );\n});\n\nexport const CodesysVesionDialog = ({\n  open,\n  toggleDialog,\n  accept,\n}: {\n  open: boolean;\n  toggleDialog: () => void;\n  accept: (version: string) => void;\n}) => {\n  const [version, setVersion] = useState(\"\");\n  const [versionInput, setVersionInput] = useState<HTMLElement | null>(null);\n  const [error, setError] = useState(\"\");\n  const [prevOpen, setPrevOpen] = useState(open);\n\n  useEffect(() => {\n    if (open && !prevOpen) {\n      setError(\"\");\n    }\n    if (open !== prevOpen) {\n      setPrevOpen(open);\n    }\n  }, [open, prevOpen]);\n\n  const updateError = (version: string) => {\n    const hasError = version.match(\"^[0-9]+.[0-9]+.[0-9]+.[0-9]+$\") === null;\n    if (hasError) {\n      setError(\"Should be 4 numbers separated by points, e.g. 3.5.9.40\");\n    } else {\n      setError(\"\");\n    }\n    return hasError;\n  };\n  const send = () => {\n    if (updateError(version)) {\n      versionInput?.focus();\n    } else {\n      accept(version);\n    }\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={toggleDialog}\n      keepMounted\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">CoDeSys Version</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          We require your CoDeSys version to export the project as a PLCopen\n          XML. It can be found in the 'Help' - 'Information' toolbar menu in\n          CoDeSys.\n          <br />\n          <br />\n          Example:\n          <br />\n          3.5.11.30 = CODESYS V3.5 SP11 Patch 3\n        </DialogContentText>\n        <div className=\"col\">\n          <TextField\n            type=\"text\"\n            value={version}\n            onChange={(e) => {\n              const value = e.target.value.replace(/(\\s|[a-zA-Z])/g, \"\");\n              if (error.length !== 0) {\n                updateError(value);\n              }\n              setVersion(value);\n            }}\n            style={{ width: \"180px\" }}\n            label=\"CoDeSys version\"\n            helperText={\n              error.length !== 0 ? error : \"4 integers separeted by points\"\n            }\n            error={error.length !== 0}\n            inputRef={(ref) => {\n              if (ref !== null) {\n                ref.focus();\n                setVersionInput(ref);\n              }\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                send();\n              }\n            }}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog} color=\"primary\">\n          Close\n        </Button>\n        <Button onClick={send} color=\"primary\">\n          Continue\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { DBSchema, IDBPDatabase, openDB } from \"idb\";\nimport { JsonType } from \"./store\";\n\nconst DB_NAME = \"GemmaGrafcet\";\nenum DBStores {\n  graph = \"graph\",\n  node = \"node\",\n  connection = \"connection\",\n}\n\nexport type GraphJson = {\n  key: string;\n  data: JsonType;\n};\n\nexport type NodeJson = {\n  key: string;\n  name: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isHidden: boolean;\n  data: JsonType;\n};\n\ntype _NodeJson = NodeJson & {\n  graphKey: string;\n};\n\nexport type ConnectionJson = {\n  from: string;\n  to: string;\n  isHidden: boolean;\n  innerPoints: Array<{x: number, y: number}>;\n  data: JsonType;\n};\n\ntype _ConnectionJson = ConnectionJson & {\n  key: string;\n  graphKey: string;\n};\n\ninterface MyDB extends DBSchema {\n  [DBStores.graph]: {\n    key: string;\n    value: GraphJson;\n  };\n  [DBStores.node]: {\n    key: string;\n    value: _NodeJson;\n    indexes: { \"by-graph\": string };\n  };\n  [DBStores.connection]: {\n    key: string;\n    value: _ConnectionJson;\n    indexes: { \"by-graph\": string };\n  };\n}\n\nexport async function createIndexedDB() {\n  const db = await openDB<MyDB>(DB_NAME, 1, {\n    upgrade(db) {\n      db.createObjectStore(DBStores.graph, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n\n      const nodeStore = db.createObjectStore(DBStores.node, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      nodeStore.createIndex(\"by-graph\", \"graphKey\");\n\n      const connStore = db.createObjectStore(DBStores.connection, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      connStore.createIndex(\"by-graph\", \"graphKey\");\n    },\n  });\n  return new IndexedDB(db);\n}\n\nexport function sameKeys(conn: ConnectionJson, conn2: ConnectionJson) {\n  return getKeyFromConnection(conn) === getKeyFromConnection(conn2);\n}\n\nexport function getKeyFromConnection(conn: ConnectionJson) {\n  return `${conn.from}_${conn.to}`;\n}\n\nexport function connectionWithKey(\n  graphKey: string,\n  conn: ConnectionJson\n): _ConnectionJson {\n  return Object.assign(conn, { key: getKeyFromConnection(conn), graphKey });\n}\n\nexport class IndexedDB {\n  constructor(private db: IDBPDatabase<MyDB>) {}\n\n  //\n  // GRAPHS\n  //\n\n  fetchGraphs() {\n    return this.db.getAll(DBStores.graph);\n  }\n\n  updateGraph(value: GraphJson) {\n    return this.db.put(DBStores.graph, value);\n  }\n\n  async deleteGraph(graphKey: string) {\n    const tx = this.db.transaction(\n      [DBStores.graph, DBStores.node, DBStores.connection],\n      \"readwrite\"\n    );\n    tx.objectStore(DBStores.graph).delete(graphKey);\n    for (const dbKey of [DBStores.node, DBStores.connection] as Array<\n      DBStores.node | DBStores.connection\n    >) {\n      let cursor = await tx\n        .objectStore(dbKey)\n        .index(\"by-graph\")\n        .openCursor(graphKey);\n      while (cursor) {\n        cursor.delete();\n        cursor = await cursor.continue();\n      }\n    }\n    await tx.done;\n  }\n\n  async loadGraph(graphKey: string) {\n    const [nodes, connections] = await Promise.all([\n      this.db.getAllFromIndex(DBStores.node, \"by-graph\", graphKey),\n      this.db.getAllFromIndex(DBStores.connection, \"by-graph\", graphKey),\n    ]);\n\n    return { nodes, connections };\n  }\n\n  //\n  // NODES\n  //\n\n  async addNodes(graphKey: string, nodes: NodeJson[]) {\n    const tx = this.db.transaction(DBStores.node, \"readwrite\");\n\n    const _g = { graphKey };\n    for (const n of nodes) {\n      tx.store.add(Object.assign(n, _g));\n    }\n    return await tx.done;\n  }\n\n  deleteNode(path: NodeJson) {\n    return this.db.delete(DBStores.node, path.key);\n  }\n\n  async updateNode(graphKey: string, path: NodeJson) {\n    return this.db.put(DBStores.node, Object.assign(path, { graphKey }));\n  }\n\n  async updateNodes(graphKey: string, nodes: Array<NodeJson>) {\n    const _g = { graphKey };\n    return this.updateMany(\n      DBStores.node,\n      nodes.map((n) => n.key),\n      nodes.map((p) => Object.assign(p, _g))\n    );\n  }\n\n  //\n  // CONNECTIONS\n  //\n\n  async addConnections(graphKey: string, connections: ConnectionJson[]) {\n    const tx = this.db.transaction(DBStores.connection, \"readwrite\");\n\n    for (const p of connections) {\n      tx.store.add(connectionWithKey(graphKey, p));\n    }\n    return await tx.done;\n  }\n\n  deleteConnection(path: ConnectionJson) {\n    return this.db.delete(DBStores.connection, getKeyFromConnection(path));\n  }\n\n  async updateConnection(graphKey: string, connection: ConnectionJson) {\n    return this.db.put(\n      DBStores.connection,\n      connectionWithKey(graphKey, connection)\n    );\n  }\n\n  async updateConnections(\n    graphKey: string,\n    connections: Array<ConnectionJson>\n  ) {\n    return this.updateMany(\n      DBStores.connection,\n      connections.map(getKeyFromConnection),\n      connections.map((p) => connectionWithKey(graphKey, p))\n    );\n  }\n\n  //\n  // OTHER\n  //\n\n  async closeDB() {\n    this.db.close();\n  }\n\n  async clearDB() {\n    await Promise.all([\n      this.db.clear(DBStores.graph),\n      this.db.clear(DBStores.connection),\n      this.db.clear(DBStores.node),\n    ]);\n  }\n\n  private async updateMany<T>(dbKey: DBStores, keys: string[], items: T[]) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    await Promise.all(\n      items.map(async (path, index) => {\n        const key = keys[index];\n        const val = await tx.store.get(key);\n\n        if (!val) {\n          throw new Error();\n        }\n        return tx.store.put({ ...val, ...path });\n      })\n    );\n    return await tx.done;\n  }\n\n  private async updateIncrementalSingle<T>(\n    dbKey: DBStores,\n    key: string,\n    item: T\n  ) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    const val = await tx.store.get(key);\n\n    if (!val) {\n      throw new Error();\n    }\n    tx.store.put({ ...val, ...item });\n    await tx.done;\n  }\n}\n","import React from \"react\";\nimport { computed, observable, reaction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { ChoiceFieldSpec } from \"../fields/choice-field\";\nimport { ConnectionPosition, NodeData, NodeModel } from \"../node/node-model\";\nimport { listToMap } from \"../utils\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { Transition } from \"./transition\";\nimport { JsonType } from \"../canvas/store\";\nimport { BoolFieldSpec } from \"../fields/primitive-field\";\n\nexport enum StepType {\n  ENCLOSING = \"ENCLOSING\",\n  MACRO = \"MACRO\",\n  SIMPLE = \"SIMPLE\",\n  CONTAINER = \"CONTAINER\",\n}\n\ntype GemmaNode = NodeModel<Step, GemmaGrafcet, Transition>;\n\nexport enum ProcedureType {\n  F = \"F\", // Operational\n  D = \"D\", // Failure\n  A = \"A\", // Stop\n}\n\nexport type Step = SimpleStep | EnclosingStep | MacroStep | ContainerStep;\n\nexport class BaseStep implements NodeData<Step, GemmaGrafcet, Transition> {\n  @observable\n  type: StepType;\n\n  nInputs = Number.POSITIVE_INFINITY;\n  errors = observable.map<string, string>();\n\n  constructor(\n    public node: GemmaNode,\n    d?: {\n      family?: ProcedureType;\n      isInitial?: boolean;\n      type?: StepType;\n    }\n  ) {\n    this.family = d?.family ?? ProcedureType.F;\n    this.isInitial = d?.isInitial ?? false;\n    this.type = d?.type ?? StepType.SIMPLE;\n    reaction(\n      (_) => this.isInitial,\n      (isInitial, _) => {\n        if (isInitial) {\n          const otherInitial = this.automationSystem.steps.find(\n            (s) => s.isInitial && s !== this\n          );\n          if (otherInitial !== undefined) {\n            otherInitial.isInitial = false;\n          }\n        }\n      }\n    );\n  }\n\n  @computed\n  get name(): string {\n    return this.node.name;\n  }\n  @observable\n  isInitial: boolean;\n  @observable\n  family: ProcedureType;\n  @computed\n  get parent(): GemmaNode | undefined {\n    if (this.type === StepType.CONTAINER) {\n      return undefined;\n    }\n    switch (this.family) {\n      case ProcedureType.A:\n        return this.automationSystem.aFamily;\n      case ProcedureType.D:\n        return this.automationSystem.dFamily;\n      case ProcedureType.F:\n        return this.automationSystem.fFamily;\n    }\n    throw new Error(\"\");\n  }\n  get key(): string {\n    return this.node.key;\n  }\n  get automationSystem(): GemmaGrafcet {\n    return this.node.graph.globalData;\n  }\n\n  connectionStartPosition = (): undefined | ConnectionPosition => {\n    if (this.type === StepType.CONTAINER) {\n      return { bottom: 40, left: 50 };\n    }\n    return undefined;\n  };\n\n  @computed\n  get _transitions(): Transition[] {\n    return this.node.outputs\n      .filter((t) => !t.isHidden)\n      .map((t) => t.data)\n      .sort((a, b) => a.priority - b.priority);\n  }\n  @computed\n  get innerTransitionsLength(): number {\n    return this._transitions.length;\n  }\n  @computed\n  get transitions(): Transition[] {\n    if (this === this.automationSystem.fFamily!.data) {\n      return this._transitions;\n    }\n    return this.family === ProcedureType.F\n      ? this.automationSystem.fFamily!.data.transitions.concat(\n          this._transitions\n        )\n      : this._transitions;\n  }\n  @computed\n  get id(): number {\n    if (this.name.length === 2) {\n      let delta: number;\n      switch (this.family) {\n        case ProcedureType.A:\n          delta = 0;\n          break;\n        case ProcedureType.F:\n          delta = 7;\n          break;\n        case ProcedureType.D:\n          delta = 7 + 6;\n          break;\n      }\n      return delta + Number.parseInt(this.name[1]);\n    }\n    return 0;\n  }\n\n  spec = {\n    isInitial: new BoolFieldSpec({\n      label: \"Initial\",\n      default: false,\n      required: true,\n    }),\n    type: new ChoiceFieldSpec({\n      label: \"Type\",\n      default: StepType.SIMPLE,\n      choices: listToMap(\n        Object.values(StepType).filter((t) => t !== StepType.CONTAINER)\n      ),\n    }),\n  };\n\n  isValidInput(n: GemmaNode): boolean {\n    return this.node.inputNodes.every((t) => t.data !== n.data);\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      family: this.family,\n      type: this.type,\n      isInitial: this.isInitial,\n    };\n  }\n\n  View = observer(({ children }) => {\n    const _color = {\n      [ProcedureType.A]: \"#ecf5ff\",\n      [ProcedureType.D]: \"#ffd6d6\",\n      [ProcedureType.F]: \"#ebffec\",\n    };\n\n    if (this.type === StepType.CONTAINER) {\n      return (\n        <div\n          style={{\n            position: \"relative\",\n            border: \"1px solid #eee\",\n            background: _color[this.family],\n            flex: 1,\n            width: 400,\n            height: 400,\n          }}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    let style: React.CSSProperties = {};\n    let innerStyle: React.CSSProperties = { padding: \"12px\" };\n    let wrapper: (p: React.ReactElement) => React.ReactElement = (p) => p;\n\n    if (this.isInitial) {\n      wrapper = (p) => (\n        <div style={{ padding: \"5px\" }}>\n          <div\n            style={{\n              border: \"1.5px solid\",\n            }}\n          >\n            {p}\n          </div>\n        </div>\n      );\n    }\n\n    const nodeHeight = this.node.height - 2 - (this.isInitial ? 12 : 0);\n    switch (this.type) {\n      case StepType.ENCLOSING:\n        style = { padding: \"0 0\", display: \"flex\" };\n        return wrapper(\n          <div style={{ ...style, position: \"relative\" }}>\n            <EnclosingDecoration left={true} nodeHeight={nodeHeight} />\n            <div style={{ ...innerStyle, padding: \"12px 18px\" }}>\n              {this.node.name}\n            </div>\n            <EnclosingDecoration left={false} nodeHeight={nodeHeight} />\n          </div>\n        );\n      case StepType.MACRO:\n        style = { padding: \"5px 0\" };\n        innerStyle = {\n          borderTop: \"1.5px solid\",\n          borderBottom: \"1.5px solid\",\n          borderRight: \"0\",\n          borderLeft: \"0\",\n          padding: \"5px 12px\",\n        };\n        break;\n    }\n\n    return wrapper(\n      <div style={style}>\n        <div style={innerStyle}>{this.node.name}</div>\n      </div>\n    );\n  });\n}\n\nexport type SimpleStep = BaseStep & {\n  type: StepType.SIMPLE;\n};\n\nexport type ContainerStep = BaseStep & {\n  type: StepType.CONTAINER;\n};\n\nexport type EnclosingStep = BaseStep & {\n  type: StepType.ENCLOSING;\n};\n\nexport type MacroStep = BaseStep & {\n  type: StepType.MACRO;\n};\n\nexport const EnclosingDecoration = ({\n  nodeHeight,\n  left,\n}: {\n  nodeHeight: number;\n  left: boolean;\n}) => {\n  return (\n    <svg\n      style={{\n        width: \"10px\",\n        height: \"\" + nodeHeight + \"px\",\n        position: \"absolute\",\n        right: left ? undefined : 0,\n      }}\n    >\n      <path\n        d={\n          left\n            ? `M 10 0 L 0 ${nodeHeight / 2} L 10 ${nodeHeight}`\n            : `M 0 0 L 10 ${nodeHeight / 2} L 0 ${nodeHeight}`\n        }\n        stroke=\"black\"\n        fill=\"transparent\"\n      ></path>\n    </svg>\n  );\n};\n","import { action, computed, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn } from \"mobx-state-tree\";\nimport { FieldSpec } from \"../fields\";\nimport { GlobalData, RootStoreModel, JsonType } from \"../canvas/store\";\nimport { ConnectionJson, NodeJson } from \"../canvas/persistence\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\n\nexport type OperationI<\n  V extends { [key: string]: FieldSpec },\n  D extends NodeData<D, G, any>,\n  G extends GlobalData<D>\n> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  nInputs: number;\n  errors: ObservableMap<keyof V, string>;\n};\n\nexport const mobxDecorators = <V extends { [key: string]: FieldSpec }>(\n  spec: V\n) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    errors: observable,\n  };\n};\n\nexport type ConnectionPosition =\n  | { top: number; left: number }\n  | { top: number; right: number }\n  | { bottom: number; left: number }\n  | { bottom: number; right: number };\n\nexport interface NodeData<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  isValidInput(input: NodeModel<D, G, C>): boolean;\n  nInputs: number;\n  spec: { [key: string]: FieldSpec };\n  // TODO: ObservableMap<keyof V, string>\n  errors: ObservableMap<string, string>;\n  View: React.FC;\n  toJson: JsonType;\n  parent?: NodeModel<D, G, C>;\n  connectionStartPosition?: () => undefined | ConnectionPosition;\n}\n\nexport type ConnectionData<D> = {\n  ConnectionView: React.FunctionComponent;\n  connectionText: { text: string; style?: React.CSSProperties }[];\n  toJson: JsonType;\n};\n\nexport class ConnModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public from: NodeModel<D, G, C>,\n    public to: NodeModel<D, G, C>,\n    dataBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C,\n    json?: Partial<ConnectionJson>\n  ) {\n    this.data = dataBuilder(this, json?.data);\n    this.isHidden = json?.isHidden ?? false;\n    this.innerPoints = observable.array<{ x: number; y: number }>(\n      json?.innerPoints ?? []\n    );\n  }\n\n  data: C;\n  @observable\n  isHidden: boolean;\n  get graph(): RootStoreModel<D, G, any> {\n    return this.from.graph;\n  }\n\n  @computed\n  get isSelected(): boolean {\n    return this.from.graph.selectedConnection === this;\n  }\n\n  @computed\n  get toJson(): ConnectionJson {\n    return {\n      from: this.from.key,\n      to: this.to.key,\n      data: this.data.toJson,\n      isHidden: this.isHidden,\n      innerPoints: [...this.innerPoints.map((p) => ({ ...p }))],\n    };\n  }\n\n  @observable\n  innerPoints: IObservableArray<{\n    x: number;\n    y: number;\n  }>;\n}\n\nexport type LineData = {\n  length: number;\n  axis: \"vert\" | \"hori\";\n};\n\nexport class NodeModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public graph: RootStoreModel<D, G, any>,\n    d: {\n      key: string;\n      name: string;\n      x: number;\n      y: number;\n      isHidden?: boolean;\n      dataBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n      data?: JsonType;\n    }\n  ) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.isHidden = d.isHidden ?? false;\n    this.data = d.dataBuilder(this, d.data);\n  }\n\n  resizeObserver?: ResizeObserver;\n  element?: HTMLElement;\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: D;\n  @observable\n  isHidden: boolean;\n  @observable\n  inputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get inputNodes(): NodeModel<D, G, C>[] {\n    return this.inputs.map((c) => c.from);\n  }\n  @observable\n  outputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get outputNodes(): NodeModel<D, G, C>[] {\n    return this.outputs.map((c) => c.to);\n  }\n\n  @action\n  addInput(conn: ConnModel<D, G, C>) {\n    this.inputs.push(conn);\n    conn.from.outputs.push(conn);\n  }\n\n  @action\n  addOutput(conn: ConnModel<D, G, C>) {\n    this.outputs.push(conn);\n    conn.to.inputs.push(conn);\n  }\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n  setElement = (element: HTMLElement) => {\n    this.setSize(element.getBoundingClientRect());\n\n    if (this.element !== element) {\n      if (this.resizeObserver !== undefined) {\n        this.resizeObserver.disconnect();\n      }\n      this.element = element;\n      this.resizeObserver = new ResizeObserver((entries, observer) => {\n        this.setSize(element.getBoundingClientRect());\n      });\n      this.resizeObserver.observe(element);\n    }\n  };\n\n  @computed\n  get toJson(): NodeJson {\n    return {\n      key: this.key,\n      name: this.name,\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      isHidden: this.isHidden,\n      data: this.data.toJson,\n    };\n  }\n}\n","import {\n  action,\n  computed,\n  IKeyValueMap,\n  IMapEntries,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { v4 } from \"uuid\";\nimport { SourceDirectory } from \"../codegen/file-system\";\nimport {\n  NodeModel,\n  NodeData,\n  ConnModel,\n  ConnectionData,\n} from \"../node/node-model\";\nimport { downloadToClient } from \"../utils\";\nimport JSZip from \"jszip\";\nimport { ConnectionJson, GraphJson, IndexedDB, NodeJson } from \"./persistence\";\n\nexport type DataBuilder<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  connectionBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C;\n  nodeBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n  graphBuilder: (graph: RootStoreModel<D, G, C>, json?: JsonType) => G;\n};\n\ntype JsonTypeItem = number | string | boolean | JsonType;\nexport type JsonType = { [key: string]: JsonTypeItem | JsonTypeItem[] };\n\nexport type GraphWarnings = {\n  [key: string]: string[] | Array<[string, Array<string>]>;\n};\n\nexport interface GlobalData<D extends NodeData<D, any, any>> {\n  generateMainFile: string;\n  generateSourceCode: SourceDirectory;\n  generateProjectInFormat(format: string): string;\n  canAddNode(nodeType: string): boolean;\n  View: React.FunctionComponent;\n  CanvasView: React.FunctionComponent;\n  toJson: JsonType;\n  warnings: GraphWarnings;\n  initState?: () => void;\n}\n\ntype FullGraphJson = {\n  graph: GraphJson;\n  nodes: NodeJson[];\n  connections: ConnectionJson[];\n};\n\ntype ConstructParams<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  builders: DataBuilder<D, G, C>;\n  data?: G;\n  key?: string;\n  nodes?:\n    | IMapEntries<string, NodeModel<D, G, C>>\n    | IKeyValueMap<NodeModel<D, G, C>>;\n};\n\nexport class RootStoreModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> {\n  constructor(d: {\n    db: IndexedDB;\n    builders: DataBuilder<D, G, C>;\n    hideOnDelete?: boolean;\n    json?: FullGraphJson;\n  }) {\n    this.db = d.db;\n    this.builders = d.builders;\n    this.hideOnDelete = d.hideOnDelete ?? false;\n    this.globalData = d.builders.graphBuilder(this, d.json?.graph.data);\n    this.key = d.json?.graph.key ?? v4();\n\n    const nodes = d.json?.nodes.reduce((m, n) => {\n      const node = new NodeModel(this, {\n        ...n,\n        dataBuilder: d.builders.nodeBuilder,\n      });\n\n      m[n.key] = node;\n      return m;\n    }, {} as { [key: string]: NodeModel<D, G, C> });\n\n    this.nodes = observable.map(nodes ?? {});\n\n    d.json?.connections.forEach((c) => {\n      const from = this.nodes.get(c.from);\n      const to = this.nodes.get(c.to);\n      if (from !== undefined && to !== undefined) {\n        this.addConnection(from, to, c);\n      }\n    });\n    if (this.nodes.size !== 0) {\n      this.selectedNode = this.nodes.values().next().value;\n      if (this.selectedNode!.outputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.outputs[0];\n      } else if (this.selectedNode!.inputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.inputs[0];\n      } else {\n        for (const _n of this.nodes.values()) {\n          if (_n.outputs.length !== 0) {\n            this.selectedConnection = _n.outputs[0];\n            break;\n          }\n        }\n      }\n    }\n    if (this.globalData.initState !== undefined) {\n      this.globalData.initState();\n    }\n\n    document.addEventListener(\"mousemove\", (e) => {\n      this.mouseMoveEvent = e;\n    });\n\n    reaction(\n      (_) => ({\n        selectedPointIndex: this.selectedPointIndex,\n        mouseMoveEvent: this.mouseMoveEvent,\n      }),\n      (d) => {\n        if (\n          d.mouseMoveEvent !== undefined &&\n          d.selectedPointIndex !== undefined &&\n          this.selectedConnection !== undefined\n        ) {\n          const target = document\n            .getElementsByClassName(\"canvas-wrapper\")[0]!\n            .getBoundingClientRect();\n          const x = d.mouseMoveEvent.clientX - target.left;\n          const y = d.mouseMoveEvent.clientY - target.top;\n          this.selectedConnection.innerPoints[d.selectedPointIndex] = { x, y };\n        }\n      }\n    );\n  }\n\n  key: string;\n  // Builders to create graph, node and transition instances\n  builders: DataBuilder<D, G, C>;\n  hideOnDelete: boolean;\n  // Global generic data\n  globalData: G;\n  db: IndexedDB;\n\n  @observable\n  resetStore: boolean = false;\n  // All nodes\n  @observable\n  nodes: ObservableMap<string, NodeModel<D, G, C>>;\n  // Selected node\n  @observable\n  selectedNode?: NodeModel<D, G, C>;\n  // Selected connection\n  @observable\n  selectedConnection?: ConnModel<D, G, C>;\n\n  @observable\n  selectedPointIndex?: number;\n  @observable\n  mouseMoveEvent?: MouseEvent;\n\n  // Selected input for connection\n  @observable\n  selectingInputFor?: NodeModel<D, G, C>;\n\n  @observable\n  showHidden = true;\n  @observable\n  codesysVersion = localStorage.getItem(\"codesysVersion\");\n\n  @action\n  setCodesysVersion = (version: string) => {\n    localStorage.setItem(\"codesysVersion\", version);\n    this.codesysVersion = version;\n  };\n\n  // Select a node\n  @action\n  selectNode = (node: NodeModel<D, G, C>) => {\n    this.selectedNode = node;\n  };\n\n  // Select a connection\n  @action\n  selectConnection = (connection: ConnModel<D, G, C>) => {\n    this.selectedConnection = connection;\n  };\n\n  // Add a node\n  @action\n  addNode = (\n    nodeType: string,\n    pos?: { x: number; y: number }\n  ): NodeModel<D, G, C> | undefined => {\n    if (this.globalData.canAddNode(nodeType)) {\n      const op = new NodeModel(this, {\n        dataBuilder: this.builders.nodeBuilder,\n        key: v4(),\n        name: nodeType,\n        x: pos?.x ?? 100,\n        y: pos?.y ?? 100,\n        data: { type: nodeType },\n      });\n      this.nodes.set(op.key, op);\n      return op;\n    }\n  };\n\n  // Remove a node\n  @action\n  removeNode = (node: NodeModel<D, G, C>): void => {\n    if (this.hideOnDelete) {\n      node.isHidden = true;\n      for (const _in of node.inputs) {\n        _in.isHidden = true;\n      }\n      for (const _out of node.outputs) {\n        _out.isHidden = true;\n      }\n    } else {\n      if (node === this.selectedNode) {\n        this.selectedNode = undefined;\n      }\n      if (this.nodes.delete(node.key)) {\n        for (const _in of node.inputs) {\n          _in.from.outputs.remove(_in);\n        }\n        for (const _out of node.outputs) {\n          _out.to.inputs.remove(_out);\n        }\n      }\n    }\n  };\n\n  @action\n  activateNode = (node: NodeModel<D, G, C>) => {\n    node.isHidden = false;\n    for (const _in of node.inputs) {\n      if (!_in.from.isHidden) _in.isHidden = false;\n    }\n    for (const _out of node.outputs) {\n      if (!_out.to.isHidden) _out.isHidden = false;\n    }\n  };\n\n  @action\n  removeConnection = (connection: ConnModel<D, G, C>): void => {\n    if (this.hideOnDelete) {\n      connection.isHidden = true;\n    } else {\n      if (connection === this.selectedConnection) {\n        this.selectedConnection = undefined;\n      }\n      connection.from.outputs.remove(connection);\n      connection.to.inputs.remove(connection);\n    }\n  };\n\n  @action\n  activateConnection = (connection: ConnModel<D, G, C>): void => {\n    if (!connection.from.isHidden && !connection.to.isHidden) {\n      connection.isHidden = false;\n    }\n  };\n\n  // Select input-output / add connection\n\n  @action\n  selectingInput = (from: NodeModel<D, G, C>) => {\n    this.selectingInputFor = from;\n    window.addEventListener(\"keyup\", this._selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (to: NodeModel<D, G, C>): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      this.selectingInputFor!,\n      to,\n      this.builders.connectionBuilder\n    );\n    conn.from.addOutput(conn);\n    this.selectingInputFor = undefined;\n    this.selectedConnection = conn;\n    window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    return conn;\n  };\n\n  @action\n  private _selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    }\n  };\n\n  @action\n  addConnection = (\n    from: NodeModel<D, G, C>,\n    to: NodeModel<D, G, C>,\n    json?: Partial<ConnectionJson>\n  ): ConnModel<D, G, C> => {\n    const conn = new ConnModel(from, to, this.builders.connectionBuilder, json);\n    conn.from.addOutput(conn);\n    return conn;\n  };\n\n  // Serialization\n\n  @computed\n  get toJson(): GraphJson {\n    return { data: this.globalData.toJson, key: this.key };\n  }\n\n  saveModel = async () => {\n    const nodes = [...this.nodes.entries()];\n    await this.db.clearDB();\n    await Promise.all([\n      this.db.updateGraph(this.toJson),\n      this.db.addNodes(\n        this.key,\n        nodes.map(([_, value]) => value.toJson)\n      ),\n      this.db.addConnections(\n        this.key,\n        nodes.flatMap(([_, value]) => value.outputs).map((t) => t.toJson)\n      ),\n    ]);\n  };\n\n  downloadModel = (): FullGraphJson => {\n    const nodes = [...this.nodes.entries()];\n    const json = {\n      graph: this.toJson,\n      nodes: nodes.map(([_, value]) => value.toJson),\n      connections: nodes\n        .flatMap(([_, value]) => value.outputs)\n        .map((t) => t.toJson),\n    };\n\n    downloadToClient(\n      JSON.stringify(json),\n      \"gemma-model.json\",\n      \"application/json\"\n    );\n    return json;\n  };\n\n  downloadSourceCode = async (format: \"XML\" | \"TXT\") => {\n    if (format === \"TXT\") {\n      const _addToZip = (root: JSZip, dir: SourceDirectory) => {\n        const newRoot = root.folder(dir.name)!;\n\n        for (const item of dir.items) {\n          item.when({\n            file: (f) => newRoot.file(f.name, f.content),\n            dir: (d) => _addToZip(newRoot, d),\n          });\n        }\n      };\n\n      const zip = new JSZip();\n      const sourceCode = this.globalData.generateSourceCode;\n      _addToZip(zip, sourceCode);\n\n      const content = await zip.generateAsync({ type: \"blob\" });\n\n      downloadToClient(\n        content,\n        \"gemma-grafcet-source-code.zip\",\n        \"application/zip\"\n      );\n    } else if (format === \"XML\") {\n      const projectFile = this.globalData.generateProjectInFormat(format);\n      downloadToClient(\n        projectFile,\n        \"gemma-grafcet-source-code.xml\",\n        \"application/xml\"\n      );\n    }\n  };\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { NodeModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\nimport Button from \"@material-ui/core/Button\";\n\ntype Props2 = {\n  children: React.ReactNode;\n};\n\nexport const PropertiesTable = observer(({ children }: Props2) => {\n  return (\n    <PropertiesTableStyled>\n      {/* <thead>\n        <tr>\n          <td>Property</td>\n          <td>Value</td>\n        </tr>\n      </thead> */}\n      <tbody>{children}</tbody>\n    </PropertiesTableStyled>\n  );\n});\n\ntype Props<D extends NodeData<D, any, any>> = {\n  self: NodeModel<D, any, any>;\n};\n\nexport const PropertiesTableNode = observer(\n  <D extends NodeData<D, any, any>>({ self }: Props<D>) => {\n    const rootStore = useStore();\n    return (\n      <div className=\"col\">\n        <PropertiesTable>\n          {Object.entries(self.data.spec).map(([k, v]) => (\n            <tr key={k}>\n              <td>{v.label ?? k}</td>\n              <td>\n                <v.plotField name={k} model={self.data as any} />\n              </td>\n            </tr>\n          ))}\n        </PropertiesTable>\n        <div style={{ margin: \"0 3px\" }}>\n          {self.data.nInputs !== 0 && (\n            <div className=\"row\" key=\"inputs\" style={{ alignItems: \"center\" }}>\n              <h4 style={{ margin: \"3px 0 5px 0\", width: \"90px\" }}>Inputs:</h4>\n              <div style={{ flex: 1 }}>\n                {self.inputs.map((v) => (\n                  <Button\n                    onClick={() => rootStore.selectConnection(v as any)}\n                    key={v.from.key}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    style={{ minWidth: \"39px\" }}\n                  >\n                    {v.from.name}\n                  </Button>\n                ))}\n                {self.inputs.length === 0 && \"No inputs\"}\n              </div>\n            </div>\n          )}\n          <div className=\"row\" key=\"outputs\" style={{ alignItems: \"center\" }}>\n            <h4 style={{ margin: \"3px 0 5px 0\", width: \"90px\" }}>Outputs:</h4>\n            <div style={{ flex: 1 }}>\n              {self.outputs.map((v) => (\n                <Button\n                  onClick={() => rootStore.selectConnection(v as any)}\n                  key={v.to.key}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  style={{ minWidth: \"39px\" }}\n                >\n                  {v.to.name}\n                </Button>\n              ))}\n              {self.outputs.length === 0 && \"No outputs\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  padding-bottom: 10px;\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n    tr td:last-child {\n      padding: 4px 0px 4px 10px;\n    }\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTableNode } from \"./properties-table\";\nimport { useStore } from \"../App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./properties-view.css\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n\n  let inner;\n  if (rootStore.selectedNode != null) {\n    const selectedNode = rootStore.selectedNode;\n    const selectedConnection = rootStore.selectedConnection;\n    inner = (\n      <div\n        style={{\n          overflow: \"auto\",\n          height: \"100%\",\n          maxWidth: \"100%\",\n          justifyContent: \"space-around\",\n          backgroundColor: \"#fafafa\",\n          display: \"flex\",\n        }}\n        className=\"row\"\n      >\n        <div\n          className=\"properties-view\"\n          key=\"node-properties\"\n          id=\"node-properties\"\n        >\n          <div\n            className=\"row\"\n            style={{ justifyContent: \"space-between\", alignItems: \"center\" }}\n          >\n            <h3 style={{ margin: \"5px 0px 10px 5px\" }}>\n              {`Step: ${selectedNode.name}`}\n            </h3>\n            <IconButton\n              onClick={(_) => {\n                if (selectedNode.isHidden) {\n                  rootStore.activateNode(selectedNode);\n                } else {\n                  rootStore.removeNode(selectedNode);\n                }\n              }}\n            >\n              <FontAwesomeIcon\n                icon={selectedNode.isHidden ? \"eye\" : \"eye-slash\"} //trash-alt\n                color={\"#000\"}\n              />\n            </IconButton>\n          </div>\n          <PropertiesTableNode self={rootStore.selectedNode} />\n        </div>\n        <div\n          className=\"properties-view\"\n          key=\"connection-properties\"\n          id=\"connection-properties\"\n        >\n          {selectedConnection !== undefined && (\n            <div className=\"col\">\n              <div\n                className=\"row\"\n                style={{\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <h3 style={{ margin: \"5px 0 10px 5px\" }}>\n                  {`Transition: ${selectedConnection.from.name} -> ${selectedConnection.to.name}`}\n                </h3>\n                <IconButton\n                  onClick={(_) => {\n                    if (selectedConnection.isHidden) {\n                      rootStore.activateConnection(selectedConnection);\n                    } else {\n                      rootStore.removeConnection(selectedConnection);\n                    }\n                  }}\n                >\n                  <FontAwesomeIcon\n                    icon={selectedConnection.isHidden ? \"eye\" : \"eye-slash\"} //trash-alt\n                    color={\"#000\"}\n                  />\n                </IconButton>\n              </div>\n              <selectedConnection.data.ConnectionView />\n            </div>\n          )}\n        </div>\n        <div\n          style={{ minWidth: \"270px\" }}\n          className=\"properties-view\"\n          key=\"graph-properties\"\n          id=\"graph-properties\"\n        >\n          <rootStore.globalData.View />\n        </div>\n      </div>\n    );\n  } else {\n    inner = (\n      <div style={{ width: \"150px\" }} className=\"row\">\n        <div style={{ width: \"150px\" }} className=\"center\">\n          Not selected\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      defaultSize={{ height: 295, width: \"auto\" }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","export class VarId {\n  constructor(public text: string) {}\n\n  toString(): string {\n    return this.text;\n  }\n}\n\nexport type CustomToken =\n  | \"(\"\n  | \")\"\n  | \"AND\"\n  | \"OR\"\n  | \"NOT\"\n  | \"<\"\n  | \"<>\"\n  | \">\"\n  | \"=\"\n  | \"<=\"\n  | \">=\"\n  | \"\\n\"\n  | VarId;\n\nexport const getCustomTokens = (t: string): [CustomToken, number][] => {\n  const l: [CustomToken, number][] = [];\n  let i = -1;\n  let omit = 0;\n  let signal = \"\";\n  const addSignal = () => {\n    if (signal.length !== 0) {\n      l.push([new VarId(signal), i - signal.length]);\n      signal = \"\";\n    }\n  };\n  const add = (v: CustomToken) => {\n    addSignal();\n    l.push([v, i]);\n  };\n\n  for (const c of t) {\n    i++;\n    if (omit !== 0) {\n      omit--;\n      continue;\n    }\n    switch (c) {\n      case \" \":\n        addSignal();\n        break;\n      case \"\\n\":\n      case \")\":\n      case \"(\":\n      case \"<\":\n        if (t.substring(i, i + 2) === \"<>\") {\n          omit = 1;\n          add(\"<>\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \">\":\n        add(c);\n        break;\n      case \"=\":\n        const prevToken = l[l.length - 1];\n        const prev = prevToken[0];\n        const strPrev = prev instanceof VarId ? prev.text : prev;\n        if ([\"<\", \">\"].includes(strPrev) && prevToken[1] === i - 1) {\n          l[l.length - 1][0] = (prev + \"=\") as any;\n        } else {\n          add(c);\n        }\n        break;\n      case \"A\":\n        if (t.substring(i, i + 3) === \"AND\") {\n          omit = 2;\n          add(\"AND\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"O\":\n        if (t.substring(i, i + 2) === \"OR\") {\n          omit = 1;\n          add(\"OR\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"N\":\n        if (t.substring(i, i + 3) === \"NOT\") {\n          omit = 2;\n          add(\"NOT\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      default:\n        signal += c;\n        break;\n    }\n  }\n  if (signal.length !== 0) {\n    l.push([new VarId(signal), i - signal.length + 1]);\n  }\n  return l;\n};\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n  onChange?: (n: V) => void;\n  label?: string;\n\n  constructor(v: {\n    choices: C;\n    default: K;\n    onChange?: (n: V) => void;\n    label?: string;\n  }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    this.label = v.label;\n    this.onChange = v.onChange;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n    return (\n      <ChoiceField\n        value={model[name]}\n        setValue={(v) => {\n          model[name] = v as any;\n          if (this.onChange !== undefined) this.onChange(v as any);\n        }}\n        keys={keys}\n      />\n    );\n  });\n}\n\nexport const ChoiceField = <V extends string>({\n  keys,\n  value,\n  setValue,\n  maxButton,\n}: {\n  keys: V[];\n  value: V;\n  setValue: (v: V) => void;\n  maxButton?: number;\n}) => {\n  if (keys.length > (maxButton ?? 3)) {\n    return (\n      <Select\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value as any);\n        }}\n        autoWidth={true}\n        style={{ minHeight: \"35px\", marginBottom: \"3px\" }}\n        disabled={keys.length <= 1}\n      >\n        {keys.map((k) => {\n          return (\n            <MenuItem key={k} value={k}>\n              {k}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    );\n  } else {\n    return (\n      <ButtonsDiv>\n        <ButtonGroup\n          size=\"small\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n        >\n          {keys.map((k) => {\n            const buttonStyle =\n              k === value ? { background: \"#3f51b5\", color: \"white\" } : {};\n\n            return (\n              <Button\n                key={k}\n                onClick={() => {\n                  setValue(k);\n                }}\n                style={buttonStyle}\n              >\n                {k}\n              </Button>\n            );\n          })}\n        </ButtonGroup>\n      </ButtonsDiv>\n    );\n  }\n};\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n  multiline: boolean;\n\n  constructor(v: {\n    default: string;\n    maxLength?: number;\n    minLength?: number;\n    multiline?: boolean;\n  }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.multiline = v.multiline ?? false;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    const onChange = (\n      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n      let value = e.target.value;\n      setValue(value as any);\n\n      if (this.maxLength !== undefined && value.length > this.maxLength) {\n        errors.set(name, \"Max length exceded.\");\n      } else if (\n        this.minLength !== undefined &&\n        value.length < this.minLength\n      ) {\n        errors.set(name, \"Min length exceded.\");\n      } else {\n        errors.delete(name);\n        model[name] = value as any;\n      }\n    };\n\n    if (this.multiline) {\n      return (\n        <textarea\n          key={name}\n          className=\"multiline-input\"\n          value={value}\n          onChange={onChange}\n        ></textarea>\n      );\n    } else {\n      return (\n        <TextField\n          key={name}\n          value={value}\n          fullWidth={true}\n          margin=\"dense\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n          error={errors.get(name) !== undefined}\n          style={{ width: \"140px\" }}\n          onChange={onChange}\n        />\n      );\n    }\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n  label?: string;\n\n  constructor(v: { default: boolean; required?: boolean; label?: string }) {\n    this.label = v.label;\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","import { VarId } from \"./custom_parser\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { EnclosingStep, MacroStep, SimpleStep, StepType } from \"./step\";\nimport { Transition } from \"./transition\";\nimport { Signal } from \"./signal\";\n\nexport class H {\n  static textOrEmpty = (cond: boolean, text: string) => (cond ? text : \"\");\n}\n\nexport const memoryTransitionSuffix = (t: Transition): string => {\n  return `_${t.from.name}_${t.priority}_MEM`;\n};\n\nconst templateCondition = (t: Transition): string => {\n  return t.expressionTokens\n    .map(([tok, _]) => {\n      // Is signal\n      if (tok instanceof VarId) {\n        const withMemory =\n          t.savedSignalsWithMemory.get(tok.text)?.withMemory ?? false;\n\n        return withMemory\n          ? tok.text + memoryTransitionSuffix(t)\n          : isNaN(Number.parseFloat(tok.text))\n          ? \"GVL.\" + tok.text\n          : tok.text;\n      } else if (t.connection.graph.globalData.generatingXML) {\n        switch (tok) {\n          case \"<\":\n            return \"&lt;\";\n          case \">\":\n            return \"&gt;\";\n          case \"<=\":\n            return \"&lt;=\";\n          case \">=\":\n            return \"&gt;=\";\n          case \"<>\":\n            return \"&lt;&gt;\";\n          default:\n            return tok;\n        }\n      } else {\n        return tok;\n      }\n    })\n    .join(\" \");\n};\n\nconst templateTransitions = (\n  transitions: Transition[],\n  { isNested }: { isNested: boolean }\n) => {\n  return `\\\n${transitions\n  .map((t, index) => {\n    return `\n${index === 0 ? \"IF\" : \"ELSIF\"} ${templateCondition(t)} THEN\n  State:=${t.to.id};\\\n  ${isNested ? \"\\n  Entry:=TRUE;\" : \"\"}`;\n  })\n  .join(\"\\n\")}\\\n${transitions.length === 0 ? \"\" : \"\\nEND_IF\"}`;\n};\n\nconst templateGemmaGrafcetSimpleStep = (model: SimpleStep): string => {\n  return templateTransitions(model.transitions, { isNested: false });\n};\n\nconst templateFBEntry = (model: MacroStep | EnclosingStep): string => `\\\nIF Entry THEN\n  ${model.name}(Initialization:=ENTRY);\n  Entry:=FALSE;\n${model.transitions\n  .flatMap((t) =>\n    t.signalsWithMemory.map(\n      (sm) =>\n        `  ${sm.value}${memoryTransitionSuffix(t)} := ${\n          sm.behaviour === \"NO\" ? \"FALSE\" : \"TRUE\"\n        };`\n    )\n  )\n  .join(\"\\n\")}\nEND_IF\n${model.name}(Initialization:=ENTRY);`;\n\nconst templateGemmaGrafcetNestedStep = (\n  model: MacroStep | EnclosingStep\n): string => {\n  const transitions = model.transitions;\n  const _evaluateComplete = (t: Transition, index: number): boolean => {\n    const _isInner = transitions.length - model.innerTransitionsLength <= index;\n    switch (model.type) {\n      case StepType.MACRO:\n        return _isInner && !t.isNegated;\n      case StepType.ENCLOSING:\n        return _isInner && t.isNegated;\n    }\n    throw new Error(\"\");\n  };\n\n  return `\n${templateFBEntry(model)}\n\n${transitions\n  .map((t, index) => {\n    let condition = templateCondition(t);\n    if (_evaluateComplete(t, index)) {\n      if (condition.trim().length === 0) {\n        condition = `${model.name}.Complete`;\n      } else {\n        condition = `(${condition}) AND ${model.name}.Complete`;\n      }\n    }\n    return `\\\n${index === 0 ? \"IF\" : \"ELSIF\"} ${condition} THEN\n  State:=${t.to.id};\n  Entry:=TRUE;\n`;\n  })\n  .join(\"\\n\")}\\\n${H.textOrEmpty(transitions.length !== 0, \"\\nEND_IF\")}`;\n};\n\nexport const templateGlobals = (signals: Array<Signal>): string => {\n  return `\\\nVAR_GLOBAL\n    ${signals\n      .map((s) => {\n        const defaultValue =\n          s.defaultValue.trim().length === 0 ? \"\" : \" :=\" + s.defaultValue;\n        return `${s.name} : ${s.type.toUpperCase()}${defaultValue};`;\n      })\n      .join(\"\\n    \")}\nEND_VAR\n`;\n};\n\nconst gemmaVariables = (model: GemmaGrafcet): string => {\n  return `\\\n// Variable declaration\nVAR\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .map((s) => `  ${s.name}:${s.name}_FB;`)\n  .join(\"\\n\")}\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .flatMap((s) => s.transitions)\n  .flatMap((t) =>\n    t.signalsWithMemory.map((sm) => {\n      const assign = sm.behaviour === \"NO\" ? \"FALSE\" : \"TRUE\";\n      return `  ${sm.value}${memoryTransitionSuffix(t)}:BOOL:=${assign};`;\n    })\n  )\n  .join(\"    \\n\")}\n\n  State:UINT:=${model.initialStep?.id};\n  Entry:BOOL:=TRUE;\nEND_VAR    \n`;\n};\n\nexport const templateGemmaGrafcet = (model: GemmaGrafcet): string => {\n  return `\n${gemmaVariables(model)}\n${gemmaBehaviour(model)}\n`;\n};\n\nexport const gemmaBehaviour = (model: GemmaGrafcet): string => {\n  return `\n// Program behavior\nCASE State OF\n  ${model.steps\n    .map((step) => {\n      return `\n  ${step.id}: //State ${step.name}\n    ${(() => {\n      switch (step.type) {\n        case StepType.SIMPLE:\n          return templateGemmaGrafcetSimpleStep(step);\n        case StepType.ENCLOSING:\n        case StepType.MACRO:\n          return templateGemmaGrafcetNestedStep(step);\n        default:\n          throw new Error(\"\");\n      }\n    })().replace(/\\n/g, \"\\n    \")}\n  `;\n    })\n    .join(\"\\n\")}\nEND_CASE\n\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .flatMap((s) => s.transitions)\n  .flatMap((t) =>\n    t.signalsWithMemory.map((sm) => {\n      const prefix = sm.behaviour === \"NC\" ? \"NOT \" : \"\";\n      const assign = sm.behaviour === \"NO\" ? \"TRUE\" : \"FALSE\";\n      return `\\\nIF State = ${t.from.id} AND ${prefix}GVL.${sm.value} THEN\n  ${sm.value}${memoryTransitionSuffix(t)} := ${assign};\nEND_IF\n`;\n    })\n  )\n  .join(\"\\n\")}\n`;\n};\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class SimpleBooleanLexer extends Lexer {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly DIF = 9;\n\tpublic static readonly LE = 10;\n\tpublic static readonly EQ = 11;\n\tpublic static readonly LPAREN = 12;\n\tpublic static readonly RPAREN = 13;\n\tpublic static readonly DECIMAL = 14;\n\tpublic static readonly IDENTIFIER = 15;\n\tpublic static readonly WS = 16;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"DIF\", \"LE\", \"EQ\", \n\t\t\"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<>'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"DIF\", \n\t\t\"LE\", \"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanLexer._LITERAL_NAMES, SimpleBooleanLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(SimpleBooleanLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return SimpleBooleanLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return SimpleBooleanLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x12j\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x03\\x02\\x03\\x02\" +\n\t\t\"\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\" +\n\t\t\"\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\" +\n\t\t\"\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\" +\n\t\t\"\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\" +\n\t\t\"\\x0F\\x05\\x0FN\\n\\x0F\\x03\\x0F\\x06\\x0FQ\\n\\x0F\\r\\x0F\\x0E\\x0FR\\x03\\x0F\\x03\" +\n\t\t\"\\x0F\\x06\\x0FW\\n\\x0F\\r\\x0F\\x0E\\x0FX\\x05\\x0F[\\n\\x0F\\x03\\x10\\x03\\x10\\x07\" +\n\t\t\"\\x10_\\n\\x10\\f\\x10\\x0E\\x10b\\v\\x10\\x03\\x11\\x06\\x11e\\n\\x11\\r\\x11\\x0E\\x11\" +\n\t\t\"f\\x03\\x11\\x03\\x11\\x02\\x02\\x02\\x12\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\\x05\" +\n\t\t\"\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\" +\n\t\t\"\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!\\x02\\x12\\x03\\x02\" +\n\t\t\"\\x06\\x03\\x022;\\x05\\x02C\\\\aac|\\x06\\x022;C\\\\aac|\\x05\\x02\\v\\f\\x0E\\x0F\\\"\\\"\" +\n\t\t\"\\x02o\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\\x02\\r\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02!\\x03\\x02\\x02\\x02\\x03#\\x03\\x02\\x02\\x02\\x05\\'\\x03\\x02\\x02\\x02\\x07\" +\n\t\t\"*\\x03\\x02\\x02\\x02\\t.\\x03\\x02\\x02\\x02\\v3\\x03\\x02\\x02\\x02\\r9\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x0F;\\x03\\x02\\x02\\x02\\x11>\\x03\\x02\\x02\\x02\\x13@\\x03\\x02\\x02\\x02\\x15\" +\n\t\t\"C\\x03\\x02\\x02\\x02\\x17F\\x03\\x02\\x02\\x02\\x19H\\x03\\x02\\x02\\x02\\x1BJ\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x1DM\\x03\\x02\\x02\\x02\\x1F\\\\\\x03\\x02\\x02\\x02!d\\x03\\x02\\x02\\x02\" +\n\t\t\"#$\\x07C\\x02\\x02$%\\x07P\\x02\\x02%&\\x07F\\x02\\x02&\\x04\\x03\\x02\\x02\\x02\\'(\" +\n\t\t\"\\x07Q\\x02\\x02()\\x07T\\x02\\x02)\\x06\\x03\\x02\\x02\\x02*+\\x07P\\x02\\x02+,\\x07\" +\n\t\t\"Q\\x02\\x02,-\\x07V\\x02\\x02-\\b\\x03\\x02\\x02\\x02./\\x07V\\x02\\x02/0\\x07T\\x02\" +\n\t\t\"\\x0201\\x07W\\x02\\x0212\\x07G\\x02\\x022\\n\\x03\\x02\\x02\\x0234\\x07H\\x02\\x024\" +\n\t\t\"5\\x07C\\x02\\x0256\\x07N\\x02\\x0267\\x07U\\x02\\x0278\\x07G\\x02\\x028\\f\\x03\\x02\" +\n\t\t\"\\x02\\x029:\\x07@\\x02\\x02:\\x0E\\x03\\x02\\x02\\x02;<\\x07@\\x02\\x02<=\\x07?\\x02\" +\n\t\t\"\\x02=\\x10\\x03\\x02\\x02\\x02>?\\x07>\\x02\\x02?\\x12\\x03\\x02\\x02\\x02@A\\x07>\\x02\" +\n\t\t\"\\x02AB\\x07@\\x02\\x02B\\x14\\x03\\x02\\x02\\x02CD\\x07>\\x02\\x02DE\\x07?\\x02\\x02\" +\n\t\t\"E\\x16\\x03\\x02\\x02\\x02FG\\x07?\\x02\\x02G\\x18\\x03\\x02\\x02\\x02HI\\x07*\\x02\\x02\" +\n\t\t\"I\\x1A\\x03\\x02\\x02\\x02JK\\x07+\\x02\\x02K\\x1C\\x03\\x02\\x02\\x02LN\\x07/\\x02\\x02\" +\n\t\t\"ML\\x03\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02NP\\x03\\x02\\x02\\x02OQ\\t\\x02\\x02\\x02\" +\n\t\t\"PO\\x03\\x02\\x02\\x02QR\\x03\\x02\\x02\\x02RP\\x03\\x02\\x02\\x02RS\\x03\\x02\\x02\\x02\" +\n\t\t\"SZ\\x03\\x02\\x02\\x02TV\\x070\\x02\\x02UW\\t\\x02\\x02\\x02VU\\x03\\x02\\x02\\x02WX\" +\n\t\t\"\\x03\\x02\\x02\\x02XV\\x03\\x02\\x02\\x02XY\\x03\\x02\\x02\\x02Y[\\x03\\x02\\x02\\x02\" +\n\t\t\"ZT\\x03\\x02\\x02\\x02Z[\\x03\\x02\\x02\\x02[\\x1E\\x03\\x02\\x02\\x02\\\\`\\t\\x03\\x02\" +\n\t\t\"\\x02]_\\t\\x04\\x02\\x02^]\\x03\\x02\\x02\\x02_b\\x03\\x02\\x02\\x02`^\\x03\\x02\\x02\" +\n\t\t\"\\x02`a\\x03\\x02\\x02\\x02a \\x03\\x02\\x02\\x02b`\\x03\\x02\\x02\\x02ce\\t\\x05\\x02\" +\n\t\t\"\\x02dc\\x03\\x02\\x02\\x02ef\\x03\\x02\\x02\\x02fd\\x03\\x02\\x02\\x02fg\\x03\\x02\\x02\" +\n\t\t\"\\x02gh\\x03\\x02\\x02\\x02hi\\b\\x11\\x02\\x02i\\\"\\x03\\x02\\x02\\x02\\t\\x02MRXZ`f\" +\n\t\t\"\\x03\\b\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanLexer.__ATN) {\n\t\t\tSimpleBooleanLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanLexer._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanLexer.__ATN;\n\t}\n\n}\n\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { SimpleBooleanListener } from \"./SimpleBooleanListener\";\nimport { SimpleBooleanVisitor } from \"./SimpleBooleanVisitor\";\n\nexport class SimpleBooleanParser extends Parser {\n  public static readonly AND = 1;\n  public static readonly OR = 2;\n  public static readonly NOT = 3;\n  public static readonly TRUE = 4;\n  public static readonly FALSE = 5;\n  public static readonly GT = 6;\n  public static readonly GE = 7;\n  public static readonly LT = 8;\n  public static readonly DIF = 9;\n  public static readonly LE = 10;\n  public static readonly EQ = 11;\n  public static readonly LPAREN = 12;\n  public static readonly RPAREN = 13;\n  public static readonly DECIMAL = 14;\n  public static readonly IDENTIFIER = 15;\n  public static readonly WS = 16;\n  public static readonly RULE_parse = 0;\n  public static readonly RULE_expression = 1;\n  public static readonly RULE_expressionAnd = 2;\n  public static readonly RULE_expressionSimple = 3;\n  public static readonly RULE_numExpression = 4;\n  public static readonly RULE_comparator = 5;\n  // tslint:disable:no-trailing-whitespace\n  public static readonly ruleNames: string[] = [\n    \"parse\",\n    \"expression\",\n    \"expressionAnd\",\n    \"expressionSimple\",\n    \"numExpression\",\n    \"comparator\",\n  ];\n\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\n    undefined,\n    \"'AND'\",\n    \"'OR'\",\n    \"'NOT'\",\n    \"'TRUE'\",\n    \"'FALSE'\",\n    \"'>'\",\n    \"'>='\",\n    \"'<'\",\n    \"'<>'\",\n    \"'<='\",\n    \"'='\",\n    \"'('\",\n    \"')'\",\n  ];\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n    undefined,\n    \"AND\",\n    \"OR\",\n    \"NOT\",\n    \"TRUE\",\n    \"FALSE\",\n    \"GT\",\n    \"GE\",\n    \"LT\",\n    \"DIF\",\n    \"LE\",\n    \"EQ\",\n    \"LPAREN\",\n    \"RPAREN\",\n    \"DECIMAL\",\n    \"IDENTIFIER\",\n    \"WS\",\n  ];\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\n    SimpleBooleanParser._LITERAL_NAMES,\n    SimpleBooleanParser._SYMBOLIC_NAMES,\n    []\n  );\n\n  // @Override\n  // @NotNull\n  public get vocabulary(): Vocabulary {\n    return SimpleBooleanParser.VOCABULARY;\n  }\n  // tslint:enable:no-trailing-whitespace\n\n  // @Override\n  public get grammarFileName(): string {\n    return \"SimpleBoolean.g4\";\n  }\n\n  // @Override\n  public get ruleNames(): string[] {\n    return SimpleBooleanParser.ruleNames;\n  }\n\n  // @Override\n  public get serializedATN(): string {\n    return SimpleBooleanParser._serializedATN;\n  }\n\n  constructor(input: TokenStream) {\n    super(input);\n    this._interp = new ParserATNSimulator(SimpleBooleanParser._ATN, this);\n  }\n  // @RuleVersion(0)\n  public parse(): ParseContext {\n    let _localctx: ParseContext = new ParseContext(this._ctx, this.state);\n    this.enterRule(_localctx, 0, SimpleBooleanParser.RULE_parse);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 12;\n        this.expression();\n        this.state = 13;\n        this.match(SimpleBooleanParser.EOF);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public expression(): ExpressionContext {\n    let _localctx: ExpressionContext = new ExpressionContext(\n      this._ctx,\n      this.state\n    );\n    this.enterRule(_localctx, 2, SimpleBooleanParser.RULE_expression);\n    try {\n      this.state = 20;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {\n        case 1:\n          _localctx = new OrExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 15;\n            (_localctx as OrExpressionContext)._left = this.expressionAnd();\n            this.state = 16;\n            this.match(SimpleBooleanParser.OR);\n            this.state = 17;\n            (_localctx as OrExpressionContext)._right = this.expression();\n          }\n          break;\n\n        case 2:\n          _localctx = new AndParentExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 19;\n            this.expressionAnd();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public expressionAnd(): ExpressionAndContext {\n    let _localctx: ExpressionAndContext = new ExpressionAndContext(\n      this._ctx,\n      this.state\n    );\n    this.enterRule(_localctx, 4, SimpleBooleanParser.RULE_expressionAnd);\n    try {\n      this.state = 27;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 1, this._ctx)) {\n        case 1:\n          _localctx = new AndExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 22;\n            (_localctx as AndExpressionContext)._left = this.expressionSimple();\n            this.state = 23;\n            this.match(SimpleBooleanParser.AND);\n            this.state = 24;\n            (_localctx as AndExpressionContext)._right = this.expressionAnd();\n          }\n          break;\n\n        case 2:\n          _localctx = new SimpleExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 26;\n            this.expressionSimple();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public expressionSimple(): ExpressionSimpleContext {\n    let _localctx: ExpressionSimpleContext = new ExpressionSimpleContext(\n      this._ctx,\n      this.state\n    );\n    this.enterRule(_localctx, 6, SimpleBooleanParser.RULE_expressionSimple);\n    try {\n      this.state = 40;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {\n        case 1:\n          _localctx = new NotExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 29;\n            this.match(SimpleBooleanParser.NOT);\n            this.state = 30;\n            this.expression();\n          }\n          break;\n\n        case 2:\n          _localctx = new ComparatorExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 31;\n            (_localctx as ComparatorExpressionContext)._left = this.numExpression();\n            this.state = 32;\n            (_localctx as ComparatorExpressionContext)._op = this.comparator();\n            this.state = 33;\n            (_localctx as ComparatorExpressionContext)._right = this.numExpression();\n          }\n          break;\n\n        case 3:\n          _localctx = new IdentifierExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 35;\n            this.match(SimpleBooleanParser.IDENTIFIER);\n          }\n          break;\n\n        case 4:\n          _localctx = new ParenExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 36;\n            this.match(SimpleBooleanParser.LPAREN);\n            this.state = 37;\n            this.expression();\n            this.state = 38;\n            this.match(SimpleBooleanParser.RPAREN);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public numExpression(): NumExpressionContext {\n    let _localctx: NumExpressionContext = new NumExpressionContext(\n      this._ctx,\n      this.state\n    );\n    this.enterRule(_localctx, 8, SimpleBooleanParser.RULE_numExpression);\n    try {\n      this.state = 44;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case SimpleBooleanParser.IDENTIFIER:\n          _localctx = new IdentifierNumExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 42;\n            this.match(SimpleBooleanParser.IDENTIFIER);\n          }\n          break;\n        case SimpleBooleanParser.DECIMAL:\n          _localctx = new DecimalExpressionContext(_localctx);\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 43;\n            this.match(SimpleBooleanParser.DECIMAL);\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public comparator(): ComparatorContext {\n    let _localctx: ComparatorContext = new ComparatorContext(\n      this._ctx,\n      this.state\n    );\n    this.enterRule(_localctx, 10, SimpleBooleanParser.RULE_comparator);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 46;\n        _la = this._input.LA(1);\n        if (\n          !(\n            (_la & ~0x1f) === 0 &&\n            ((1 << _la) &\n              ((1 << SimpleBooleanParser.GT) |\n                (1 << SimpleBooleanParser.GE) |\n                (1 << SimpleBooleanParser.LT) |\n                (1 << SimpleBooleanParser.DIF) |\n                (1 << SimpleBooleanParser.LE) |\n                (1 << SimpleBooleanParser.EQ))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n\n  public static readonly _serializedATN: string =\n    \"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x123\\x04\\x02\" +\n    \"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n    \"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n    \"\\x05\\x03\\x17\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x04\\x1E\" +\n    \"\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\" +\n    \"\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05+\\n\\x05\\x03\\x06\\x03\\x06\\x05\\x06/\\n\\x06\" +\n    \"\\x03\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x02\\b\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\" +\n    \"\\x02\\f\\x02\\x02\\x03\\x03\\x02\\b\\r\\x022\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x16\\x03\" +\n    \"\\x02\\x02\\x02\\x06\\x1D\\x03\\x02\\x02\\x02\\b*\\x03\\x02\\x02\\x02\\n.\\x03\\x02\\x02\" +\n    \"\\x02\\f0\\x03\\x02\\x02\\x02\\x0E\\x0F\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\" +\n    \"\\x10\\x03\\x03\\x02\\x02\\x02\\x11\\x12\\x05\\x06\\x04\\x02\\x12\\x13\\x07\\x04\\x02\\x02\" +\n    \"\\x13\\x14\\x05\\x04\\x03\\x02\\x14\\x17\\x03\\x02\\x02\\x02\\x15\\x17\\x05\\x06\\x04\\x02\" +\n    \"\\x16\\x11\\x03\\x02\\x02\\x02\\x16\\x15\\x03\\x02\\x02\\x02\\x17\\x05\\x03\\x02\\x02\\x02\" +\n    \"\\x18\\x19\\x05\\b\\x05\\x02\\x19\\x1A\\x07\\x03\\x02\\x02\\x1A\\x1B\\x05\\x06\\x04\\x02\" +\n    \"\\x1B\\x1E\\x03\\x02\\x02\\x02\\x1C\\x1E\\x05\\b\\x05\\x02\\x1D\\x18\\x03\\x02\\x02\\x02\" +\n    \"\\x1D\\x1C\\x03\\x02\\x02\\x02\\x1E\\x07\\x03\\x02\\x02\\x02\\x1F \\x07\\x05\\x02\\x02\" +\n    ' +\\x05\\x04\\x03\\x02!\"\\x05\\n\\x06\\x02\"#\\x05\\f\\x07\\x02#$\\x05\\n\\x06\\x02$' +\n    \"+\\x03\\x02\\x02\\x02%+\\x07\\x11\\x02\\x02&'\\x07\\x0E\\x02\\x02'(\\x05\\x04\\x03\" +\n    \"\\x02()\\x07\\x0F\\x02\\x02)+\\x03\\x02\\x02\\x02*\\x1F\\x03\\x02\\x02\\x02*!\\x03\\x02\" +\n    \"\\x02\\x02*%\\x03\\x02\\x02\\x02*&\\x03\\x02\\x02\\x02+\\t\\x03\\x02\\x02\\x02,/\\x07\" +\n    \"\\x11\\x02\\x02-/\\x07\\x10\\x02\\x02.,\\x03\\x02\\x02\\x02.-\\x03\\x02\\x02\\x02/\\v\" +\n    \"\\x03\\x02\\x02\\x0201\\t\\x02\\x02\\x021\\r\\x03\\x02\\x02\\x02\\x06\\x16\\x1D*.\";\n  public static __ATN: ATN;\n  public static get _ATN(): ATN {\n    if (!SimpleBooleanParser.__ATN) {\n      SimpleBooleanParser.__ATN = new ATNDeserializer().deserialize(\n        Utils.toCharArray(SimpleBooleanParser._serializedATN)\n      );\n    }\n\n    return SimpleBooleanParser.__ATN;\n  }\n}\n\nexport class ParseContext extends ParserRuleContext {\n  public expression(): ExpressionContext {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  public EOF(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.EOF, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_parse;\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterParse) {\n      listener.enterParse(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitParse) {\n      listener.exitParse(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitParse) {\n      return visitor.visitParse(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ExpressionContext extends ParserRuleContext {\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_expression;\n  }\n  public copyFrom(ctx: ExpressionContext): void {\n    super.copyFrom(ctx);\n  }\n}\nexport class OrExpressionContext extends ExpressionContext {\n  public _left: ExpressionAndContext;\n  public _right: ExpressionContext;\n  public OR(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.OR, 0);\n  }\n  public expressionAnd(): ExpressionAndContext {\n    return this.getRuleContext(0, ExpressionAndContext);\n  }\n  public expression(): ExpressionContext {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(ctx: ExpressionContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterOrExpression) {\n      listener.enterOrExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitOrExpression) {\n      listener.exitOrExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitOrExpression) {\n      return visitor.visitOrExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class AndParentExpressionContext extends ExpressionContext {\n  public expressionAnd(): ExpressionAndContext {\n    return this.getRuleContext(0, ExpressionAndContext);\n  }\n  constructor(ctx: ExpressionContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterAndParentExpression) {\n      listener.enterAndParentExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitAndParentExpression) {\n      listener.exitAndParentExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitAndParentExpression) {\n      return visitor.visitAndParentExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ExpressionAndContext extends ParserRuleContext {\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_expressionAnd;\n  }\n  public copyFrom(ctx: ExpressionAndContext): void {\n    super.copyFrom(ctx);\n  }\n}\nexport class AndExpressionContext extends ExpressionAndContext {\n  public _left: ExpressionSimpleContext;\n  public _right: ExpressionAndContext;\n  public AND(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.AND, 0);\n  }\n  public expressionSimple(): ExpressionSimpleContext {\n    return this.getRuleContext(0, ExpressionSimpleContext);\n  }\n  public expressionAnd(): ExpressionAndContext {\n    return this.getRuleContext(0, ExpressionAndContext);\n  }\n  constructor(ctx: ExpressionAndContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterAndExpression) {\n      listener.enterAndExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitAndExpression) {\n      listener.exitAndExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitAndExpression) {\n      return visitor.visitAndExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class SimpleExpressionContext extends ExpressionAndContext {\n  public expressionSimple(): ExpressionSimpleContext {\n    return this.getRuleContext(0, ExpressionSimpleContext);\n  }\n  constructor(ctx: ExpressionAndContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterSimpleExpression) {\n      listener.enterSimpleExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitSimpleExpression) {\n      listener.exitSimpleExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitSimpleExpression) {\n      return visitor.visitSimpleExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ExpressionSimpleContext extends ParserRuleContext {\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_expressionSimple;\n  }\n  public copyFrom(ctx: ExpressionSimpleContext): void {\n    super.copyFrom(ctx);\n  }\n}\nexport class NotExpressionContext extends ExpressionSimpleContext {\n  public NOT(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.NOT, 0);\n  }\n  public expression(): ExpressionContext {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(ctx: ExpressionSimpleContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterNotExpression) {\n      listener.enterNotExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitNotExpression) {\n      listener.exitNotExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitNotExpression) {\n      return visitor.visitNotExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class ComparatorExpressionContext extends ExpressionSimpleContext {\n  public _left: NumExpressionContext;\n  public _op: ComparatorContext;\n  public _right: NumExpressionContext;\n  public numExpression(): NumExpressionContext[];\n  public numExpression(i: number): NumExpressionContext;\n  public numExpression(\n    i?: number\n  ): NumExpressionContext | NumExpressionContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(NumExpressionContext);\n    } else {\n      return this.getRuleContext(i, NumExpressionContext);\n    }\n  }\n  public comparator(): ComparatorContext {\n    return this.getRuleContext(0, ComparatorContext);\n  }\n  constructor(ctx: ExpressionSimpleContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterComparatorExpression) {\n      listener.enterComparatorExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitComparatorExpression) {\n      listener.exitComparatorExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitComparatorExpression) {\n      return visitor.visitComparatorExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class IdentifierExpressionContext extends ExpressionSimpleContext {\n  public IDENTIFIER(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.IDENTIFIER, 0);\n  }\n  constructor(ctx: ExpressionSimpleContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterIdentifierExpression) {\n      listener.enterIdentifierExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitIdentifierExpression) {\n      listener.exitIdentifierExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitIdentifierExpression) {\n      return visitor.visitIdentifierExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class ParenExpressionContext extends ExpressionSimpleContext {\n  public LPAREN(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.LPAREN, 0);\n  }\n  public expression(): ExpressionContext {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  public RPAREN(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.RPAREN, 0);\n  }\n  constructor(ctx: ExpressionSimpleContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterParenExpression) {\n      listener.enterParenExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitParenExpression) {\n      listener.exitParenExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitParenExpression) {\n      return visitor.visitParenExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class NumExpressionContext extends ParserRuleContext {\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_numExpression;\n  }\n  public copyFrom(ctx: NumExpressionContext): void {\n    super.copyFrom(ctx);\n  }\n}\nexport class IdentifierNumExpressionContext extends NumExpressionContext {\n  public IDENTIFIER(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.IDENTIFIER, 0);\n  }\n  constructor(ctx: NumExpressionContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterIdentifierNumExpression) {\n      listener.enterIdentifierNumExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitIdentifierNumExpression) {\n      listener.exitIdentifierNumExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitIdentifierNumExpression) {\n      return visitor.visitIdentifierNumExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\nexport class DecimalExpressionContext extends NumExpressionContext {\n  public DECIMAL(): TerminalNode {\n    return this.getToken(SimpleBooleanParser.DECIMAL, 0);\n  }\n  constructor(ctx: NumExpressionContext) {\n    super(ctx.parent, ctx.invokingState);\n    this.copyFrom(ctx);\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterDecimalExpression) {\n      listener.enterDecimalExpression(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitDecimalExpression) {\n      listener.exitDecimalExpression(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitDecimalExpression) {\n      return visitor.visitDecimalExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ComparatorContext extends ParserRuleContext {\n  public DIF(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.DIF, 0);\n  }\n  public GT(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.GT, 0);\n  }\n  public GE(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.GE, 0);\n  }\n  public LT(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.LT, 0);\n  }\n  public LE(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.LE, 0);\n  }\n  public EQ(): TerminalNode | undefined {\n    return this.tryGetToken(SimpleBooleanParser.EQ, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return SimpleBooleanParser.RULE_comparator;\n  }\n  // @Override\n  public enterRule(listener: SimpleBooleanListener): void {\n    if (listener.enterComparator) {\n      listener.enterComparator(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: SimpleBooleanListener): void {\n    if (listener.exitComparator) {\n      listener.exitComparator(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n    if (visitor.visitComparator) {\n      return visitor.visitComparator(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n","import { JsonType } from \"../canvas/store\";\nimport { action, computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"./gemma-styles.css\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { GemmaGrafcet } from \"./gemma\";\n\nenum SignalTypeBase {\n  bool = \"bool\",\n  int = \"int\",\n  uint = \"uint\",\n  real = \"real\",\n}\n\nexport enum SignalType {\n  bool = \"bool\",\n\n  sint = \"sint\",\n  int = \"int\",\n  lint = \"lint\",\n  dint = \"dint\",\n\n  usint = \"usint\",\n  uint = \"uint\",\n  ulint = \"ulint\",\n  udint = \"udint\",\n\n  real = \"real\",\n  lreal = \"lreal\",\n}\n\nenum SignalTypeSize {\n  s = \"s\",\n  i = \"i\",\n  l = \"l\",\n  d = \"d\",\n}\n\nconst signalTypeToPrimitives = (\n  type?: SignalType\n): { base: SignalTypeBase; size: SignalTypeSize } | undefined => {\n  if (type === undefined) {\n    return undefined;\n  }\n  switch (type) {\n    case SignalType.bool:\n      return { base: SignalTypeBase.bool, size: SignalTypeSize.i };\n    case SignalType.real:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.i };\n    case SignalType.lreal:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.l };\n  }\n  let base: SignalTypeBase;\n  let index: number;\n  if (type.startsWith(\"u\")) {\n    base = SignalTypeBase.uint;\n    index = 1;\n  } else {\n    base = SignalTypeBase.int;\n    index = 0;\n  }\n\n  const size = type.charAt(index) as SignalTypeSize;\n\n  if (!Object.keys(SignalTypeSize).includes(size)) {\n    return undefined;\n  }\n\n  return { base, size };\n};\n\nconst signalSizeMap: { [key in SignalTypeBase]: SignalTypeSize[] } = {\n  [SignalType.bool]: [SignalTypeSize.i],\n  [SignalType.int]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.uint]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.real]: [SignalTypeSize.i, SignalTypeSize.l],\n};\n\nexport const SignalRow = observer(\n  ({\n    signal: s,\n    showDelete,\n    removeSignal,\n  }: {\n    signal: Signal;\n    showDelete: boolean;\n    removeSignal: (s: Signal) => void;\n  }) => {\n    return (\n      <TableRow>\n        <TableCell>\n          <Tooltip\n            title={s.errors[\"Name\"] !== undefined ? s.errors[\"Name\"] : \"\"}\n          >\n            <TextField\n              type=\"text\"\n              value={s.name}\n              onChange={(e) => (s.name = e.target.value.replace(/\\s/g, \"\"))}\n              style={{ width: \"145px\" }}\n              error={s.errors[\"Name\"] !== undefined}\n            />\n          </Tooltip>\n        </TableCell>\n        <TableCell>\n          <ChoiceField\n            keys={Object.keys(SignalTypeBase)}\n            setValue={(v) => s.setTypeBase(v as any)}\n            value={s.typeBase}\n          />\n        </TableCell>\n        <TableCell>\n          <ChoiceField\n            keys={signalSizeMap[s.typeBase]}\n            setValue={(v) => (s.typeSize = v as any)}\n            value={s.typeSize}\n            maxButton={0}\n          />\n        </TableCell>\n        <TableCell>\n          <Tooltip\n            title={\n              s.errors[\"Default Value\"] !== undefined\n                ? s.errors[\"Default Value\"]\n                : \"\"\n            }\n          >\n            <TextField\n              type={s.typeBase === SignalTypeBase.bool ? \"text\" : \"number\"}\n              value={s.defaultValue}\n              onChange={(e) => {\n                s.defaultValue = e.target.value.replace(/\\s/g, \"\");\n              }}\n              style={{ width: \"70px\" }}\n              error={s.errors[\"Default Value\"] !== undefined}\n            />\n          </Tooltip>\n        </TableCell>\n        {showDelete && (\n          <TableCell align=\"center\">\n            <IconButton onClick={(_) => removeSignal(s)} size=\"small\">\n              <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n            </IconButton>\n          </TableCell>\n        )}\n      </TableRow>\n    );\n  }\n);\n\nconst regexSignalDefaultValid = {\n  [SignalTypeBase.bool]: {\n    regex: /^(TRUE|FALSE)$/,\n    message: 'should be \"TRUE\" or \"FALSE\"',\n  },\n  [SignalTypeBase.int]: {\n    regex: /^(-?[1-9][0-9]*|0)$/,\n    message: \"should be an integer\",\n  },\n  [SignalTypeBase.uint]: {\n    regex: /^([1-9][0-9]*|0)$/,\n    message: \"should be a positive integer\",\n  },\n  [SignalTypeBase.real]: {\n    regex: /^-?[0-9]*\\.?[0-9]+$/,\n    message: \"should be a number\",\n  },\n};\n\nexport class Signal {\n  @observable\n  didBlur: boolean = false;\n\n  @observable\n  name: string;\n  @observable\n  defaultValue: string;\n  @observable\n  typeSize: SignalTypeSize;\n  @observable\n  typeBase: SignalTypeBase;\n  @computed\n  get type(): SignalType {\n    if (this.typeBase === SignalTypeBase.bool) {\n      return SignalType.bool;\n    }\n    const sizeStr = this.typeSize === SignalTypeSize.i ? \"\" : this.typeSize!;\n    if (this.typeBase.startsWith(\"u\")) {\n      return (\"u\" + sizeStr + this.typeBase.substring(1)) as SignalType;\n    } else {\n      return (sizeStr + this.typeBase) as SignalType;\n    }\n  }\n\n  @action.bound\n  setTypeBase = (base: SignalTypeBase) => {\n    this.typeBase = base;\n    if (!signalSizeMap[base].includes(this.typeSize)) {\n      this.typeSize = signalSizeMap[base][0];\n    }\n  };\n\n  @computed\n  get errors() {\n    const name =\n      this.automationSystem.signals.findIndex(\n        (s2) => s2.name === this.name && this !== s2\n      ) !== -1\n        ? \"Duplicate name\"\n        : undefined;\n\n    const validator = regexSignalDefaultValid[this.typeBase];\n    const hasError =\n      this.defaultValue.length !== 0 &&\n      !validator.regex.test(this.defaultValue);\n    const defaultValueError = hasError ? validator.message : undefined;\n\n    return { Name: name, \"Default Value\": defaultValueError };\n  }\n\n  description?: string;\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      name: this.name,\n      type: this.type,\n      defaultValue: this.defaultValue,\n    };\n  }\n\n  static fromJson(\n    automationSystem: GemmaGrafcet,\n    json: JsonType\n  ): Signal | undefined {\n    if (\n      typeof json[\"name\"] === \"string\" &&\n      Object.keys(SignalType).includes(json[\"type\"] as any)\n    ) {\n      return new Signal(automationSystem, json);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(\n    private automationSystem: GemmaGrafcet,\n    d?: {\n      name?: string;\n      description?: string;\n      type?: SignalType;\n      defaultValue?: string;\n    }\n  ) {\n    this.name = d?.name ?? \"\";\n    this.description = d?.description;\n    const typePrim = signalTypeToPrimitives(d?.type);\n    this.typeBase = typePrim?.base ?? SignalTypeBase.bool;\n    this.typeSize = typePrim?.size ?? SignalTypeSize.i;\n    this.defaultValue = d?.defaultValue ?? \"\";\n  }\n}\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { SimpleBooleanLexer } from \"../grammar/SimpleBooleanLexer\";\nimport {\n  ExpressionContext,\n  IdentifierExpressionContext,\n  IdentifierNumExpressionContext,\n  SimpleBooleanParser,\n} from \"../grammar/SimpleBooleanParser\";\nimport { SimpleBooleanVisitor } from \"../grammar/SimpleBooleanVisitor\";\nimport { AbstractParseTreeVisitor } from \"antlr4ts/tree/AbstractParseTreeVisitor\";\nimport { ErrorNode } from \"antlr4ts/tree/ErrorNode\";\nimport { ParseTree } from \"antlr4ts/tree/ParseTree\";\n\n// Extend the AbstractParseTreeVisitor to get default visitor behaviour\nclass ErrorVisitor\n  extends AbstractParseTreeVisitor<string[]>\n  implements SimpleBooleanVisitor<string[]> {\n  isInvalid: boolean = false;\n  boolSignals: Array<IdentifierExpressionContext> = [];\n\n  constructor(public signals: { numSignals: string[]; boolSignals: string[] }) {\n    super();\n  }\n\n  defaultResult() {\n    return [];\n  }\n\n  aggregateResult(aggregate: string[], nextResult: string[]) {\n    return aggregate.concat(nextResult);\n  }\n\n  visitErrorNode(node: ErrorNode): string[] {\n    if (this.isInvalid) {\n      return [];\n    }\n    this.isInvalid = true;\n    return [\"Invalid boolean expression\"];\n  }\n\n  visitIdentifierExpression(n: IdentifierExpressionContext): string[] {\n    const valid = this.signals.boolSignals.includes(n.text);\n    this.boolSignals.push(n);\n    return valid ? [] : [`'${n.text}' is not a defined boolean signal`];\n  }\n\n  visitIdentifierNumExpression(n: IdentifierNumExpressionContext): string[] {\n    const valid = this.signals.numSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined numeric signal`];\n  }\n\n  visitExpression(n: ExpressionContext): string[] {\n    if (n.exception !== undefined && !this.isInvalid) {\n      this.isInvalid = true;\n      return [\"Invalid boolean expression\"];\n    }\n    return [];\n  }\n}\n\nexport type ParsedOutput = {\n  tree: ExpressionContext;\n  errors: string[];\n  boolSignals: Array<IdentifierExpressionContext>;\n};\n\nexport const parseBoolExpression = (\n  text: string,\n  signals: { numSignals: string[]; boolSignals: string[] }\n): ParsedOutput => {\n  // Create the lexer and parser\n  let inputStream = CharStreams.fromString(text);\n  let lexer = new SimpleBooleanLexer(inputStream);\n  let tokenStream = new CommonTokenStream(lexer);\n  let parser = new SimpleBooleanParser(tokenStream);\n\n  // Parse the input, where `compilationUnit` is whatever entry point you defined\n\n  let tree = parser.parse();\n\n  // Create the visitor\n  const countFunctionsVisitor = new ErrorVisitor(signals);\n  // Use the visitor entry point\n  const errors = countFunctionsVisitor.visit(tree);\n\n  if (tree.exception !== undefined) {\n    countFunctionsVisitor.isInvalid = true;\n    errors.push(\"Invalid boolean expression\");\n  }\n\n  let toProcess: ParseTree[] | undefined = [...tree.children];\n  if (toProcess !== undefined && !countFunctionsVisitor.isInvalid) {\n    while (toProcess.length !== 0) {\n      const curr: ParseTree | undefined = toProcess.pop()!;\n      if (curr instanceof ExpressionContext && curr.exception !== undefined) {\n        errors.push(\"Invalid boolean expression\");\n        break;\n      } else if (curr.childCount > 0) {\n        toProcess = toProcess.concat(\n          [...Array(curr.childCount).keys()].map((i) => curr.getChild(i))\n        );\n      }\n    }\n  }\n  return { tree, errors, boolSignals: countFunctionsVisitor.boolSignals };\n};\n","import { Checkbox } from \"@material-ui/core\";\nimport Switch from \"@material-ui/core/Switch\";\nimport {\n  action,\n  computed,\n  IKeyValueMap,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { JsonType } from \"../canvas/store\";\nimport { FieldSpec, StrFieldSpec } from \"../fields\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { ConnModel } from \"../node/node-model\";\nimport { PropertiesTable } from \"../properties/properties-table\";\nimport { parseBoolExpression, ParsedOutput } from \"./antlr_parser\";\nimport { CustomToken, getCustomTokens, VarId } from \"./custom_parser\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { SignalType } from \"./signal\";\nimport { Step, StepType } from \"./step\";\n\ntype GemmaConn = ConnModel<Step, GemmaGrafcet, Transition>;\n\nexport class Transition {\n  @observable\n  conditionExpression: string;\n  @observable\n  priority: number;\n  @observable\n  isNegated: boolean;\n  @observable\n  savedSignalsWithMemory: ObservableMap<\n    string,\n    { behaviour: \"NC\" | \"NO\"; withMemory: boolean }\n  >;\n\n  @computed\n  get priorityUi() {\n    return (\n      this.connection.from.data._transitions.findIndex((t) => t === this) + 1\n    );\n  }\n  @computed\n  get priorityChoices() {\n    return [...Array(this.connection.from.data._transitions.length)].map(\n      (_, i) => \"\" + (i + 1)\n    );\n  }\n\n  errors = observable.map<string, string>();\n\n  spec: { [key: string]: FieldSpec } = {\n    conditionExpression: new StrFieldSpec({ default: \"\" }),\n  };\n\n  constructor(\n    public connection: GemmaConn,\n    d?: {\n      conditionExpression?: string;\n      priority?: number;\n      isNegated?: boolean;\n      savedSignalsWithMemory?: IKeyValueMap<{\n        behaviour: \"NC\" | \"NO\";\n        withMemory: boolean;\n      }>;\n    }\n  ) {\n    this.conditionExpression = d?.conditionExpression ?? \"\";\n    this.priority = d?.priority ?? connection.from.outputs.length + 1;\n    this.isNegated = d?.isNegated ?? false;\n    this.savedSignalsWithMemory = new ObservableMap<\n      string,\n      { behaviour: \"NC\" | \"NO\"; withMemory: boolean }\n    >(d?.savedSignalsWithMemory);\n  }\n\n  @action.bound\n  setPriority = (v: string): void => {\n    const priority = parseInt(v);\n    if (this.connection.isHidden) {\n      return;\n    }\n\n    const transitions = this.connection.from.outputs;\n    const hiddenTransitions = transitions\n      .filter(\n        (t) => t.isHidden && t.data.priority <= this.priorityChoices.length\n      )\n      .sort((a, b) => a.data.priority - b.data.priority)\n      .map((t) => t.data);\n    if (hiddenTransitions.length > 0) {\n      let p = 1;\n      [...this.connection.from.data._transitions, ...hiddenTransitions].forEach(\n        (t, ind) => {\n          t.priority = p++;\n        }\n      );\n    }\n    if (this.priority > priority) {\n      transitions\n        .filter(\n          (t) => t.data.priority >= priority && t.data.priority < this.priority\n        )\n        .forEach((t) => t.data.priority++);\n    } else {\n      transitions\n        .filter(\n          (t) => t.data.priority <= priority && t.data.priority > this.priority\n        )\n        .forEach((t) => t.data.priority--);\n    }\n    this.priority = priority;\n  };\n\n  get from(): Step {\n    return this.connection.from.data;\n  }\n\n  get to(): Step {\n    return this.connection.to.data;\n  }\n\n  @computed\n  get connectionText(): { text: string; style?: React.CSSProperties }[] {\n    const cond = this.conditionExpression.substring(0, 20);\n    const hasNegation =\n      this.isNegated &&\n      (this.from.type === StepType.MACRO ||\n        this.from.type === StepType.ENCLOSING);\n    const showPriority =\n      hasNegation ||\n      (this.from.type !== StepType.CONTAINER &&\n        this.connection.from.data._transitions.length > 1);\n\n    return [\n      {\n        text: showPriority ? `${this.priorityUi}: ` : \"\",\n        style: { textDecoration: hasNegation ? \"overline\" : undefined },\n      },\n      { text: ` ${cond}${this.conditionExpression.length > 20 ? \"...\" : \"\"}` },\n    ];\n  }\n\n  @computed\n  get toJson(): JsonType {\n    const json: JsonType = {\n      conditionExpression: this.conditionExpression,\n      priority: this.priority,\n      isNegated: this.isNegated,\n    };\n    if (this.savedSignalsWithMemory.size > 0) {\n      const _jsonSignals: {\n        [key: string]: {\n          behaviour: \"NC\" | \"NO\";\n          withMemory: boolean;\n        };\n      } = {};\n      for (const [k, v] of this.savedSignalsWithMemory.entries()) {\n        _jsonSignals[k] = { ...v };\n      }\n      json[\"savedSignalsWithMemory\"] = _jsonSignals;\n    }\n    return json;\n  }\n\n  @computed\n  get expressionTokens(): [CustomToken, number][] {\n    return getCustomTokens(this.conditionExpression);\n  }\n\n  @computed\n  get parsedExpression(): ParsedOutput | undefined {\n    const gemma = this.connection.graph.globalData;\n    try {\n      const output = parseBoolExpression(this.conditionExpression, {\n        boolSignals: gemma.boolSignals.map((s) => s.name),\n        numSignals: gemma.numSignals.map((s) => s.name),\n      });\n      return output;\n    } catch (e) {}\n    return undefined;\n  }\n\n  @computed\n  get signalsInCondition(): Array<string> {\n    let _signals: string[];\n    if (this.parsedExpression !== undefined) {\n      _signals = this.parsedExpression.boolSignals.map((s) => s.text);\n    } else {\n      _signals = this.expressionTokens\n        .map(([token, _]) => token)\n        .filter((token) => token instanceof VarId)\n        .map((s) => s.toString());\n    }\n    return [\n      ..._signals\n        .filter((token) =>\n          this.from.automationSystem.signals.some(\n            (s) => s.type === SignalType.bool && s.name === token\n          )\n        )\n        .reduce((set, token) => {\n          set.add(token.toString());\n          return set;\n        }, new Set<string>())\n        .values(),\n    ];\n  }\n\n  @computed\n  get signalsWithMemory() {\n    return this.signalsInCondition\n      .filter((s) => this.savedSignalsWithMemory.get(s)?.withMemory ?? false)\n      .map((value) => ({\n        value,\n        behaviour: this.savedSignalsWithMemory.get(value)!.behaviour,\n      }));\n  }\n\n  ConnectionView = observer(() => {\n    return (\n      <>\n        <PropertiesTable key=\"table\">\n          <tr key=\"priority\">\n            <td>Priority</td>\n            <td>\n              <ChoiceField\n                keys={this.priorityChoices}\n                value={\"\" + this.priorityUi}\n                setValue={this.setPriority}\n              />\n            </td>\n          </tr>\n          <tr key=\"condition\">\n            <td>Condition</td>\n            <td>{<ConditionInput m={this} />}</td>\n          </tr>\n          {(this.from.type === StepType.MACRO ||\n            this.from.type === StepType.ENCLOSING) && (\n            <tr key=\"isNegated\">\n              <td>Negated</td>\n              <td>\n                {\n                  <Switch\n                    checked={this.isNegated}\n                    onChange={() => {\n                      this.isNegated = !this.isNegated;\n                    }}\n                    color=\"primary\"\n                  />\n                }\n              </td>\n            </tr>\n          )}\n        </PropertiesTable>\n        <div className=\"row\">\n          <div style={{ flex: 1 }}>\n            <h4 style={{ margin: \"0\" }}>Errors</h4>\n            {this.parsedExpression?.errors.length === 0 && \"No errors\"}\n            <ul\n              style={{\n                color: \"indianred\",\n                marginTop: \"0\",\n                paddingLeft: \"20px\",\n              }}\n              key=\"errors\"\n            >\n              {this.parsedExpression?.errors.map((err, index) => (\n                <li key={index}>{err}</li>\n              ))}\n            </ul>\n          </div>\n          {((this.from.type === StepType.MACRO && !this.isNegated) ||\n            (this.from.type === StepType.ENCLOSING && this.isNegated)) && (\n            <>\n              <div style={{ width: \"10px\" }} />\n              <div style={{ flex: 1 }}>\n                <h4 key=\"title\" style={{ margin: \"0\" }}>\n                  With Memory\n                </h4>\n                {this.signalsInCondition.length === 0 &&\n                  \"No signals in transition\"}\n                {this.signalsInCondition.map((token) => {\n                  return (\n                    <MemCheckbox\n                      key={token}\n                      token={token}\n                      map={this.savedSignalsWithMemory}\n                    />\n                  );\n                })}\n              </div>\n            </>\n          )}\n        </div>\n      </>\n    );\n  });\n}\n\nconst MemCheckbox = observer(\n  ({\n    map,\n    token,\n  }: {\n    map: ObservableMap<string, { behaviour: \"NC\" | \"NO\"; withMemory: boolean }>;\n    token: string;\n  }) => {\n    const _update = (value: {\n      behaviour: \"NC\" | \"NO\";\n      withMemory: boolean;\n    }) => {\n      if (!value.withMemory && value.behaviour === \"NO\") {\n        map.delete(token);\n      } else {\n        map.set(token, value);\n      }\n    };\n    const state = map.get(token);\n    const behaviour = state?.behaviour ?? \"NO\";\n    const withMemory = state?.withMemory ?? false;\n\n    return (\n      <div className=\"row\" style={{ alignItems: \"center\" }}>\n        <div>\n          <Checkbox\n            checked={withMemory}\n            size=\"small\"\n            color=\"primary\"\n            onChange={() => {\n              _update({ withMemory: !withMemory, behaviour });\n            }}\n          />\n        </div>\n        <div style={{ flex: 1 }}>{token}</div>\n        {withMemory && (\n          <div style={{ paddingLeft: 3, paddingRight: 3 }}>\n            <ChoiceField\n              value={behaviour}\n              keys={[\"NC\", \"NO\"]}\n              setValue={(v) => {\n                _update({ withMemory, behaviour: v });\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nconst ConditionInput = observer(\n  ({\n    m,\n  }: {\n    m: {\n      conditionExpression: string;\n      expressionTokens: [CustomToken, number][];\n    };\n  }) => {\n    let prevIndex = 0;\n    let _spanStyleRef = useRef<HTMLSpanElement>(null);\n    const font = \"400 15px monospace\";\n\n    return (\n      <div style={{ width: \"206px\", position: \"relative\" }} className=\"center\">\n        <span\n          style={{\n            font,\n            position: \"absolute\",\n            top: 0,\n            padding: \"3px\",\n            textAlign: \"initial\",\n            whiteSpace: \"pre-line\",\n          }}\n          ref={_spanStyleRef}\n        >\n          {m.expressionTokens.map(([c, textIndex], index) => {\n            let color: string;\n            if (c instanceof VarId) {\n              color = \"black\";\n            } else if ([\"AND\", \"NOT\", \"OR\"].includes(c)) {\n              color = \"blue\";\n            } else {\n              color = \"brown\";\n            }\n            const whiteSpace = textIndex - prevIndex;\n            const text = \" \".repeat(whiteSpace) + c.toString();\n            prevIndex = textIndex + c.toString().length;\n            return (\n              <span key={index} style={{ color }}>\n                {text}\n              </span>\n            );\n          })}\n        </span>\n        <textarea\n          onScroll={(s) => {\n            _spanStyleRef.current!.scrollTo(0, s.currentTarget.scrollTop);\n          }}\n          className=\"multiline-input\"\n          style={{\n            font,\n            background: \"transparent\",\n            color: \"transparent\",\n            caretColor: \"black\",\n            position: \"relative\",\n          }}\n          spellCheck={false}\n          value={m.conditionExpression}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            if (value.match(/^\\s$/) === null) {\n              m.conditionExpression = value.replace(/\\s[^\\S\\r\\n]/g, \" \");\n            }\n          }}\n        ></textarea>\n      </div>\n    );\n  }\n);\n","\nexport abstract class SourceItem {\n  constructor(public name: string) {}\n\n  when(f: {file: (f: SourceFile) => void, dir: (f: SourceDirectory) => void}) {\n    if (this instanceof SourceFile) {\n      f.file(this)\n    } else if (this instanceof SourceDirectory) {\n      f.dir(this)\n    }\n  }\n}\n\nexport class SourceFile extends SourceItem {\n  constructor(name: string, public content: string) {\n    super(name);\n  }\n}\n\nexport class SourceDirectory extends SourceItem {\n  constructor(name: string, public items: SourceItem[]) {\n    super(name);\n  }\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable from \"react-draggable\";\n// import Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { NodeModel } from \"./node-model\";\nimport { useStore } from \"../App\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledNode = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  background: #fff;\n  border-radius: 6;\n  border: 1.5px solid;\n`;\n\ntype NodeViewProps = { node: NodeModel<any, any, any> };\nexport const NodeView: React.FC<NodeViewProps> = observer((params) => {\n  const { node, children } = params;\n  const rootStore = useStore();\n  // const onDrag = React.useCallback(\n  //   (_: DraggableEvent, data: DraggableData) => {\n  //     node.move(data.deltaX, data.deltaY);\n  //   },\n  //   [node]\n  // );\n  const selectingInput = rootStore.selectingInputFor !== undefined;\n  const isValidInput =\n    selectingInput && rootStore.selectingInputFor!.data.isValidInput(node);\n  const isSelected = rootStore.selectedNode === node;\n\n  const onClick = React.useCallback(\n    (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (selectingInput) {\n        if (isValidInput) {\n          rootStore.assignInput(node);\n        }\n      } else {\n        rootStore.selectNode(node);\n      }\n    },\n    [rootStore, node, selectingInput, isValidInput]\n  );\n\n  if (node.isHidden && !rootStore.showHidden) {\n    return <></>;\n  }\n  // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n  const { x, y } = node;\n\n  let style: React.CSSProperties = {};\n  if (isSelected) {\n    style[\"boxShadow\"] = \"rgb(110 110 110) 1px 1.5px 3px 1px\";\n  }\n  if (selectingInput) {\n    style[\"cursor\"] = isValidInput ? \"pointer\" : \"not-allowed\";\n  }\n  if (node.isHidden) {\n    style[\"opacity\"] = 0.1;\n  }\n\n  return (\n    <Draggable\n      // onDrag={onDrag}\n      disabled={true}\n      position={{\n        // TODO: improve x, y with support for nested children\n        x: x - (node.data.parent?.x ?? 0),\n        y: y - (node.data.parent?.y ?? 0),\n      }}\n      bounds=\"parent\"\n    >\n      <StyledNode\n        ref={(e) => {\n          if (e === null) return;\n          node.setElement(e);\n        }}\n        onClick={onClick}\n        style={style}\n      >\n        <node.data.View children={children} />\n      </StyledNode>\n    </Draggable>\n  );\n});\n","import { Signal } from \"./signal\";\nimport { macroStepBehaviour } from \"./macro-step\";\nimport { EnclosingStep, MacroStep, StepType } from \"./step\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { gemmaBehaviour, memoryTransitionSuffix } from \"./gemma-templates\";\n\nconst variableDefinition = (signal: Signal): string => {\n  return `\\\n<variable name=\"${signal.name}\">\n  <type>\n    <${signal.type.toUpperCase()} />\n  </type>\n  ${\n    signal.defaultValue.length > 0\n      ? `<initialValue>\n    <simpleValue value=\"${signal.defaultValue}\" />\n  </initialValue>\n`\n      : \"\"\n  }\\\n</variable>`;\n};\n\nconst objectIdData = (objectId: string): string => {\n  return `\\\n<data name=\"http://www.3s-software.com/plcopenxml/objectid\" handleUnknown=\"discard\">\n  <ObjectId>${objectId}</ObjectId>\n</data> \n`;\n};\n\nconst functionBlock = (step: MacroStep | EnclosingStep): string => {\n  return `\\\n<data name=\"http://www.3s-software.com/plcopenxml/pou\" handleUnknown=\"implementation\">\n  <pou name=\"${step.name}_FB\" pouType=\"functionBlock\">\n    <interface>\n      <inputVars>\n        <variable name=\"Initialization\">\n          <type>\n            <BOOL />\n          </type>\n        </variable>\n      </inputVars>\n      <outputVars>\n        <variable name=\"Complete\">\n          <type>\n            <BOOL />\n          </type>\n        </variable>\n      </outputVars>\n    </interface>\n    <body>\n      <ST>\n        <xhtml xmlns=\"http://www.w3.org/1999/xhtml\">\n      ${macroStepBehaviour(step)}\n        </xhtml>\n      </ST>\n    </body>\n    <addData>\n      ${objectIdData(step.key)}\n    </addData>\n  </pou>\n</data>\n`;\n};\n\nconst gemmaImplementation = (gemma: GemmaGrafcet): string => {\n  return `\\\n<data name=\"http://www.3s-software.com/plcopenxml/pou\" handleUnknown=\"implementation\">\n  <pou name=\"GEMMA\" pouType=\"program\">\n    <interface>\n      <localVars>\n        <variable name=\"State\">\n          <type>\n            <UINT />\n          </type>\n          <initialValue>\n            <simpleValue value=\"${gemma.initialStep?.id}\" />\n          </initialValue>\n        </variable>\n        <variable name=\"Entry\">\n          <type>\n            <BOOL />\n          </type>\n          <initialValue>\n            <simpleValue value=\"TRUE\" />\n          </initialValue>\n        </variable>\n        ${gemma.steps\n          .filter(\n            (s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO\n          )\n          .map(\n            (s) => `\\\n          <variable name=\"${s.name}\">\n          <type>\n            <derived name=\"${s.name}_FB\" />\n          </type>\n          </variable>`\n          )\n          .join(\"\\n\")}\n        ${gemma.steps\n          .filter(\n            (s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO\n          )\n          .flatMap((s) => s.transitions)\n          .flatMap((t) =>\n            t.signalsWithMemory.map((sm) => {\n              const assign = sm.behaviour === \"NO\" ? \"FALSE\" : \"TRUE\";\n              return `\\\n              <variable name=\"${sm.value}${memoryTransitionSuffix(t)}\">\n              <type>\n                <BOOL />\n              </type>\n              <initialValue>\n                <simpleValue value=\"${assign}\" />\n              </initialValue>\n              </variable>`;\n            })\n          )\n          .join(\"    \\n\")}\n      </localVars>\n    </interface>\n    <body>\n      <ST>\n        <xhtml xmlns=\"http://www.w3.org/1999/xhtml\">\n      ${gemmaBehaviour(gemma)}\n        </xhtml>\n      </ST>\n    </body>\n    <addData>\n      ${objectIdData(gemma.key)}\n    </addData>\n  </pou>\n</data>\n`;\n};\n\nexport const projectTemplate = (gemma: GemmaGrafcet): string => {\n  return `\\\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<project xmlns=\"http://www.plcopen.org/xml/tc6_0200\">\n  ${projectHeader()}\n  <instances>\n    <configurations>\n      <configuration name=\"Device\">\n        <resource name=\"Application\">\n          ${tasks()}\n          <globalVars name=\"GVL\">\n            ${gemma.signals.map(variableDefinition).join(\"      \\n\")}\n            <addData>\n              <data name=\"http://www.3s-software.com/plcopenxml/attributes\" handleUnknown=\"implementation\">\n                <Attributes>\n                  <Attribute Name=\"qualified_only\" Value=\"\" />\n                </Attributes>\n              </data>\n              ${objectIdData(\"ea459247-8ebb-40c6-ae2a-b2c7106e0e22\")}\n            </addData>\n          </globalVars>\n          <addData>\n            ${gemmaImplementation(gemma)}\n            ${gemma.steps\n              .filter(\n                (s) =>\n                  s.type === StepType.ENCLOSING || s.type === StepType.MACRO\n              )\n              .map((s) => functionBlock(s as MacroStep | EnclosingStep))\n              .join(\"\\n\")}\n            ${libraries()}\n            ${objectIdData(\"f1bdda63-82df-4380-babf-520f8e0395d3\")}\n          </addData>\n        </resource>\n        <addData>\n          ${device(gemma.codesysVersion)}\n          <data name=\"configurations\" handleUnknown=\"discard\">\n            <configurations />\n          </data>\n          ${objectIdData(\"a8da5055-ba3c-41dd-853b-ad72125a9af2\")}\n        </addData>\n      </configuration>\n    </configurations>\n  </instances>\n  <addData>\n    ${projectStructure(gemma)}\n  </addData>\n</project>\n`;\n};\n\nconst projectStructure = (gemma: GemmaGrafcet): string => {\n  return `\\\n<data name=\"http://www.3s-software.com/plcopenxml/projectstructure\" handleUnknown=\"discard\">\n  <ProjectStructure>\n    <Object Name=\"Device\" ObjectId=\"a8da5055-ba3c-41dd-853b-ad72125a9af2\">\n      <Object Name=\"Application\" ObjectId=\"f1bdda63-82df-4380-babf-520f8e0395d3\">\n        <Object Name=\"Administrador de bibliotecas\" ObjectId=\"a13a8ff1-e760-4284-9d45-5ca949e70c2f\" />\n        <Object Name=\"MainTask\" ObjectId=\"8d75883b-687d-4295-b9bf-1b088a8ac6b3\" />\n        <Object Name=\"GVL\" ObjectId=\"ea459247-8ebb-40c6-ae2a-b2c7106e0e22\" />\n        <Object Name=\"GEMMA\" ObjectId=\"${gemma.key}\" />\n        ${gemma.steps\n          .filter(\n            (s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO\n          )\n          .map((s) => `<Object Name=\"${s.name}\" ObjectId=\"${s.key}\" />`)\n          .join(\"\\n\")}\n      </Object>\n    </Object>\n  </ProjectStructure>\n</data>\n`;\n};\n\nconst tasks = (): string => {\n  return `\\\n<task name=\"MainTask\" interval=\"PT0.02S\" priority=\"1\">\n  <pouInstance name=\"GEMMA\" typeName=\"\">\n    <documentation>\n      <xhtml xmlns=\"http://www.w3.org/1999/xhtml\" />\n    </documentation>\n  </pouInstance>\n  <addData>\n    <data name=\"http://www.3s-software.com/plcopenxml/tasksettings\" handleUnknown=\"implementation\">\n      <TaskSettings KindOfTask=\"Cyclic\" Interval=\"t#20ms\" IntervalUnit=\"ms\" WithinSPSTimeSlicing=\"true\">\n        <Watchdog Enabled=\"false\" TimeUnit=\"ms\" Sensitivity=\"1\" />\n      </TaskSettings>\n    </data>\n    <data name=\"http://www.3s-software.com/plcopenxml/objectid\" handleUnknown=\"discard\">\n      <ObjectId>8d75883b-687d-4295-b9bf-1b088a8ac6b3</ObjectId>\n    </data>\n  </addData>\n</task>\n`;\n};\n\nconst projectHeader = (): string => {\n  const now = new Date();\n  return `\\\n<fileHeader companyName=\"\" productName=\"CODESYS\" productVersion=\"CODESYS V3.5 SP11 Patch 3\" creationDateTime=\"${now.toISOString()}\" />\n<contentHeader name=\"ControlLogic.project\" modificationDateTime=\"${now.toISOString()}\">\n  <coordinateInfo>\n    <fbd>\n      <scaling x=\"1\" y=\"1\" />\n    </fbd>\n    <ld>\n      <scaling x=\"1\" y=\"1\" />\n    </ld>\n    <sfc>\n      <scaling x=\"1\" y=\"1\" />\n    </sfc>\n  </coordinateInfo>\n  <addData>\n    <data name=\"http://www.3s-software.com/plcopenxml/projectinformation\" handleUnknown=\"implementation\">\n      <ProjectInformation />\n    </data>\n  </addData>\n</contentHeader>\n<types>\n  <dataTypes />\n  <pous />\n</types>\n`;\n};\n\nconst libraries = (): string => {\n  return `\\\n<data name=\"http://www.3s-software.com/plcopenxml/libraries\" handleUnknown=\"implementation\">\n  <Libraries>\n    <Library Name=\"#IoStandard\" Namespace=\"IoStandard\" HideWhenReferencedAsDependency=\"false\" PublishSymbolsInContainer=\"false\" SystemLibrary=\"true\" LinkAllContent=\"true\" DefaultResolution=\"IoStandard, 3.5.10.0 (System)\" />\n    <Library Name=\"#3SLicense\" Namespace=\"_3S_LICENSE\" HideWhenReferencedAsDependency=\"false\" PublishSymbolsInContainer=\"false\" SystemLibrary=\"true\" LinkAllContent=\"false\" DefaultResolution=\"3SLicense, 0.0.0.0 (3S - Smart Software Solutions GmbH)\" ResolverGuid=\"97c3b452-d9fa-4ac2-9d0c-3d420aa6d95b\" />\n    <Library Name=\"#Standard\" Namespace=\"Standard\" HideWhenReferencedAsDependency=\"false\" PublishSymbolsInContainer=\"false\" SystemLibrary=\"false\" LinkAllContent=\"false\" DefaultResolution=\"Standard, * (System)\" />\n    <Library Name=\"#BreakpointLogging\" Namespace=\"BPLog\" HideWhenReferencedAsDependency=\"false\" PublishSymbolsInContainer=\"false\" SystemLibrary=\"true\" LinkAllContent=\"false\" DefaultResolution=\"Breakpoint Logging Functions, 3.5.5.0 (3S - Smart Software Solutions GmbH)\" />\n    <Library Name=\"#IecVarAccess\" Namespace=\"IecVarAccessLibrary\" HideWhenReferencedAsDependency=\"false\" PublishSymbolsInContainer=\"false\" SystemLibrary=\"true\" LinkAllContent=\"false\" DefaultResolution=\"IecVarAccess, 3.3.1.20 (System)\" />\n    <addData>\n      <data name=\"http://www.3s-software.com/plcopenxml/objectid\" handleUnknown=\"discard\">\n        <ObjectId>a13a8ff1-e760-4284-9d45-5ca949e70c2f</ObjectId>\n      </data>\n    </addData>\n  </Libraries>\n</data>\n`;\n};\n\nconst device = (codesysVersion: string | null): string => {\n  return `\\\n<data name=\"Device\" handleUnknown=\"discard\">\n  <Device xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"\">\n    <DeviceType>\n      <DeviceIdentification>\n        <Type>4096</Type>\n        <Id>0000 0001</Id>\n        <Version>${codesysVersion ?? \"3.5.11.30\"}</Version>\n      </DeviceIdentification>\n      <Connector moduleType=\"256\" interface=\"Common.PCI\" connectorId=\"0\">\n        <HostParameterSet />\n      </Connector>\n      <Connector moduleType=\"769\" interface=\"SafetyInterface\" connectorId=\"1\">\n        <HostParameterSet />\n      </Connector>\n      <DeviceParameterSet />\n    </DeviceType>\n  </Device>\n</data>\n`;\n};\n","import { MacroStep, EnclosingStep } from \"./step\";\n\nconst variables = (model: MacroStep | EnclosingStep): string => {\n  return `\nFUNCTION_BLOCK ${model.name}_FB\n\n// Variable declaration\nVAR_INPUT\n  Initialization:BOOL;\nEND_VAR\n\nVAR_OUTPUT\n  Complete:BOOL;\nEND_VAR\n`;\n};\n\nexport const macroStepBehaviour = (model: MacroStep | EnclosingStep) =>\n  `\\\n// FB behavior\nIF Initialization THEN\n  Complete:=FALSE;\n  // Initialization actions\n\nEND_IF\n\n// Nested behavior\n\n// Termination of the nested behavior\nComplete:=TRUE;\n`;\n\nexport const macroStepTemplate = (model: MacroStep | EnclosingStep) =>\n  `\\\n${variables(model)}\n${macroStepBehaviour(model)}\n`;\n","import { templateGemmaGrafcet, templateGlobals } from \"./gemma-templates\";\nimport {\n  GlobalData,\n  RootStoreModel,\n  DataBuilder,\n  JsonType,\n  GraphWarnings,\n} from \"../canvas/store\";\nimport { computed, IObservableArray, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Transition } from \"./transition\";\nimport { Step, StepType, ProcedureType, BaseStep } from \"./step\";\nimport { NodeModel } from \"../node/node-model\";\nimport { IndexedDB } from \"../canvas/persistence\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"./gemma-styles.css\";\nimport { SourceDirectory, SourceFile } from \"../codegen/file-system\";\nimport { macroStepTemplate } from \"./macro-step\";\nimport { NodeView } from \"../node/node\";\nimport { Signal, SignalRow, SignalType } from \"./signal\";\nimport mm from \"../gemma-model.json\";\nimport { projectTemplate } from \"./openxml-templates\";\n\nexport class GemmaGrafcet implements GlobalData<Step> {\n  constructor(\n    private graph: RootStoreModel<Step, GemmaGrafcet, Transition>,\n    json?: JsonType\n  ) {\n    let signals: Signal[] = [];\n    if (Array.isArray(json?.signals)) {\n      signals = json?.signals\n        .map((s) =>\n          typeof s === \"object\" ? Signal.fromJson(this, s) : undefined\n        )\n        .filter((s) => s !== undefined) as Signal[];\n    }\n    this.signals = observable.array<Signal>(signals);\n  }\n\n  get key(): string {\n    return this.graph.key;\n  }\n  get codesysVersion(): string | null {\n    return this.graph.codesysVersion;\n  }\n\n  canAddNode = (nodeType: string): boolean => {\n    return true;\n  };\n\n  generatingXML = false;\n\n  initState(): void {\n    const nodes = [...this.graph.nodes.values()];\n    const _selected = nodes.find(\n      (n) => n.data.type !== StepType.CONTAINER && !n.isHidden\n    );\n    if (_selected !== undefined) {\n      this.graph.selectNode(_selected);\n    }\n    const _selectedTrans = nodes\n      .flatMap((n) => n.inputs)\n      .find((t) => !t.isHidden);\n    if (_selectedTrans !== undefined) {\n      this.graph.selectConnection(_selectedTrans);\n    }\n\n    this.fFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.F\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 600, y: 0 })!;\n    this.fFamily.setName(\"F family\");\n    this.fFamily.data.family = ProcedureType.F;\n\n    this.aFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.A\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 0, y: 0 })!;\n    this.aFamily.setName(\"A family\");\n    this.aFamily.data.family = ProcedureType.A;\n\n    this.dFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.D\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 0, y: 500 })!;\n    this.dFamily.setName(\"D family\");\n    this.dFamily.data.family = ProcedureType.D;\n  }\n\n  fFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  aFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  dFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n\n  @computed\n  get steps(): Step[] {\n    return [...this.graph.nodes.values()]\n      .filter((node) => !node.isHidden && node.data.type !== StepType.CONTAINER)\n      .sort((a, b) => a.data.id - b.data.id)\n      .map((node) => node.data);\n  }\n\n  readonly signals: IObservableArray<Signal>;\n\n  @computed\n  get numSignals(): Signal[] {\n    return this.signals.filter((s) => s.type !== SignalType.bool);\n  }\n\n  @computed\n  get boolSignals(): Signal[] {\n    return this.signals.filter((s) => s.type === SignalType.bool);\n  }\n\n  @computed\n  get initialStep(): Step | undefined {\n    return this.steps.find((s) => s.isInitial);\n  }\n\n  @computed\n  get generateMainFile(): string {\n    return templateGemmaGrafcet(this);\n  }\n\n  generateProjectInFormat = (format: string): string => {\n    this.generatingXML = true;\n    const result = projectTemplate(this);\n    this.generatingXML = false;\n    return result;\n  };\n\n  @computed\n  get generateSourceCode(): SourceDirectory {\n    const main = templateGemmaGrafcet(this);\n    const globals = templateGlobals(this.signals);\n    const files = [\n      new SourceFile(\"GEMMA.txt\", main),\n      new SourceFile(\"GVL.txt\", globals),\n    ];\n\n    for (const s of this.steps.values()) {\n      // if (s.type === StepType.ENCLOSING) {\n      //   files.push(\n      //     new SourceFile(s.name + \"_FB.txt\", enclosingStepTemplate(s))\n      //   );\n      // } else\n      if (s.type === StepType.ENCLOSING || s.type === StepType.MACRO) {\n        files.push(new SourceFile(s.name + \"_FB.txt\", macroStepTemplate(s)));\n      }\n    }\n\n    return new SourceDirectory(\"gemma_grafcet\", files);\n  }\n\n  @computed\n  get warnings(): GraphWarnings {\n    const signalsErrors = new Set<string>();\n    let unnamedSignals = 0;\n    for (const s of this.signals) {\n      const isUnnamed = s.name.trim() === \"\";\n      if (isUnnamed) {\n        unnamedSignals++;\n      } else if (!!s.errors[\"Name\"]) {\n        signalsErrors.add(`${s.name}. Name: ${s.errors[\"Name\"]}.`);\n      }\n      if (!!s.errors[\"Default Value\"]) {\n        signalsErrors.add(\n          `${isUnnamed ? \"<UNNAMED>\" : s.name}. Default value: ${\n            s.errors[\"Default Value\"]\n          }.`\n        );\n      }\n    }\n    if (unnamedSignals > 0) {\n      signalsErrors.add(\n        `${unnamedSignals} signal${\n          unnamedSignals === 1 ? \"\" : \"s\"\n        } with no name.`\n      );\n    }\n\n    const hasInitialStep = this.steps.some((s) => s.isInitial);\n    const stepsWithNoInputTransitions = this.steps.filter(\n      (s) => !s.node.inputs.some((n) => !n.isHidden)\n    );\n    const stepsWithNoOutputTransitions = this.steps.filter(\n      (s) => !s.node.outputs.some((n) => !n.isHidden)\n    );\n    const stepsErrors = [];\n    if (!hasInitialStep) {\n      stepsErrors.push(\"No initial step.\");\n    }\n    if (stepsWithNoOutputTransitions.length !== 0) {\n      stepsErrors.push(\n        `Steps with no output transitions: ${stepsWithNoOutputTransitions\n          .map((s) => s.name)\n          .join(\", \")}`\n      );\n    }\n    if (stepsWithNoInputTransitions.length !== 0) {\n      stepsErrors.push(\n        `Steps with no input transitions: ${stepsWithNoInputTransitions\n          .map((s) => s.name)\n          .join(\", \")}`\n      );\n    }\n\n    const transitionErrors = this.steps\n      .flatMap((s) => s._transitions)\n      .filter(\n        (t) =>\n          t.parsedExpression?.errors !== undefined &&\n          t.parsedExpression?.errors.length > 0\n      )\n      .map((t) => [\n        `${t.from.name} -> ${t.to.name}`,\n        t.parsedExpression?.errors,\n      ]);\n\n    return {\n      Steps: stepsErrors,\n      Transitions: transitionErrors as any,\n      Signals: [...signalsErrors.values()],\n    };\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      signals: this.signals.map((s) => s.toJson),\n    };\n  }\n\n  View = observer(() => {\n    const [showDelete, setShowDelete] = useState(false);\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h3 style={{ margin: \"5px 0 10px 5px\" }}>Variables</h3>\n          <Button onClick={(_) => setShowDelete(!showDelete)}>\n            {showDelete ? \"Hide Delete\" : \"Show Delete\"}\n            <FontAwesomeIcon\n              style={{ paddingLeft: \"7px\" }}\n              icon={\"trash-alt\"}\n              color={\"#000\"}\n            />\n          </Button>\n        </div>\n        <Table\n          id=\"signals-table\"\n          size=\"small\"\n          aria-label=\"a dense table\"\n          stickyHeader={true}\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Size</TableCell>\n              <TableCell>Default</TableCell>\n              {showDelete && <TableCell>Delete</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.signals.map((s, index) => (\n              <SignalRow\n                signal={s}\n                key={index}\n                showDelete={showDelete}\n                removeSignal={(s) => this.signals.remove(s)}\n              />\n            ))}\n          </TableBody>\n        </Table>\n        <Button\n          style={{ alignSelf: \"flex-end\" }}\n          onClick={(_) => this.signals.push(new Signal(this))}\n        >\n          Add Variable\n        </Button>\n      </div>\n    );\n  });\n\n  CanvasView = observer(() => {\n    const nodes = [...this.graph.nodes.values()];\n    const _nodesFromFamily = (family: ProcedureType) => {\n      return nodes\n        .filter(\n          (n) => n.data.family === family && n.data.type !== StepType.CONTAINER\n        )\n        .map((n) => {\n          return <NodeView node={n} key={n.key} />;\n        });\n    };\n\n    const _color = {\n      [ProcedureType.A]: { color: \"#ecf5ff\", size: { w: 600, h: 500 } },\n      [ProcedureType.D]: { color: \"#ffd6d6\", size: { w: 600, h: 500 } },\n      [ProcedureType.F]: { color: \"#ebffec\", size: { w: 600, h: 1000 } },\n    };\n\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          position: \"absolute\",\n          paddingRight: \"15px\",\n        }}\n      >\n        {nodes\n          .filter((n) => n.data.type === StepType.CONTAINER)\n          .map((n) => {\n            const _d = _color[n.data.family]!;\n            return (\n              <div\n                style={{\n                  background: _d.color,\n                  width: _d.size.w,\n                  height: _d.size.h,\n                  position: \"absolute\",\n                  top: n.y,\n                  left: n.x,\n                }}\n                key={n.key}\n                ref={(e) => {\n                  if (e === null) return;\n                  n.setSize(e.getBoundingClientRect());\n                }}\n              >\n                {_nodesFromFamily(n.data.family)}\n              </div>\n            );\n          })}\n      </div>\n    );\n  });\n}\n\nexport const gemmaBuilders: DataBuilder<Step, GemmaGrafcet, Transition> = {\n  graphBuilder: (g, json) => new GemmaGrafcet(g, json),\n  nodeBuilder: (n, json) => {\n    const type = json !== undefined ? json[\"type\"] : undefined;\n    if (typeof type === \"string\" && Object.keys(StepType).includes(type)) {\n      return new BaseStep(n, json);\n    }\n\n    return new BaseStep(n);\n  },\n  connectionBuilder: (c, json) => new Transition(c, json),\n};\n\nexport const make5NodesGraph = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const s1 = rootStore.addNode(StepType.SIMPLE, { x: 72, y: 60 });\n  if (s1 !== undefined) {\n    s1.data.isInitial = true;\n  }\n  const s2 = rootStore.addNode(StepType.MACRO, { x: 261, y: 170 });\n\n  [\n    s1,\n    s2,\n    rootStore.addNode(StepType.ENCLOSING, { x: 441, y: 316 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 211, y: 410 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 441, y: 500 }),\n  ].forEach((s, index) => s?.setName(`S${index + 1}`));\n\n  s1!.data.family = ProcedureType.A;\n  s2!.data.family = ProcedureType.D;\n  rootStore.selectNode(s1!);\n\n  rootStore.selectingInput(s1!);\n  const conn = rootStore.assignInput(s2!);\n\n  rootStore.selectConnection(conn);\n  rootStore.globalData.signals.push(\n    new Signal(rootStore.globalData, { name: \"\" })\n  );\n  return rootStore;\n};\n\nexport const makeBaseGemmaTemplate = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n    hideOnDelete: true,\n    json: mm as any,\n  });\n  return rootStore;\n};\n\nexport const makeBaseGemmaTemplateOld = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n    hideOnDelete: true,\n  });\n\n  const nodesRaw: {\n    [key in ProcedureType]: {\n      [key: string]: { type: StepType; x: number; y: number };\n    };\n  } = {\n    [ProcedureType.A]: {\n      A1: { type: StepType.SIMPLE, x: 517, y: 142 },\n      A2: { type: StepType.SIMPLE, x: 240, y: 417 },\n      A3: { type: StepType.SIMPLE, x: 418, y: 406 },\n      A4: { type: StepType.SIMPLE, x: 479, y: 314 },\n      A5: { type: StepType.MACRO, x: 86, y: 325 },\n      A6: { type: StepType.SIMPLE, x: 156, y: 31 },\n      A7: { type: StepType.MACRO, x: 239, y: 176 },\n    },\n    [ProcedureType.F]: {\n      F1: { type: StepType.MACRO, x: 743, y: 709 },\n      F2: { type: StepType.MACRO, x: 966, y: 683 },\n      F3: { type: StepType.MACRO, x: 704, y: 171 },\n      F4: { type: StepType.ENCLOSING, x: 848, y: 29 },\n      F5: { type: StepType.ENCLOSING, x: 979, y: 478 },\n      F6: { type: StepType.ENCLOSING, x: 729, y: 876 },\n    },\n    [ProcedureType.D]: {\n      D1: { type: StepType.MACRO, x: 75, y: 895 },\n      D2: { type: StepType.SIMPLE, x: 221, y: 573 },\n      D3: { type: StepType.ENCLOSING, x: 309, y: 735 },\n    },\n  };\n\n  const nodes: {\n    [key: string]: NodeModel<Step, GemmaGrafcet, Transition>;\n  } = {};\n\n  for (const [family, nn] of Object.entries(nodesRaw)) {\n    for (const [k, v] of Object.entries(nn)) {\n      const n = rootStore.addNode(v.type, { x: v.x, y: v.y });\n      n?.setName(k);\n      n!.data.family = family as ProcedureType;\n      nodes[k] = n!;\n      if (k === \"A6\") {\n        n!.data.isInitial = true;\n      }\n    }\n  }\n\n  const connections = {\n    A1: [\"F2\", \"F1\", \"F5\", \"F4\"],\n    A2: [\"A1\"],\n    A3: [\"A4\"],\n    A4: [\"F1\"],\n    A5: [\"A6\", \"A7\"],\n    A6: [\"A1\"],\n    A7: [\"A4\"],\n    F1: [\"F3\", \"F4\", \"F5\", \"F6\", \"A2\", \"A3\", \"D1\", \"D2\", \"D3\"],\n    F2: [\"F1\"],\n    F3: [\"A1\"],\n    F4: [\"A6\"],\n    F5: [\"F1\", \"F4\"],\n    F6: [\"F1\", \"D1\"],\n    D1: [\"D2\", \"A5\"],\n    D2: [\"A5\"],\n    D3: [\"A2\", \"A3\"],\n  };\n\n  for (const [from, v] of Object.entries(connections)) {\n    for (const to of v) {\n      rootStore.addConnection(nodes[from], nodes[to]);\n    }\n  }\n\n  rootStore.addConnection(rootStore.globalData.fFamily!, nodes[\"D1\"]!, {\n    data: {\n      conditionExpression: \"I1 AND I2\",\n    },\n  });\n\n  const a1 = nodes[\"A1\"]!;\n  rootStore.selectNode(a1);\n  rootStore.selectConnection(a1.outputs[0]);\n\n  return rootStore;\n};\n","import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport React, { useCallback, useState } from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { ConfigView } from \"./canvas/config-view\";\nimport { createIndexedDB, IndexedDB } from \"./canvas/persistence\";\nimport { RootStoreModel, GlobalData, GraphWarnings } from \"./canvas/store\";\nimport { NodeData, ConnectionData } from \"./node/node-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\nimport { gemmaBuilders, makeBaseGemmaTemplate } from \"./step/gemma\";\nimport { importJson } from \"./utils\";\nimport { observer } from \"mobx-react-lite\";\n\nexport const storeContext = React.createContext<RootStoreModel<\n  any,\n  any,\n  any\n> | null>(null);\n\nexport function useStore<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>() {\n  const store = React.useContext<RootStoreModel<D, G, C> | null>(storeContext);\n  if (!store) {\n    throw Error(\"useStore should be used inside a Store provider.\");\n  }\n  return store;\n}\n\ntype RootStore = RootStoreModel<any, any, any>;\n\nexport function App() {\n  const [globalDB, setDB] = React.useState<IndexedDB | null>(null);\n  const [store, setStore] = React.useState<RootStore | null>(null);\n  (window as any).store = store;\n  const _isReset = store && store.resetStore;\n  React.useEffect(() => {\n    if (!store) {\n      createIndexedDB().then(async (db) => {\n        setDB(db);\n        const graphs = await db.fetchGraphs();\n\n        let _store: RootStore;\n        const graph = graphs[0];\n        if (graph !== undefined) {\n          const graphExt = await db.loadGraph(graph.key);\n          _store = new RootStoreModel({\n            db,\n            json: { graph, ...graphExt },\n            hideOnDelete: true,\n            builders: gemmaBuilders,\n          });\n        } else {\n          _store = makeBaseGemmaTemplate(db);\n        }\n        setStore(_store);\n      });\n    } else if (store.resetStore) {\n      setStore(null);\n    }\n  }, [store, _isReset]);\n\n  if (!store) {\n    return <div className=\"center\">Loading...</div>;\n  }\n\n  return (\n    <storeContext.Provider value={store}>\n      <div\n        className=\"row\"\n        style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n      >\n        {/* <div className=\"col\">\n          <MainMenu items={Object.keys(rootStore.builders.nodeBuilder)} />\n        </div> */}\n        <div\n          className=\"col\"\n          style={{\n            width: \"0px\",\n            background: \"rgba(250,250,250,0.7)\",\n            flex: \"1 0 auto\",\n          }}\n        >\n          <div className=\"row\" style={{ minHeight: 0, flex: 1 }}>\n            <div className=\"col\" style={{ flex: 1 }}>\n              <TopMenu store={store} globalDB={globalDB!} setStore={setStore} />\n              <MainCanvas />\n            </div>\n            <ConfigView />\n          </div>\n          <PropertiesView />\n        </div>\n      </div>\n    </storeContext.Provider>\n  );\n}\n\nconst ToggleShowHidden = observer(({ store }: { store: RootStore }) => (\n  <Button\n    onClick={(_) => {\n      store.showHidden = !store.showHidden;\n    }}\n  >\n    {store.showHidden ? \"Hide Deleted\" : \"Show Deleted\"}\n  </Button>\n));\n\nfunction TopMenu<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>({\n  store,\n  setStore,\n  globalDB,\n}: {\n  store: RootStoreModel<D, G, C>;\n  globalDB: IndexedDB;\n  setStore: (store: RootStore) => void;\n}) {\n  const [isResetDialogOpen, setIsResetDialogOpen] = useState(false);\n  const [isWarningsDialogOpen, setIsWarningsDialogOpen] = useState(false);\n  const toggleDialog = useCallback(() => {\n    setIsResetDialogOpen(!isResetDialogOpen);\n  }, [isResetDialogOpen]);\n\n  return (\n    <div\n      className=\"row\"\n      style={{\n        justifyContent: \"space-between\",\n        borderBottom: \"rgb(221 220 220) solid 1.5px\",\n        background: \"white\",\n      }}\n    >\n      <ToggleShowHidden store={store} />\n      <div\n        className=\"row\"\n        style={{\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <Button\n          onClick={(_) => {\n            store.saveModel();\n          }}\n        >\n          Save\n        </Button>\n        <Button onClick={toggleDialog}>Reset</Button>\n        <Dialog\n          open={isResetDialogOpen}\n          onClose={toggleDialog}\n          keepMounted\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">\n            Reset Diagram State\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              Are you sure you want to reset the diagram state? All changes will\n              be lost.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={toggleDialog} color=\"primary\">\n              Close\n            </Button>\n            <Button\n              onClick={async (_) => {\n                const _store = makeBaseGemmaTemplate(globalDB);\n                setStore(_store);\n                toggleDialog();\n              }}\n              color=\"primary\"\n            >\n              Reset Diagram\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Button\n          onClick={(_) => {\n            const hasWarnings = Object.values(store.globalData.warnings).some(\n              (v) => v.length > 0\n            );\n            if (hasWarnings) {\n              setIsWarningsDialogOpen(true);\n            } else {\n              store.downloadModel();\n            }\n          }}\n        >\n          Export\n        </Button>\n        <WarningsDialog\n          open={isWarningsDialogOpen}\n          toggleDialog={() => setIsWarningsDialogOpen(!isWarningsDialogOpen)}\n          warnings={store.globalData.warnings}\n          accept={store.downloadModel}\n        />\n        <Button>\n          <label\n            htmlFor=\"import-file-input\"\n            style={{ margin: 0, width: \"100%\", cursor: \"pointer\" }}\n          >\n            Import\n          </label>\n          <input\n            type=\"file\"\n            id=\"import-file-input\"\n            accept=\"application/json\"\n            style={{ display: \"none\" }}\n            onChange={async (e) => {\n              const json = await importJson(e);\n              if (typeof json === \"string\") {\n                try {\n                  const val = JSON.parse(json);\n                  const _store = new RootStoreModel({\n                    db: globalDB,\n                    json: val,\n                    builders: gemmaBuilders,\n                    hideOnDelete: true,\n                  });\n                  setStore(_store);\n                } catch (e) {\n                  console.log(e);\n                }\n              }\n            }}\n          />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport const WarningsDialog = ({\n  open,\n  toggleDialog,\n  warnings,\n  accept,\n}: {\n  open: boolean;\n  toggleDialog: () => void;\n  warnings: GraphWarnings;\n  accept: () => void;\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={toggleDialog}\n      keepMounted\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">Download Diagram</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          There are some warnings in the diagram configuration. Do you want to\n          continue with the download?\n        </DialogContentText>\n        {Object.entries(warnings).map(([title, warnings]) => {\n          if (warnings.length === 0) {\n            return <div key={title}></div>;\n          }\n          return (\n            <div key={title} className=\"warning-list\">\n              <h3>{title}</h3>\n              <ul>\n                {warnings[0].length === 2 && Array.isArray(warnings[0][1])\n                  ? (warnings as [string, string[]][]).map(\n                      ([sectionTitle, warnings], index) => (\n                        <div key={sectionTitle}>\n                          <h5>{sectionTitle}</h5>\n                          {warnings.map((w, index) => (\n                            <li key={`${sectionTitle}${index}`}>{w}</li>\n                          ))}\n                        </div>\n                      )\n                    )\n                  : (warnings as string[]).map((w, index) => (\n                      <li key={`${title}${index}`}>{w}</li>\n                    ))}\n              </ul>\n            </div>\n          );\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={toggleDialog} color=\"primary\">\n          Close\n        </Button>\n        <Button onClick={accept} color=\"primary\">\n          Continue\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp, faTrashAlt, faEye, faEyeSlash} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp, faTrashAlt, faEye, faEyeSlash);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}