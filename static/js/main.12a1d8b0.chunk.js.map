{"version":3,"sources":["node/node.tsx","canvas/arrow.tsx","canvas/canvas.tsx","utils.ts","canvas/config-view.tsx","node/node-model.tsx","canvas/store.tsx","graph-menu/main-menu.tsx","properties/properties-table.tsx","properties/properties-view.tsx","step/gemma-templates.ts","fields/choice-field.tsx","step/gemma.tsx","fields/primitive-field.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledNode","styled","div","NodeView","observer","operation","rootStore","useStore","onDrag","React","useCallback","_","data","move","deltaX","deltaY","selectingInput","undefined","selectingInputFor","isValidInput","onClick","console","log","assignInput","selectNode","x","y","name","position","bounds","ref","e","setSize","getBoundingClientRect","style","cursor","triangleFromCenter","height","width","y0","ArrowView","changeX","changeY","connection","from","to","x1","y1","x2","y2","dy","dx","m","Math","abs","xa","ya","xm","ym","degrees","atan2","PI","strokeWidth","stroke","d","onDoubleClick","selectConnection","RectAndText","text","connectionText","transform","rectFill","padding","useState","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","fill","MainCanvas","ops","nodes","values","border","background","margin","borderRadius","flex","map","key","flatMap","op","inputs","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","reduce","p","k","v","ConfigView","connections","c","forEach","get","set","push","Map","orderedOps","counts","filter","withDependencies","length","numProcessed","size","slice","outs","dep","delete","minWidth","defaultSize","boxShadow","enable","overflow","globalData","generateCode","ConnModel","dataBuilder","this","NodeModel","graph","conn","outputs","observable","array","computed","action","rect","RootStoreModel","builders","graphBuilder","selection","selectedConnection","nodeType","pos","canAddNode","nodeBuilder","v4","window","addEventListener","_selectingInputKeyListener","connectionBuilder","addOutput","ev","removeEventListener","MainList","ul","MainMenu","items","disableDragging","maxWidth","maxHeight","display","flexDirection","enableResizing","type","List","component","Array","isArray","t","ListItem","button","className","addNode","ListItemText","primary","list","Item","open","setOpen","icon","Collapse","in","timeout","unmountOnExit","disablePadding","PropertiesTable","self","fullOfInputs","nInputs","isAddingInput","PropertiesTableStyled","spec","plotField","model","table","PropertiesView","inner","value","onInput","setName","currentTarget","onChange","ConnectionView","minHeight","H","textOrEmpty","cond","templateTransitions","transitions","isNested","index","condition","expression","join","templateFBEntry","templateGemmaGraphcet","steps","s","StepType","ENCLOSING","MACRO","initialStep","step","templateGemmaGraphcetEnclosingStep","INITIAL","SIMPLE","templateGemmaGraphcetSimpleStep","innerTransitionsLength","templateGemmaGraphcetMacroStep","replace","ButtonsDiv","ChoiceFieldSpec","choices","default","isObservableMap","keys","Symbol","toStringTag","mobxProp","types","optional","string","Select","target","autoWidth","MenuItem","ButtonGroup","color","aria-label","buttonStyle","Button","Error","StrFieldSpec","maxLength","minLength","setValue","errors","TextField","inputProps","textAlign","error","fullWidth","ProcedureType","GemmaGraphcet","workingFamilyTransitions","signals","_hasInitialStep","some","n","node","find","BaseStep","l","Number","POSITIVE_INFINITY","family","F","toString","description","inputNodes","every","_transitions","automationSystem","concat","indexOf","SimpleStep","InitialStep","EnclosingStep","MacroStep","Transition","conditionExpression","Condition","g","s1","s2","_t","A","D","storeContext","createContext","store","useContext","App","Provider","Boolean","location","hostname","match","library","add","faChevronDown","faChevronUp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.12a1d8b0.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { NodeModel } from \"./node-model\";\nimport { useStore } from \"../App\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledNode = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  padding: 6px;\n  background: #fff;\n  border-radius: 6;\n  border: 1px solid #eee;\n`;\n\ntype NodeViewProps = { operation: NodeModel<any, any, any> };\nexport const NodeView: React.FC<NodeViewProps> = observer(\n  ({ operation }) => {\n    const rootStore = useStore();\n    const onDrag = React.useCallback(\n      (_: DraggableEvent, data: DraggableData) => {\n        operation.move(data.deltaX, data.deltaY);\n      },\n      [operation]\n    );\n    const selectingInput = rootStore.selectingInputFor !== undefined;\n    const isValidInput =\n      selectingInput && rootStore.selectingInputFor!.data.isValidInput(operation);\n\n    const onClick = React.useCallback(\n      (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        console.log(operation);\n        if (selectingInput) {\n          if (isValidInput) {\n            rootStore.assignInput(operation);\n          }\n        } else {\n          rootStore.selectNode(operation);\n        }\n      },\n      [rootStore, operation, selectingInput, isValidInput]\n    );\n    // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n    const { x, y, name } = operation;\n\n    return (\n      <Draggable onDrag={onDrag} position={{ x, y }} bounds=\"parent\">\n        <StyledNode\n          ref={(e) => {\n            if (e === null) return;\n            operation.setSize(e.getBoundingClientRect());\n          }}\n          onClick={onClick}\n          style={\n            selectingInput\n              ? { cursor: isValidInput ? \"pointer\" : \"not-allowed\" }\n              : undefined\n          }\n        >\n          {`Layer ${name}`}\n        </StyledNode>\n      </Draggable>\n    );\n  }\n);","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NodeModel, ConnModel } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\nexport type ArrowModel = {\n  from: NodeModel<any, any, any>;\n  to: NodeModel<any, any, any>;\n};\n\ntype ArrowViewProps = { connection: ConnModel<any, any, any> };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ connection }: ArrowViewProps) => {\n    const rootStore = useStore();\n    const { from, to } = connection;\n\n    const [x1, y1, x2, y2] = [\n      from.x + from.width / 2,\n      from.y + from.height / 2,\n      to.x + to.width / 2,\n      to.y + to.height / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onDoubleClick={(e) => {\n            rootStore.selectConnection(connection);\n          }}\n        />\n        <RectAndText text={connection.data.connectionText} x={xm} y={ym} />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n}> = observer(({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3 }) => {\n  const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n  const [prev, setPrev] = React.useState(text);\n  const bbox = textRef?.getBBox();\n  React.useEffect(() => {\n    if (prev !== text) {\n      const id = setTimeout(() => setPrev(text), 0);\n      return () => clearTimeout(id);\n    }\n  });\n\n  return (\n    <>\n      {bbox !== undefined && (\n        <rect\n          width={bbox.width + padding * 2}\n          height={bbox.height + padding * 2}\n          x={xm - bbox.width / 2 - padding}\n          y={ym - bbox.height + padding}\n          fill={rectFill}\n        ></rect>\n      )}\n      <text\n        x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n        y={ym}\n        fill=\"black\"\n        ref={setTextRef}\n      >\n        {text}\n      </text>\n    </>\n  );\n});\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeView } from \"../node/node\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  const ops = [...rootStore.nodes.values()];\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        border: \"1px solid #eee\",\n        height: \"auto\",\n        background: \"#fff\",\n        margin: \"10px\",\n        borderRadius: \"6px\",\n        flex: 1,\n      }}\n    >\n      {ops.map((operation) => {\n        console.log(operation);\n        return <NodeView operation={operation} key={operation.key} />;\n      })}\n      <svg style={{ width: \"100%\", height: \"100%\" }}>\n        {ops\n          .flatMap((op) => op.inputs)\n          .map((connection) => (\n            <ArrowView\n              connection={connection}\n              key={connection.from.key + connection.to.key}\n            />\n          ))}\n      </svg>\n    </div>\n  );\n});\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce((p, [k, v]) => {\n    if (v !== undefined) {\n      p[k as keyof typeof defaultResizeEnable] = v;\n    }\n    return p;\n  }, {...defaultResizeEnable});\n}\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeModel } from \"../node/node-model\";\nimport { resizableEnable } from \"../utils\";\nimport { GlobalData } from \"./store\";\n\ntype Props = {};\n\nexport const ConfigView: React.FC<Props> = observer(<\n  G extends GlobalData<any>\n>() => {\n  const rootStore = useStore<any, G, any>();\n  const ops = [...rootStore.nodes.values()];\n  const connections = ops.reduce((p, c) => {\n    c.inputs.forEach((v) => {\n      let m = p.get(v.to);\n      if (m === undefined) {\n        m = [];\n        p.set(v.to, m);\n      }\n      m.push(c);\n    });\n    return p;\n  }, new Map<NodeModel<any, any, any>, NodeModel<any, any, any>[]>());\n\n  const orderedOps: NodeModel<any, any, any>[] = [];\n  const counts = new Map(\n    ops\n      .filter((op) => {\n        const withDependencies = op.data.length !== 0;\n        if (!withDependencies) {\n          orderedOps.push(op);\n        }\n        return withDependencies;\n      })\n      .map((op) => [op, op.data.length])\n  );\n  let numProcessed = 0;\n  while (counts.size !== 0 && orderedOps.length !== numProcessed) {\n    for (let k of orderedOps.slice(numProcessed)) {\n      numProcessed += 1;\n      const outs = connections.get(k);\n      if (outs === undefined) continue;\n\n      for (let dep of outs) {\n        const m = counts.get(dep)!;\n        if (m === 1) {\n          counts.delete(dep);\n          orderedOps.push(dep);\n        } else {\n          counts.set(dep, m - 1);\n        }\n      }\n    }\n  }\n\n  if (counts.size !== 0) {\n    // CICLE ?\n  }\n\n  return (\n    <Resizable\n      minWidth={200}\n      defaultSize={{ height: \"auto\", width: 400 }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ left: true })}\n    >\n      <div style={{ overflow: \"auto\", height: \"100%\", padding: \"0 10px\" }}>\n        <pre>{rootStore.globalData.generateCode()}</pre>\n        {/* {ops.map((op) => {\n          return (\n            <pre key={op.key}>\n              {op.name + \" = \" + op.data.pythonCode + \"\\n\"}\n            </pre>\n          );\n        })}\n\n        {orderedOps.map((op) => {\n          if (op.data.inputs.length > 0) {\n            return (\n              <pre key={op.key + \"input\"}>\n                {`${op.name}_output = ${op.name}(${op.inputs\n                  .map((inp) => inp.to.name)\n                  .join(\",\")});`}\n              </pre>\n            );\n          }\n          return null;\n        })} */}\n      </div>\n    </Resizable>\n  );\n});\n","import {\n  action,\n  computed,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport { SnapshotIn } from \"mobx-state-tree\";\nimport { FieldSpec } from \"../fields\";\nimport { GlobalData, RootStoreModel, ConnectionData } from \"../canvas/store\";\n\nexport type OperationI<\n  V extends { [key: string]: FieldSpec },\n  D extends NodeData<D, G, any>,\n  G extends GlobalData<D>\n> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  nInputs: number;\n  errors: ObservableMap<keyof V, string>;\n};\n\nexport const mobxDecorators = <V extends { [key: string]: FieldSpec }>(\n  spec: V\n) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    errors: observable,\n  };\n};\n\nexport interface NodeData<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  isValidInput(input: NodeModel<D, G, C>): boolean;\n  nInputs: number;\n  spec: { [key: string]: FieldSpec };\n  // TODO: ObservableMap<keyof V, string>\n  errors: ObservableMap<string, string>;\n}\n\nexport class ConnModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public from: NodeModel<D, G, C>,\n    public to: NodeModel<D, G, C>,\n    dataBuilder: (connection: ConnModel<D, G, C>) => C\n  ) {\n    this.data = dataBuilder(this);\n  }\n\n  data: C;\n}\n\nexport class NodeModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public graph: RootStoreModel<D, G, any>,\n    d: {\n      key: string;\n      name: string;\n      x: number;\n      y: number;\n      dataBuilder: (node: NodeModel<D, G, C>) => D;\n    }\n  ) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.dataBuilder(this);\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: D;\n  @observable\n  inputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get inputNodes(): NodeModel<D, G, C>[] {\n    return this.inputs.map((c) => c.from);\n  }\n  @observable\n  outputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get outputNodes(): NodeModel<D, G, C>[] {\n    return this.outputs.map((c) => c.to);\n  }\n\n  @action   \n  addInput(conn: ConnModel<D, G, C>) {\n    this.inputs.push(conn);\n    conn.from.outputs.push(conn);\n  }\n\n  @action\n  addOutput(conn: ConnModel<D, G, C>) {\n    this.outputs.push(conn);\n    conn.to.inputs.push(conn);\n  }\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n}","import { action, observable, ObservableMap } from \"mobx\";\nimport { v4 } from \"uuid\";\nimport { NodeModel, NodeData, ConnModel } from \"../node/node-model\";\n\nexport type DataBuilder<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  connectionBuilder: (connection: ConnModel<D, G, C>) => C;\n  nodeBuilder: { [key: string]: (node: NodeModel<D, G, C>) => D };\n  graphBuilder: (connection: RootStoreModel<D, G, C>) => G;\n};\n\nexport interface GlobalData<D extends NodeData<D, any, any>> {\n  generateCode(): string;\n  canAddNode(nodeType: string): boolean;\n}\n\nexport type ConnectionData<D> = {\n  ConnectionView: React.FunctionComponent;\n  connectionText: string;\n};\n\nexport class RootStoreModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> {\n  constructor(d: { builders: DataBuilder<D, G, C> }) {\n    this.builders = d.builders;\n    this.globalData = d.builders.graphBuilder(this);\n  }\n\n  // Builders to create graph, node and transition instances\n  builders: DataBuilder<D, G, C>;\n  // Global generic data\n  globalData: G;\n\n  // All nodes\n  @observable\n  nodes: ObservableMap<string, NodeModel<D, G, C>> = observable.map({});\n  // Selected node\n  @observable\n  selection?: NodeModel<D, G, C>;\n  // Selected connection\n  @observable\n  selectedConnection?: ConnModel<D, G, C>;\n  // Selected input for transition\n  @observable\n  selectingInputFor?: NodeModel<D, G, C>;\n\n  // Select a node\n  @action\n  selectNode = (operation: NodeModel<D, G, C>) => {\n    this.selection = operation;\n  };\n\n  // Select a connection\n  @action\n  selectConnection = (connection: ConnModel<D, G, C>) => {\n    this.selectedConnection = connection;\n  };\n\n  // Add a node\n  @action\n  addNode = (\n    nodeType: string,\n    pos?: { x: number; y: number }\n  ): NodeModel<D, G, C> | undefined => {\n    if (this.globalData.canAddNode(nodeType)) {\n      const dataBuilder = this.builders.nodeBuilder[nodeType];\n      if (dataBuilder !== undefined) {\n        const op = new NodeModel(this, {\n          dataBuilder,\n          key: v4(),\n          name: nodeType,\n          x: pos?.x ?? 100,\n          y: pos?.y ?? 100,\n        });\n        this.nodes.set(op.key, op);\n        return op;\n      }\n    }\n  };\n\n  // Select a node\n  @action\n  selectingInput = (from: NodeModel<D, G, C>) => {\n    this.selectingInputFor = from;\n    window.addEventListener(\"keyup\", this._selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (to: NodeModel<D, G, C>): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      this.selectingInputFor!,\n      to,\n      this.builders.connectionBuilder\n    );\n    conn.from.addOutput(conn);\n    this.selectingInputFor = undefined;\n    this.selectedConnection = conn;\n    return conn;\n  };\n\n  @action\n  private _selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    }\n  };\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport styled from \"styled-components\";\nimport { resizableEnable } from \"../utils\";\nimport { useStore } from \"../App\";\n\nconst MainList = styled.ul`\n  overflow-y: scroll;\n  height: 100%;\n  margin: 0;\n  padding: 0px 10px 25px;\n\n  .group {\n    padding-left: 10px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    border-top: 2px solid #eee;\n    margin-top: 6px;\n    .MuiListItemText-primary {\n      font-weight: bold;\n    }\n  }\n  .nested {\n    padding-left: 25px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`;\n\ntype Props = { items: { [key: string]: string[] } | string[] };\n\nexport const MainMenu: React.FC<Props> = observer(({ items }) => {\n  const rootStore = useStore();\n  return (\n    <Rnd\n      disableDragging={true}\n      maxWidth={300}\n      minWidth={200}\n      style={{\n        position: \"relative\",\n        maxHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n      enableResizing={resizableEnable({\n        right: true,\n      })}\n    >\n      <input type=\"text\" />\n      <MainList>\n        <List component=\"nav\">\n          {Array.isArray(items)\n            ? items.map((t) => (\n                <ListItem\n                  button\n                  key={t}\n                  className=\"nested\"\n                  onClick={() => {\n                    rootStore.addNode(t);\n                  }}\n                >\n                  <ListItemText primary={t} />\n                </ListItem>\n              ))\n            : Object.entries(items).map(([name, list]) => (\n                <Item key={name} name={name} list={list} />\n              ))}\n        </List>\n      </MainList>\n    </Rnd>\n  );\n});\n\ntype ItemProps = { name: string; list: string[] };\n\nexport const Item: React.FC<ItemProps> = observer(({ name, list }) => {\n  const [open, setOpen] = React.useState(true);\n  const rootStore = useStore();\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)} className=\"group\">\n        <ListItemText primary={name} />\n        <FontAwesomeIcon icon={open ? \"chevron-up\" : \"chevron-down\"} />\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {list.map((t) => (\n            <ListItem\n              button\n              key={t}\n              className=\"nested\"\n              onClick={() => {\n                rootStore.addNode(t);\n              }}\n            >\n              <ListItemText primary={t} />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n    </>\n  );\n});","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { NodeModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\ntype Props<D extends NodeData<D, any, any>> = {\n  self: NodeModel<D, any, any>;\n};\n\nexport const PropertiesTable = observer(\n  <D extends NodeData<D, any, any>>({ self }: Props<D>) => {\n    const rootStore = useStore();\n    const fullOfInputs = self.inputs.length >= self.data.nInputs;\n    const isAddingInput = rootStore.selectingInputFor !== undefined;\n    return (\n      <PropertiesTableStyled>\n        <thead>\n          <tr>\n            <td>Property</td>\n            <td>Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          {self.data.nInputs !== 0 && (\n            <tr>\n              <td>Inputs</td>\n              <td>\n                {self.inputs.map((v) => (\n                  <div\n                    onClick={() => rootStore.selectConnection(v as any)}\n                    key={v.from.key}\n                  >\n                    {v.from.name}\n                  </div>\n                ))}\n                {!fullOfInputs && (\n                  <div\n                    onClick={() => rootStore.selectingInput(self as any)}\n                    style={\n                      isAddingInput\n                        ? { background: \"#eee\" }\n                        : { cursor: \"pointer\" }\n                    }\n                  >\n                    Add Transition\n                  </div>\n                )}\n              </td>\n            </tr>\n          )}\n          {Object.entries(self.data.spec).map(([k, v]) => (\n            <tr key={k}>\n              <td>{k}</td>\n              <td>\n                <v.plotField name={k} model={self.data as any} />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </PropertiesTableStyled>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  padding-bottom: 10px;\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTable } from \"./properties-table\";\nimport { useStore } from \"../App\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  let inner;\n  if (rootStore.selection != null) {\n    const operation = rootStore.selection;\n    inner = (\n      <div\n        style={{\n          overflow: \"auto\",\n          maxHeight: \"100%\",\n          maxWidth: \"100%\",\n        }}\n        key={rootStore.selection.key}\n        className=\"row\"\n      >\n        <div style={{ padding: \"15px\" }}>\n          <input\n            type=\"text\"\n            value={operation.name}\n            onInput={(e) => operation.setName(e.currentTarget.value)}\n            onChange={() => {}}\n          ></input>\n          <PropertiesTable self={rootStore.selection} />\n        </div>\n        <div>\n          <pre>\n            {rootStore.selectedConnection !== undefined && (\n              <rootStore.selectedConnection.data.ConnectionView />\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  } else {\n    inner = (\n      <div className=\"row\">\n        <div className=\"center\">Not Selected</div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      defaultSize={{ height: 280, width: \"auto\" }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","import {\n  EnclosingStep,\n  MacroStep,\n  SimpleStep,\n  InitialStep,\n  GemmaGraphcet,\n  StepType,\n  Transition,\n} from \"./gemma\";\n\nclass H {\n  static textOrEmpty = (cond: boolean, text: string) => (cond ? text : \"\");\n}\n\nconst templateTransitions = (\n  transitions: Transition[],\n  { isNested }: { isNested: boolean }\n) => {\n  return `\\\n${transitions\n  .map((t, index) => {\n    return `\n${index === 0 ? \"IF\" : \"ELSEIF\"} ${t.condition.expression} THEN\n  State:=${t.to.id};\\\n  ${isNested ? \"\\n  Entry:=TRUE;\" : \"\"}`;\n  })\n  .join(\"\\n\")}\\\n${transitions.length === 0 ? \"\" : \"\\nEND_IF\"}`;\n};\n\nconst templateGemmaGraphcetSimpleStep = (\n  model: SimpleStep | InitialStep\n): string => {\n  return templateTransitions(model.transitions, { isNested: false });\n};\n\nconst templateFBEntry = (model: MacroStep | EnclosingStep): string => `\\\nIF Entry THEN\n  ${model.name}(Initialization:=ENTRY);\n  Entry:=FALSE;\nEND_IF\n${model.name}(Initialization:=ENTRY);`;\n\nconst templateGemmaGraphcetMacroStep = (model: MacroStep): string => {\n  const transitions = model.transitions;\n  return `\n${templateFBEntry(model)}\n\n${transitions\n  .map((t, index) => {\n    return `\\\n${index === 0 ? \"IF\" : \"ELSEIF\"} ${t.condition.expression}${\n      transitions.length - model.innerTransitionsLength <= index\n        ? ` AND ${model.name}.Complete`\n        : \"\"\n    } THEN\n  State:=${t.to.id};\n  Entry:=TRUE;`;\n  })\n  .join(\"\\n\")}\\\n${H.textOrEmpty(transitions.length !== 0, \"\\nEND_IF\")}`;\n};\n\nconst templateGemmaGraphcetEnclosingStep = (model: EnclosingStep): string => {\n  return `\\\n${templateFBEntry(model)}\n\n${templateTransitions(model.transitions, { isNested: true })}`;\n};\n\nexport const templateGemmaGraphcet = (model: GemmaGraphcet): string => {\n  return `\n// Variable declaration\nVAR\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .map((s) => `  ${s.name}:${s.name}_FB;`)\n  .join(\"\\n\")}\n\n  State:UINT:=${model.initialStep?.id};\n  Entry:BOOL:=TRUE;\nEND_VAR\n\n// Program behavior\nCASE State OF\n  ${model.steps\n    .map((step) => {\n      return `\n  ${step.id}: //State ${step.name}\n    ${(() => {\n      switch (step.type) {\n        case StepType.ENCLOSING:\n          return templateGemmaGraphcetEnclosingStep(step);\n        case StepType.INITIAL:\n        case StepType.SIMPLE:\n          return templateGemmaGraphcetSimpleStep(step);\n        case StepType.MACRO:\n          return templateGemmaGraphcetMacroStep(step);\n      }\n    })().replace(/\\n/g, \"\\n    \")}\n  `;\n    })\n    .join(\"\\n\")}\nEND_CASE\n`;\n};\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n\n  constructor(v: { choices: C; default: K }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n\n    if (keys.length > 3) {\n      return (\n        <Select\n          value={model[name]}\n          onChange={(e) => {\n            model[name] = e.target.value as any;\n          }}\n          autoWidth={true}\n        >\n          {keys.map((k) => {\n            return (\n              <MenuItem key={k} value={k}>\n                {k}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      );\n    } else {\n      return (\n        <ButtonsDiv key={name}>\n          <ButtonGroup\n            size=\"small\"\n            color=\"primary\"\n            aria-label=\"outlined primary button group\"\n          >\n            {keys.map((k) => {\n              const buttonStyle =\n                k === (model[name] as any)\n                  ? { background: \"#3f51b5\", color: \"white\" }\n                  : {};\n\n              return (\n                <Button\n                  key={k}\n                  onClick={() => {\n                    model[name] = k as any;\n                  }}\n                  style={buttonStyle}\n                >\n                  {k}\n                </Button>\n              );\n            })}\n          </ButtonGroup>\n        </ButtonsDiv>\n      );\n    }\n  });\n}\n","import { templateGemmaGraphcet } from \"./gemma-templates\";\nimport { NodeData, NodeModel, ConnModel } from \"../node/node-model\";\nimport { GlobalData, RootStoreModel, DataBuilder } from \"../canvas/store\";\nimport { computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { FieldSpec, StrFieldSpec, ChoiceFieldSpec } from \"../fields\";\nimport { listToMap } from \"../utils\";\n\nenum StepType {\n  ENCLOSING = \"ENCLOSING\",\n  INITIAL = \"INITIAL\",\n  MACRO = \"MACRO\",\n  SIMPLE = \"SIMPLE\",\n}\n\nclass GemmaGraphcet implements GlobalData<Step> {\n  constructor(private graph: RootStoreModel<Step, GemmaGraphcet, Transition>) {}\n\n  canAddNode(nodeType: string): boolean {\n    if (nodeType === StepType.INITIAL) {\n      return !this._hasInitialStep();\n    }\n    return true;\n  }\n\n  private _hasInitialStep(): boolean {\n    return [...this.graph.nodes.values()].some(\n      (n) => n.data.type === StepType.INITIAL\n    );\n  }\n\n  workingFamilyTransitions: Transition[] = [];\n\n  @computed\n  get steps(): Step[] {\n    return [...this.graph.nodes.values()].map((node) => node.data);\n  }\n\n  signals: Signal[] = [];\n\n  @computed\n  get initialStep(): Step | undefined {\n    return this.steps.find((s) => s.type === StepType.INITIAL);\n  }\n\n  generateCode = (): string => {\n    return templateGemmaGraphcet(this);\n  };\n}\n\nclass Signal {\n  name: string;\n  description?: string;\n\n  constructor(d: { name: string; description?: string }) {\n    this.name = d.name;\n    this.description = d.description;\n  }\n}\n\nexport type Step = SimpleStep | EnclosingStep | MacroStep | InitialStep;\n\ntype GemmaNode = NodeModel<Step, GemmaGraphcet, Transition>;\ntype GemmaConn = ConnModel<Step, GemmaGraphcet, Transition>;\n\n\nenum ProcedureType {\n  F = \"F\", // Operational\n  D = \"D\", // Failure\n  A = \"A\", // Stop\n}\n\nabstract class BaseStep implements NodeData<Step, GemmaGraphcet, Transition> {\n  nInputs = Number.POSITIVE_INFINITY;\n  errors = observable.map<string, string>();\n\n  constructor(\n    private node: GemmaNode,\n    d?: {\n      description?: string;\n      family: ProcedureType;\n    }\n  ) {\n    this.description = d?.description ?? \"\";\n    this.family = d?.family ?? ProcedureType.F;\n  }\n\n  @computed\n  get name(): string {\n    return this.node.name;\n  }\n  @observable\n  description: string;\n  @observable\n  family: ProcedureType;\n\n  get automationSystem(): GemmaGraphcet {\n    return this.node.graph.globalData;\n  }\n\n  @computed\n  private get _transitions(): Transition[] {\n    return this.node.outputs.map((t) => t.data);\n  }\n  @computed\n  get innerTransitionsLength(): number {\n    return this._transitions.length;\n  }\n  @computed\n  get transitions(): Transition[] {\n    return this.family === ProcedureType.F\n      ? this.automationSystem.workingFamilyTransitions.concat(this._transitions)\n      : this._transitions;\n  }\n  @computed\n  get id(): number {\n    return this.automationSystem.steps.indexOf(this as any) + 1;\n  }\n\n  spec = {\n    family: new ChoiceFieldSpec({\n      default: ProcedureType.F,\n      choices: listToMap(Object.values(ProcedureType)),\n    }),\n    description: new StrFieldSpec({ default: \"\" }),\n  };\n\n  isValidInput(n: GemmaNode): boolean {\n    return this.node.inputNodes.every((t) => t.data !== n.data);\n  }\n}\n\nclass SimpleStep extends BaseStep {\n  type = StepType.SIMPLE;\n}\n\nclass InitialStep extends BaseStep {\n  type = StepType.INITIAL;\n}\n\nclass EnclosingStep extends BaseStep {\n  type = StepType.ENCLOSING;\n}\n\nclass MacroStep extends BaseStep {\n  type = StepType.MACRO;\n}\n\nclass Transition {\n  name: string;\n  // condition: Condition;\n  @computed\n  get condition(): Condition {\n    return new Condition(this.conditionExpression);\n  }\n  @observable\n  conditionExpression: string;\n  errors = observable.map<string, string>();\n\n  spec: { [key: string]: FieldSpec } = {\n    conditionExpression: new StrFieldSpec({ default: \"\" }),\n  };\n\n  constructor(\n    private connection: GemmaConn,\n    d?: {\n      name: string;\n      condition: Condition;\n    }\n  ) {\n    this.name = d?.name ?? \"\";\n    // this.condition = d?.condition ?? new Condition(\"\");\n    this.conditionExpression =\n      d?.condition.expression ?? this.spec[\"conditionExpression\"].default;\n    console.log(this.conditionExpression);\n  }\n\n  get from(): Step {\n    return this.connection.from.data;\n  }\n\n  get to(): Step {\n    return this.connection.to.data;\n  }\n\n  @computed\n  get connectionText(): string {\n    return this.conditionExpression;\n  }\n\n  ConnectionView = observer(() => {\n    return (\n      <>\n        <div>{`${this.connection.from.name} -> ${this.connection.to.name}`}</div>\n        {Object.entries(this.spec).map(([k, v]) => (\n          <tr key={k}>\n            <td>{k}</td>\n            <td>{<v.plotField name={k} model={this as any} />}</td>\n          </tr>\n        ))}\n      </>\n    );\n  });\n}\n\nclass Condition {\n  constructor(public expression: string) {}\n}\n\nconst gemmaBuilders: DataBuilder<Step, GemmaGraphcet, Transition> = {\n  graphBuilder: (g) => new GemmaGraphcet(g),\n  nodeBuilder: {\n    [StepType.SIMPLE]: (n) => new SimpleStep(n),\n    [StepType.MACRO]: (n) => new MacroStep(n),\n    [StepType.ENCLOSING]: (n) => new EnclosingStep(n),\n    [StepType.INITIAL]: (n) => new InitialStep(n),\n  },\n  connectionBuilder: (c) => new Transition(c),\n};\n\nexport {\n  Condition,\n  Transition,\n  MacroStep,\n  EnclosingStep,\n  Signal,\n  SimpleStep,\n  GemmaGraphcet,\n  InitialStep,\n  ProcedureType,\n  StepType,\n  BaseStep,\n  gemmaBuilders,\n};\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n\n  constructor(v: { default: string; maxLength?: number; minLength?: number }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          setValue(value as any);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","import React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { ConfigView } from \"./canvas/config-view\";\nimport { RootStoreModel, GlobalData, ConnectionData } from \"./canvas/store\";\nimport { MainMenu } from \"./graph-menu/main-menu\";\nimport { NodeData, ConnModel } from \"./node/node-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\nimport {\n  GemmaGraphcet,\n  ProcedureType,\n  Transition,\n  Step,\n  Condition,\n  gemmaBuilders,\n  StepType,\n} from \"./step/gemma\";\n\nconst rootStore = new RootStoreModel<Step, GemmaGraphcet, Transition>({\n  builders: gemmaBuilders,\n});\n\nconst s1 = rootStore.addNode(StepType.INITIAL, { x: 72, y: 60 });\nconst s2 = rootStore.addNode(StepType.MACRO, { x: 261, y: 170 });\n\nconst _t = new ConnModel(\n  s1!,\n  s2!,\n  (c) =>\n    new Transition(c, {\n      name: \"Emergency\",\n      condition: new Condition(\"I1 & I2\"),\n    })\n);\nrootStore.globalData.workingFamilyTransitions.push(_t.data);\n\n[\n  s1,\n  s2,\n  rootStore.addNode(StepType.ENCLOSING, { x: 441, y: 316 }),\n  rootStore.addNode(StepType.SIMPLE, { x: 211, y: 410 }),\n  rootStore.addNode(StepType.SIMPLE, { x: 441, y: 500 }),\n].forEach((s, index) => s?.setName(`S${index + 1}`));\n\ns1!.data.family = ProcedureType.A;\ns2!.data.family = ProcedureType.D;\n\nexport const storeContext = React.createContext<RootStoreModel<\n  any,\n  any,\n  any\n> | null>(null);\n\nexport function useStore<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>() {\n  const store = React.useContext<RootStoreModel<D, G, C> | null>(storeContext);\n  if (!store) {\n    throw Error(\"useStore should be used inside a Store provider.\");\n  }\n  return store;\n}\n\nexport function App() {\n  return (\n    <storeContext.Provider value={rootStore}>\n      <div\n        className=\"row\"\n        style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n      >\n        <MainMenu items={Object.keys(rootStore.builders.nodeBuilder)} />\n        <div\n          className=\"col\"\n          style={{ width: \"100%\", background: \"rgba(250,250,250,0.7)\" }}\n        >\n          <div className=\"row\" style={{ minHeight: 0, flex: 1 }}>\n            <MainCanvas />\n            <ConfigView />\n          </div>\n          <PropertiesView />\n        </div>\n      </div>\n    </storeContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}