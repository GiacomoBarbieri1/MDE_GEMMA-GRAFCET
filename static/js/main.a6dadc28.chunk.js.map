{"version":3,"sources":["node/node.tsx","canvas/arrow.tsx","canvas/canvas.tsx","utils.ts","canvas/config-view.tsx","canvas/persistence.ts","node/node-model.tsx","canvas/store.tsx","properties/properties-table.tsx","properties/properties-view.tsx","fields/choice-field.tsx","step/step.tsx","fields/primitive-field.tsx","step/gemma-templates.ts","grammar/SimpleBooleanLexer.ts","grammar/SimpleBooleanParser.ts","step/gemma.tsx","step/antlr_parser.ts","step/custom_parser.ts","step/transition.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledNode","styled","div","NodeView","observer","node","rootStore","useStore","onDrag","React","useCallback","_","data","move","deltaX","deltaY","selectingInput","undefined","selectingInputFor","isValidInput","isSelected","selectedNode","onClick","console","log","assignInput","selectNode","x","y","style","position","bounds","ref","e","setSize","getBoundingClientRect","View","triangleFromCenter","height","width","y0","ArrowView","changeX","changeY","connection","from","to","x1","y1","x2","y2","dy","dx","m","Math","abs","xa","ya","xm","ym","degrees","atan2","PI","strokeWidth","stroke","d","selectConnection","RectAndText","text","connectionText","rectFill","transform","padding","useState","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","fill","cursor","MainCanvas","ops","nodes","values","overflow","flex","border","background","margin","borderRadius","map","operation","key","flatMap","op","inputs","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","reduce","p","k","v","importJson","event","files","target","Promise","resolve","file","type","window","alert","reader","FileReader","onload","result","onabort","onerror","readAsText","DBStores","ConfigView","connections","c","forEach","get","set","push","Map","orderedOps","counts","filter","withDependencies","length","numProcessed","size","slice","outs","dep","delete","minWidth","defaultSize","boxShadow","enable","globalData","generateCode","a","openDB","upgrade","db","createObjectStore","graph","keyPath","autoIncrement","createIndex","IndexedDB","getKeyFromConnection","path","connectionWithKey","graphKey","assign","this","getAll","value","put","tx","transaction","objectStore","dbKey","index","openCursor","continue","done","all","getAllFromIndex","_g","n","store","add","updateMany","close","clear","keys","items","val","Error","item","ConnModel","dataBuilder","json","selectedConnection","toJson","computed","NodeModel","name","conn","outputs","observable","array","action","rect","RootStoreModel","builders","graphBuilder","v4","nodeBuilder","addConnection","_in","remove","_out","clearDB","updateGraph","addNodes","addConnections","t","content","fileName","contentType","document","createElement","Blob","href","URL","createObjectURL","download","click","downloadToClient","JSON","stringify","nodeType","pos","canAddNode","addEventListener","_selectingInputKeyListener","connectionBuilder","addOutput","removeEventListener","ev","PropertiesTable","children","PropertiesTableStyled","PropertiesTableNode","self","fullOfInputs","nInputs","isAddingInput","spec","plotField","model","table","PropertiesView","inner","maxHeight","maxWidth","justifyContent","backgroundColor","display","className","alignItems","TextField","onChange","setName","IconButton","removeNode","icon","color","removeConnection","ConnectionView","minHeight","StepType","ProcedureType","ButtonsDiv","ChoiceFieldSpec","choices","default","isObservableMap","Symbol","toStringTag","mobxProp","types","optional","string","Array","setValue","ChoiceField","Select","autoWidth","MenuItem","ButtonGroup","aria-label","buttonStyle","Button","StrFieldSpec","maxLength","minLength","errors","inputProps","textAlign","error","fullWidth","BaseStep","l","Number","POSITIVE_INFINITY","family","F","toString","description","innerStyle","ENCLOSING","MACRO","borderRight","borderLeft","INITIAL","inputNodes","every","sort","b","priority","_transitions","automationSystem","workingFamilyTransitions","concat","steps","indexOf","SimpleStep","SIMPLE","InitialStep","EnclosingStep","MacroStep","H","textOrEmpty","cond","templateTransitions","transitions","isNested","condition","expression","join","templateFBEntry","templateGemmaGraphcet","s","initialStep","step","templateGemmaGraphcetEnclosingStep","templateGemmaGraphcetSimpleStep","innerTransitionsLength","templateGemmaGraphcetMacroStep","replace","SimpleBooleanLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","AND","OR","NOT","TRUE","FALSE","GT","GE","LT","LE","EQ","LPAREN","RPAREN","DECIMAL","IDENTIFIER","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","SimpleBooleanParser","ParserATNSimulator","_localctx","ParseContext","_ctx","state","enterRule","RULE_parse","enterOuterAlt","match","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","ExpressionContext","RULE_expression","sync","interpreter","adaptivePredict","_input","NotExpressionContext","OrExpressionContext","_left","expressionAnd","_right","AndParentExpressionContext","ExpressionAndContext","RULE_expressionAnd","AndExpressionContext","expressionSimple","SimpleExpressionContext","ExpressionSimpleContext","RULE_expressionSimple","ComparatorExpressionContext","numExpression","_op","comparator","IdentifierExpressionContext","ParenExpressionContext","NumExpressionContext","RULE_numExpression","LA","IdentifierNumExpressionContext","DecimalExpressionContext","NoViableAltException","_la","ComparatorContext","RULE_comparator","recoverInline","Token","matchedEOF","reportMatch","consume","Parser","SignalType","parent","invokingState","getRuleContext","getToken","listener","enterParse","exitParse","visitor","visitParse","visitChildren","ParserRuleContext","ctx","copyFrom","enterNotExpression","exitNotExpression","visitNotExpression","enterOrExpression","exitOrExpression","visitOrExpression","enterAndParentExpression","exitAndParentExpression","visitAndParentExpression","enterAndExpression","exitAndExpression","visitAndExpression","enterSimpleExpression","exitSimpleExpression","visitSimpleExpression","i","getRuleContexts","enterComparatorExpression","exitComparatorExpression","visitComparatorExpression","enterIdentifierExpression","exitIdentifierExpression","visitIdentifierExpression","enterParenExpression","exitParenExpression","visitParenExpression","enterIdentifierNumExpression","exitIdentifierNumExpression","visitIdentifierNumExpression","enterDecimalExpression","exitDecimalExpression","visitDecimalExpression","tryGetToken","enterComparator","exitComparator","visitComparator","ErrorVisitor","signals","isInvalid","aggregate","nextResult","boolSignals","includes","numSignals","AbstractParseTreeVisitor","VarId","Transition","bound","conditionExpression","priorityChoices","setPriority","ConditionInput","expressionErrors","marginTop","err","Condition","substring","gemma","inputStream","CharStreams","fromString","lexer","tokenStream","CommonTokenStream","tree","parse","countFunctionsVisitor","visit","toProcess","curr","pop","childCount","getChild","parseBoolExpression","parseInt","_tokens","omit","signal","addSignal","prevToken","strPrev","getCustomTokens","prevIndex","_spanStyleRef","useRef","sharedStyle","font","whiteSpace","textIndex","repeat","onScroll","current","scrollTo","currentTarget","scrollTop","caretColor","resize","spellCheck","onSelect","GemmaGraphcet","flexDirection","label","defaultValue","alignSelf","Signal","isArray","fromJson","_hasInitialStep","some","bool","find","gemmaBuilders","g","makeBaseGemmaTemplate","nodesRaw","A","A6","A1","A2","A3","A4","A5","A7","D","D1","D2","D3","F1","F2","F3","F4","F5","F6","nn","addNode","_t","a1","storeContext","createContext","useContext","App","globalDB","setDB","setStore","_isReset","resetStore","createIndexedDB","then","fetchGraphs","graphs","loadGraph","graphExt","_store","Provider","saveModel","downloadModel","htmlFor","accept","Boolean","location","hostname","library","faChevronDown","faChevronUp","faTrashAlt","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a6dadc28.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { NodeModel } from \"./node-model\";\nimport { useStore } from \"../App\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledNode = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  background: #fff;\n  border-radius: 6;\n  border: 1.5px solid;\n`;\n\ntype NodeViewProps = { node: NodeModel<any, any, any> };\nexport const NodeView: React.FC<NodeViewProps> = observer(({ node }) => {\n  const rootStore = useStore();\n  const onDrag = React.useCallback(\n    (_: DraggableEvent, data: DraggableData) => {\n      node.move(data.deltaX, data.deltaY);\n    },\n    [node]\n  );\n  const selectingInput = rootStore.selectingInputFor !== undefined;\n  const isValidInput =\n    selectingInput && rootStore.selectingInputFor!.data.isValidInput(node);\n  const isSelected = rootStore.selectedNode === node;\n\n  const onClick = React.useCallback(\n    (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      console.log(node);\n      if (selectingInput) {\n        if (isValidInput) {\n          rootStore.assignInput(node);\n        }\n      } else {\n        rootStore.selectNode(node);\n      }\n    },\n    [rootStore, node, selectingInput, isValidInput]\n  );\n  // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n  const { x, y } = node;\n\n  let style: React.CSSProperties = {};\n  if (isSelected) {\n    style[\"boxShadow\"] = \"rgb(110 110 110) 1px 1.5px 3px 1px\";\n  }\n  if (selectingInput) {\n    style[\"cursor\"] = isValidInput ? \"pointer\" : \"not-allowed\";\n  }\n\n  return (\n    <Draggable onDrag={onDrag} position={{ x, y }} bounds=\"parent\">\n      <StyledNode\n        ref={(e) => {\n          if (e === null) return;\n          node.setSize(e.getBoundingClientRect());\n        }}\n        onClick={onClick}\n        style={style}\n      >\n        <node.data.View />\n      </StyledNode>\n    </Draggable>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NodeModel, ConnModel } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\nexport type ArrowModel = {\n  from: NodeModel<any, any, any>;\n  to: NodeModel<any, any, any>;\n};\n\ntype ArrowViewProps = { connection: ConnModel<any, any, any> };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ connection }: ArrowViewProps) => {\n    const rootStore = useStore();\n    const { from, to, isSelected } = connection;\n\n    const [x1, y1, x2, y2] = [\n      from.x + from.width / 2,\n      from.y + from.height / 2,\n      to.x + to.width / 2,\n      to.y + to.height / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onClick={(e) => {\n            rootStore.selectConnection(connection);\n          }}\n        />\n        <RectAndText\n          text={connection.data.connectionText}\n          x={xm}\n          rectFill={isSelected ? \"#eeedff\": \"#eee\"}\n          y={ym}\n          onClick={(_) => rootStore.selectConnection(connection)}\n        />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n  onClick: (event: React.MouseEvent<any, MouseEvent>) => void;\n}> = observer(\n  ({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3, onClick }) => {\n    const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n    const [prev, setPrev] = React.useState(text);\n    const bbox = textRef?.getBBox();\n    React.useEffect(() => {\n      if (prev !== text) {\n        const id = setTimeout(() => setPrev(text), 0);\n        return () => clearTimeout(id);\n      }\n    });\n\n    return (\n      <>\n        {bbox !== undefined && (\n          <rect\n            width={bbox.width + padding * 2}\n            height={bbox.height + padding * 2}\n            x={xm - bbox.width / 2 - padding}\n            y={ym - bbox.height + padding}\n            fill={rectFill}\n            onClick={onClick}\n            style={{ cursor: \"pointer\" }}\n          ></rect>\n        )}\n        <text\n          x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n          y={ym}\n          fill=\"black\"\n          ref={setTextRef}\n          onClick={onClick}\n          style={{ cursor: \"pointer\" }}\n        >\n          {text}\n        </text>\n      </>\n    );\n  }\n);\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeView } from \"../node/node\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  const ops = [...rootStore.nodes.values()];\n  return (\n    <div style={{ overflow: \"auto\", flex: \"1\" }}>\n      <div\n        style={{\n          position: \"relative\",\n          border: \"1px solid #eee\",\n          background: \"#fff\",\n          margin: \"10px\",\n          borderRadius: \"6px\",\n          flex: 1,\n          height: \"1500px\",\n          width: \"1500px\",\n        }}\n      >\n        {ops.map((operation) => {\n          console.log(operation);\n          return <NodeView node={operation} key={operation.key} />;\n        })}\n        <svg style={{ width: \"100%\", height: \"100%\" }}>\n          {ops\n            .flatMap((op) => op.inputs)\n            .map((connection) => (\n              <ArrowView\n                connection={connection}\n                key={connection.from.key + connection.to.key}\n              />\n            ))}\n        </svg>\n      </div>\n    </div>\n  );\n});\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce(\n    (p, [k, v]) => {\n      if (v !== undefined) {\n        p[k as keyof typeof defaultResizeEnable] = v;\n      }\n      return p;\n    },\n    { ...defaultResizeEnable }\n  );\n}\n\nexport function downloadToClient(\n  content: BlobPart,\n  fileName: string,\n  contentType: string\n) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: contentType });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function importJson(\n  event: React.ChangeEvent<HTMLInputElement>\n): Promise<string | ArrayBuffer | null | undefined> {\n  const files = event.target.files;\n  return new Promise((resolve, _) => {\n    if (files !== null) {\n      const file = files[0];\n      if (file.type !== \"application/json\") {\n        window.alert(\n          \"Debes seleccionar un archivo válido, la extensión debe ser '.json'.\"\n        );\n        return resolve(undefined);\n      }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          resolve(e.target?.result);\n        };\n        reader.onabort = (e) => {\n          resolve(undefined);\n        };\n        reader.onerror = (e) => {\n          resolve(undefined);\n        };\n        reader.readAsText(file);\n    } else {\n      resolve(undefined);\n    }\n  });\n}\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeModel } from \"../node/node-model\";\nimport { resizableEnable } from \"../utils\";\nimport { GlobalData } from \"./store\";\n\ntype Props = {};\n\nexport const ConfigView: React.FC<Props> = observer(<\n  G extends GlobalData<any>\n>() => {\n  const rootStore = useStore<any, G, any>();\n  const ops = [...rootStore.nodes.values()];\n  const connections = ops.reduce((p, c) => {\n    c.inputs.forEach((v) => {\n      let m = p.get(v.to);\n      if (m === undefined) {\n        m = [];\n        p.set(v.to, m);\n      }\n      m.push(c);\n    });\n    return p;\n  }, new Map<NodeModel<any, any, any>, NodeModel<any, any, any>[]>());\n\n  const orderedOps: NodeModel<any, any, any>[] = [];\n  const counts = new Map(\n    ops\n      .filter((op) => {\n        const withDependencies = op.data.length !== 0;\n        if (!withDependencies) {\n          orderedOps.push(op);\n        }\n        return withDependencies;\n      })\n      .map((op) => [op, op.data.length])\n  );\n  let numProcessed = 0;\n  while (counts.size !== 0 && orderedOps.length !== numProcessed) {\n    for (let k of orderedOps.slice(numProcessed)) {\n      numProcessed += 1;\n      const outs = connections.get(k);\n      if (outs === undefined) continue;\n\n      for (let dep of outs) {\n        const m = counts.get(dep)!;\n        if (m === 1) {\n          counts.delete(dep);\n          orderedOps.push(dep);\n        } else {\n          counts.set(dep, m - 1);\n        }\n      }\n    }\n  }\n\n  if (counts.size !== 0) {\n    // CICLE ?\n  }\n\n  return (\n    <Resizable\n      minWidth={200}\n      defaultSize={{ height: \"auto\", width: 250 }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ left: true })}\n    >\n      <div style={{ overflow: \"auto\", height: \"100%\", padding: \"0 10px\" }}>\n        <pre>{rootStore.globalData.generateCode()}</pre>\n        {/* {ops.map((op) => {\n          return (\n            <pre key={op.key}>\n              {op.name + \" = \" + op.data.pythonCode + \"\\n\"}\n            </pre>\n          );\n        })}\n\n        {orderedOps.map((op) => {\n          if (op.data.inputs.length > 0) {\n            return (\n              <pre key={op.key + \"input\"}>\n                {`${op.name}_output = ${op.name}(${op.inputs\n                  .map((inp) => inp.to.name)\n                  .join(\",\")});`}\n              </pre>\n            );\n          }\n          return null;\n        })} */}\n      </div>\n    </Resizable>\n  );\n});\n","import { DBSchema, IDBPDatabase, openDB } from \"idb\";\nimport { JsonType } from \"./store\";\n\nconst DB_NAME = \"GemmaGrafcet\";\nenum DBStores {\n  graph = \"graph\",\n  node = \"node\",\n  connection = \"connection\",\n}\n\nexport type GraphJson = {\n  key: string;\n  data: JsonType;\n};\n\nexport type NodeJson = {\n  key: string;\n  name: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  data: JsonType;\n};\n\ntype _NodeJson = NodeJson & {\n  graphKey: string;\n};\n\nexport type ConnectionJson = {\n  from: string;\n  to: string;\n  data: JsonType;\n};\n\ntype _ConnectionJson = ConnectionJson & {\n  key: string;\n  graphKey: string;\n};\n\ninterface MyDB extends DBSchema {\n  [DBStores.graph]: {\n    key: string;\n    value: GraphJson;\n  };\n  [DBStores.node]: {\n    key: string;\n    value: _NodeJson;\n    indexes: { \"by-graph\": string };\n  };\n  [DBStores.connection]: {\n    key: string;\n    value: _ConnectionJson;\n    indexes: { \"by-graph\": string };\n  };\n}\n\nexport async function createIndexedDB() {\n  const db = await openDB<MyDB>(DB_NAME, 1, {\n    upgrade(db) {\n      db.createObjectStore(DBStores.graph, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n\n      const nodeStore = db.createObjectStore(DBStores.node, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      nodeStore.createIndex(\"by-graph\", \"graphKey\");\n\n      const connStore = db.createObjectStore(DBStores.connection, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      connStore.createIndex(\"by-graph\", \"graphKey\");\n    },\n  });\n  return new IndexedDB(db);\n}\n\nexport function sameKeys(path: ConnectionJson, path2: ConnectionJson) {\n  return getKeyFromConnection(path) === getKeyFromConnection(path2);\n}\n\nexport function getKeyFromConnection(path: ConnectionJson) {\n  return `${path.from}_${path.to}`;\n}\n\nexport function connectionWithKey(\n  graphKey: string,\n  path: ConnectionJson\n): _ConnectionJson {\n  return Object.assign(path, { key: getKeyFromConnection(path), graphKey });\n}\n\nexport class IndexedDB {\n  constructor(private db: IDBPDatabase<MyDB>) {}\n\n  //\n  // GRAPHS\n  //\n\n  fetchGraphs() {\n    return this.db.getAll(DBStores.graph);\n  }\n\n  updateGraph(value: GraphJson) {\n    return this.db.put(DBStores.graph, value);\n  }\n\n  async deleteGraph(graphKey: string) {\n    const tx = this.db.transaction(\n      [DBStores.graph, DBStores.node, DBStores.connection],\n      \"readwrite\"\n    );\n    tx.objectStore(DBStores.graph).delete(graphKey);\n    for (const dbKey of [DBStores.node, DBStores.connection] as Array<\n      DBStores.node | DBStores.connection\n    >) {\n      let cursor = await tx\n        .objectStore(dbKey)\n        .index(\"by-graph\")\n        .openCursor(graphKey);\n      while (cursor) {\n        cursor.delete();\n        cursor = await cursor.continue();\n      }\n    }\n    await tx.done;\n  }\n\n  async loadGraph(graphKey: string) {\n    const [nodes, connections] = await Promise.all([\n      this.db.getAllFromIndex(DBStores.node, \"by-graph\", graphKey),\n      this.db.getAllFromIndex(DBStores.connection, \"by-graph\", graphKey),\n    ]);\n\n    return { nodes, connections };\n  }\n\n  //\n  // NODES\n  //\n\n  async addNodes(graphKey: string, nodes: NodeJson[]) {\n    const tx = this.db.transaction(DBStores.node, \"readwrite\");\n\n    const _g = { graphKey };\n    for (const n of nodes) {\n      tx.store.add(Object.assign(n, _g));\n    }\n    return await tx.done;\n  }\n\n  deleteNode(path: NodeJson) {\n    return this.db.delete(DBStores.node, path.key);\n  }\n\n  async updateNode(graphKey: string, path: NodeJson) {\n    return this.db.put(DBStores.node, Object.assign(path, { graphKey }));\n  }\n\n  async updateNodes(graphKey: string, nodes: Array<NodeJson>) {\n    const _g = { graphKey };\n    return this.updateMany(\n      DBStores.node,\n      nodes.map((n) => n.key),\n      nodes.map((p) => Object.assign(p, _g))\n    );\n  }\n\n  //\n  // CONNECTIONS\n  //\n\n  async addConnections(graphKey: string, connections: ConnectionJson[]) {\n    const tx = this.db.transaction(DBStores.connection, \"readwrite\");\n\n    for (const p of connections) {\n      tx.store.add(connectionWithKey(graphKey, p));\n    }\n    return await tx.done;\n  }\n\n  deleteConnection(path: ConnectionJson) {\n    return this.db.delete(DBStores.connection, getKeyFromConnection(path));\n  }\n\n  async updateConnection(graphKey: string, connection: ConnectionJson) {\n    return this.db.put(DBStores.connection, connectionWithKey(graphKey, connection));\n  }\n\n  async updateConnections(graphKey: string, connections: Array<ConnectionJson>) {\n    return this.updateMany(\n      DBStores.connection,\n      connections.map(getKeyFromConnection),\n      connections.map((p) => connectionWithKey(graphKey, p))\n    );\n  }\n\n  //\n  // OTHER\n  //\n\n  async closeDB() {\n    this.db.close();\n  }\n\n  async clearDB() {\n    await Promise.all([\n      this.db.clear(DBStores.graph),\n      this.db.clear(DBStores.connection),\n      this.db.clear(DBStores.node),\n    ]);\n  }\n\n  private async updateMany<T>(dbKey: DBStores, keys: string[], items: T[]) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    await Promise.all(\n      items.map(async (path, index) => {\n        const key = keys[index];\n        const val = await tx.store.get(key);\n\n        if (!val) {\n          throw new Error();\n        }\n        return tx.store.put({ ...val, ...path });\n      })\n    );\n    return await tx.done;\n  }\n\n  private async updateIncrementalSingle<T>(\n    dbKey: DBStores,\n    key: string,\n    item: T\n  ) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    const val = await tx.store.get(key);\n\n    if (!val) {\n      throw new Error();\n    }\n    tx.store.put({ ...val, ...item });\n    await tx.done;\n  }\n}\n","import { action, computed, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn } from \"mobx-state-tree\";\nimport { FieldSpec } from \"../fields\";\nimport { GlobalData, RootStoreModel, JsonType } from \"../canvas/store\";\nimport { ConnectionJson, NodeJson } from \"../canvas/persistence\";\n\nexport type OperationI<\n  V extends { [key: string]: FieldSpec },\n  D extends NodeData<D, G, any>,\n  G extends GlobalData<D>\n> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  nInputs: number;\n  errors: ObservableMap<keyof V, string>;\n};\n\nexport const mobxDecorators = <V extends { [key: string]: FieldSpec }>(\n  spec: V\n) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    errors: observable,\n  };\n};\n\nexport interface NodeData<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  isValidInput(input: NodeModel<D, G, C>): boolean;\n  nInputs: number;\n  spec: { [key: string]: FieldSpec };\n  // TODO: ObservableMap<keyof V, string>\n  errors: ObservableMap<string, string>;\n  View: React.FC;\n  toJson: JsonType;\n}\n\nexport type ConnectionData<D> = {\n  ConnectionView: React.FunctionComponent;\n  connectionText: string;\n  toJson: JsonType;\n};\n\nexport class ConnModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public from: NodeModel<D, G, C>,\n    public to: NodeModel<D, G, C>,\n    dataBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C,\n    json?: JsonType\n  ) {\n    this.data = dataBuilder(this, json);\n  }\n\n  get graph(): RootStoreModel<D, G, any> {\n    return this.from.graph;\n  }\n\n  @computed\n  get isSelected(): boolean {\n    return this.from.graph.selectedConnection === this;\n  }\n\n  data: C;\n\n  @computed\n  get toJson(): ConnectionJson {\n    return {\n      from: this.from.key,\n      to: this.to.key,\n      data: this.data.toJson,\n    };\n  }\n}\n\nexport class NodeModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public graph: RootStoreModel<D, G, any>,\n    d: {\n      key: string;\n      name: string;\n      x: number;\n      y: number;\n      dataBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n      data?: JsonType\n    }\n  ) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.dataBuilder(this, d.data);\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: D;\n  @observable\n  inputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get inputNodes(): NodeModel<D, G, C>[] {\n    return this.inputs.map((c) => c.from);\n  }\n  @observable\n  outputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get outputNodes(): NodeModel<D, G, C>[] {\n    return this.outputs.map((c) => c.to);\n  }\n\n  @action\n  addInput(conn: ConnModel<D, G, C>) {\n    this.inputs.push(conn);\n    conn.from.outputs.push(conn);\n  }\n\n  @action\n  addOutput(conn: ConnModel<D, G, C>) {\n    this.outputs.push(conn);\n    conn.to.inputs.push(conn);\n  }\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n\n  @computed\n  get toJson(): NodeJson {\n    return {\n      key: this.key,\n      name: this.name,\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      data: this.data.toJson,\n    };\n  }\n}\n","import {\n  action,\n  computed,\n  IKeyValueMap,\n  IMapEntries,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport { v4 } from \"uuid\";\nimport {\n  NodeModel,\n  NodeData,\n  ConnModel,\n  ConnectionData,\n} from \"../node/node-model\";\nimport { downloadToClient } from \"../utils\";\nimport { ConnectionJson, GraphJson, IndexedDB, NodeJson } from \"./persistence\";\n\nexport type DataBuilder<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  connectionBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C;\n  nodeBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n  graphBuilder: (graph: RootStoreModel<D, G, C>, json?: JsonType) => G;\n};\n\ntype JsonTypeItem = number | string | boolean | JsonType;\nexport type JsonType = { [key: string]: JsonTypeItem | JsonTypeItem[] };\n\nexport interface GlobalData<D extends NodeData<D, any, any>> {\n  generateCode(): string;\n  canAddNode(nodeType: string): boolean;\n  View: React.FunctionComponent;\n  toJson: JsonType;\n}\n\ntype FullGraphJson = {\n  graph: GraphJson;\n  nodes: NodeJson[];\n  connections: ConnectionJson[];\n};\n\ntype ConstructParams<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  builders: DataBuilder<D, G, C>;\n  data?: G;\n  key?: string;\n  nodes?:\n    | IMapEntries<string, NodeModel<D, G, C>>\n    | IKeyValueMap<NodeModel<D, G, C>>;\n};\n\nexport class RootStoreModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> {\n  constructor(d: {\n    db: IndexedDB;\n    builders: DataBuilder<D, G, C>;\n    json?: FullGraphJson;\n  }) {\n    this.db = d.db;\n    this.builders = d.builders;\n    this.globalData = d.builders.graphBuilder(this, d.json?.graph.data);\n    this.key = d.json?.graph.key ?? v4();\n\n    const nodes = d.json?.nodes.reduce((m, n) => {\n      const node = new NodeModel(this, {\n        ...n,\n        dataBuilder: d.builders.nodeBuilder,\n      });\n\n      m[n.key] = node;\n      return m;\n    }, {} as { [key: string]: NodeModel<D, G, C> });\n\n    this.nodes = observable.map(nodes ?? {});\n\n    d.json?.connections.forEach((c) => {\n      // TODO:\n      const from = this.nodes.get(c.from);\n      const to = this.nodes.get(c.to);\n      if (from !== undefined && to !== undefined) {\n        this.addConnection(from, to, c.data);\n      }\n    });\n  }\n\n  // Builders to create graph, node and transition instances\n  builders: DataBuilder<D, G, C>;\n  // Global generic data\n  globalData: G;\n  db: IndexedDB;\n\n  key: string;\n\n  @observable\n  resetStore: boolean = false;\n  // All nodes\n  @observable\n  nodes: ObservableMap<string, NodeModel<D, G, C>>;\n  // Selected node\n  @observable\n  selectedNode?: NodeModel<D, G, C>;\n  // Selected connection\n  @observable\n  selectedConnection?: ConnModel<D, G, C>;\n  // Selected input for transition\n  @observable\n  selectingInputFor?: NodeModel<D, G, C>;\n\n  // Select a node\n  @action\n  selectNode = (node: NodeModel<D, G, C>) => {\n    this.selectedNode = node;\n  };\n\n  // Select a connection\n  @action\n  selectConnection = (connection: ConnModel<D, G, C>) => {\n    this.selectedConnection = connection;\n  };\n\n  // Add a node\n  @action\n  addNode = (\n    nodeType: string,\n    pos?: { x: number; y: number }\n  ): NodeModel<D, G, C> | undefined => {\n    if (this.globalData.canAddNode(nodeType)) {\n      const op = new NodeModel(this, {\n        dataBuilder: this.builders.nodeBuilder,\n        key: v4(),\n        name: nodeType,\n        x: pos?.x ?? 100,\n        y: pos?.y ?? 100,\n        data: { type: nodeType },\n      });\n      this.nodes.set(op.key, op);\n      return op;\n    }\n  };\n\n  // remove a node\n  @action\n  removeNode(node: NodeModel<D, G, C>): void {\n    if (node === this.selectedNode) {\n      this.selectedNode = undefined;\n    }\n    if (this.nodes.delete(node.key)) {\n      for (const _in of node.inputs) {\n        _in.from.outputs.remove(_in);\n      }\n      for (const _out of node.outputs) {\n        _out.to.inputs.remove(_out);\n      }\n    }\n  }\n\n  @action\n  removeConnection(connection: ConnModel<D, G, C>): void {\n    if (connection === this.selectedConnection) {\n      this.selectedConnection = undefined;\n    }\n    connection.from.outputs.remove(connection);\n    connection.to.inputs.remove(connection);\n  }\n\n  @computed\n  get toJson(): GraphJson {\n    return { data: this.globalData.toJson, key: this.key };\n  }\n\n  // Select a node\n  @action\n  selectingInput = (from: NodeModel<D, G, C>) => {\n    this.selectingInputFor = from;\n    window.addEventListener(\"keyup\", this._selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (to: NodeModel<D, G, C>): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      this.selectingInputFor!,\n      to,\n      this.builders.connectionBuilder\n    );\n    conn.from.addOutput(conn);\n    this.selectingInputFor = undefined;\n    this.selectedConnection = conn;\n    window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    return conn;\n  };\n\n  @action\n  addConnection = (\n    from: NodeModel<D, G, C>,\n    to: NodeModel<D, G, C>,\n    json?: JsonType\n  ): ConnModel<D, G, C> => {\n    const conn = new ConnModel(from, to, this.builders.connectionBuilder, json);\n    conn.from.addOutput(conn);\n    return conn;\n  };\n\n  async saveModel() {\n    const nodes = [...this.nodes.entries()];\n    await this.db.clearDB();\n    await Promise.all([\n      this.db.updateGraph(this.toJson),\n      this.db.addNodes(\n        this.key,\n        nodes.map(([_, value]) => value.toJson)\n      ),\n      this.db.addConnections(\n        this.key,\n        nodes.flatMap(([_, value]) => value.outputs).map((t) => t.toJson)\n      ),\n    ]);\n  }\n\n  downloadModel(): FullGraphJson {\n    const nodes = [...this.nodes.entries()];\n    const json = {\n      graph: this.toJson,\n      nodes: nodes.map(([_, value]) => value.toJson),\n      connections: nodes\n        .flatMap(([_, value]) => value.outputs)\n        .map((t) => t.toJson),\n    };\n\n    console.log(json);\n    downloadToClient(\n      JSON.stringify(json),\n      \"gemma-model.json\",\n      \"application/json\"\n    );\n    return json;\n  }\n\n  @action\n  private _selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    }\n  };\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { NodeModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\ntype Props2 = {\n  children: React.ReactNode;\n};\n\nexport const PropertiesTable = observer(({ children }: Props2) => {\n  return (\n    <PropertiesTableStyled>\n      <thead>\n        <tr>\n          <td>Property</td>\n          <td>Value</td>\n        </tr>\n      </thead>\n      <tbody>{children}</tbody>\n    </PropertiesTableStyled>\n  );\n});\n\ntype Props<D extends NodeData<D, any, any>> = {\n  self: NodeModel<D, any, any>;\n};\n\nexport const PropertiesTableNode = observer(\n  <D extends NodeData<D, any, any>>({ self }: Props<D>) => {\n    const rootStore = useStore();\n    const fullOfInputs = self.inputs.length >= self.data.nInputs;\n    const isAddingInput = rootStore.selectingInputFor !== undefined;\n    return (\n      <PropertiesTable>\n        {self.data.nInputs !== 0 && (\n          <tr>\n            <td>Inputs</td>\n            <td>\n              {self.inputs.map((v) => (\n                <div\n                  onClick={() => rootStore.selectConnection(v as any)}\n                  key={v.from.key}\n                  style={{ padding: \"5px\" }}\n                >\n                  {v.from.name}\n                </div>\n              ))}\n              {!fullOfInputs && (\n                <div\n                  onClick={() => rootStore.selectingInput(self as any)}\n                  style={\n                    isAddingInput\n                      ? { background: \"#eee\" }\n                      : { cursor: \"pointer\" }\n                  }\n                >\n                  Add Transition\n                </div>\n              )}\n            </td>\n          </tr>\n        )}\n        {Object.entries(self.data.spec).map(([k, v]) => (\n          <tr key={k}>\n            <td>{k}</td>\n            <td>\n              <v.plotField name={k} model={self.data as any} />\n            </td>\n          </tr>\n        ))}\n      </PropertiesTable>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  padding-bottom: 10px;\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTableNode } from \"./properties-table\";\nimport { useStore } from \"../App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"./properties-view.css\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n\n  let inner;\n  if (rootStore.selectedNode != null) {\n    const selectedNode = rootStore.selectedNode;\n    const selectedConnection = rootStore.selectedConnection;\n    inner = (\n      <div\n        style={{\n          overflow: \"auto\",\n          maxHeight: \"100%\",\n          maxWidth: \"100%\",\n          justifyContent: \"space-around\",\n          backgroundColor: \"#fafafa\",\n          display: \"flex\",\n          \n        }}\n        key={rootStore.selectedNode.key}\n        className=\"row\"\n      >\n        <div className=\"properties-view\">\n          <div\n            className=\"row\"\n            style={{ justifyContent: \"space-between\", alignItems: \"center\" }}\n          >\n            <TextField\n              type=\"text\"\n              value={selectedNode.name}\n              onChange={(e) => selectedNode.setName(e.target.value)}\n              style={{ width: \"150px\" }}\n            ></TextField>\n            <IconButton onClick={(e) => rootStore.removeNode(selectedNode)}>\n              <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n            </IconButton>\n          </div>\n          <PropertiesTableNode self={rootStore.selectedNode} />\n        </div>\n        <div className=\"properties-view\">\n          {selectedConnection !== undefined && (\n            <div className=\"col\">\n              <div\n                className=\"row\"\n                style={{\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <div>{`${selectedConnection.from.name} -> ${selectedConnection.to.name}`}</div>\n                <IconButton\n                  onClick={(e) =>\n                    rootStore.removeConnection(selectedConnection)\n                  }\n                >\n                  <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n                </IconButton>\n              </div>\n              <selectedConnection.data.ConnectionView />\n            </div>\n          )}\n        </div>\n        <div style={{ minWidth: \"270px\" }} className=\"properties-view\">\n          <rootStore.globalData.View />\n        </div>\n      </div>\n    );\n  } else {\n    inner = (\n      <div style={{ width: \"150px\" }} className=\"row\">\n        <div style={{ width: \"150px\" }} className=\"center\">\n          Not selected\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      defaultSize={{ height: 280, width: \"auto\" }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n\n  constructor(v: { choices: C; default: K }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n    return (\n      <ChoiceField\n        value={model[name]}\n        setValue={(v) => (model[name] = v as any)}\n        keys={keys}\n      />\n    );\n  });\n}\n\nexport const ChoiceField = ({\n  keys,\n  value,\n  setValue,\n}: {\n  keys: string[];\n  value: string;\n  setValue: (v: string) => void;\n}) => {\n  if (keys.length > 3) {\n    return (\n      <Select\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value as any);\n        }}\n        autoWidth={true}\n      >\n        {keys.map((k) => {\n          return (\n            <MenuItem key={k} value={k}>\n              {k}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    );\n  } else {\n    return (\n      <ButtonsDiv>\n        <ButtonGroup\n          size=\"small\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n        >\n          {keys.map((k) => {\n            const buttonStyle =\n              k === value ? { background: \"#3f51b5\", color: \"white\" } : {};\n\n            return (\n              <Button\n                key={k}\n                onClick={() => {\n                  setValue(k);\n                }}\n                style={buttonStyle}\n              >\n                {k}\n              </Button>\n            );\n          })}\n        </ButtonGroup>\n      </ButtonsDiv>\n    );\n  }\n};\n","import React from \"react\";\nimport { computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { StrFieldSpec } from \"../fields\";\nimport { ChoiceFieldSpec } from \"../fields/choice-field\";\nimport { NodeData, NodeModel } from \"../node/node-model\";\nimport { listToMap } from \"../utils\";\nimport { GemmaGraphcet } from \"./gemma\";\nimport { Transition } from \"./transition\";\nimport { JsonType } from \"../canvas/store\";\n\nexport type Step = SimpleStep | EnclosingStep | MacroStep | InitialStep;\nexport enum StepType {\n  ENCLOSING = \"ENCLOSING\",\n  INITIAL = \"INITIAL\",\n  MACRO = \"MACRO\",\n  SIMPLE = \"SIMPLE\",\n}\n\ntype GemmaNode = NodeModel<Step, GemmaGraphcet, Transition>;\n\nexport enum ProcedureType {\n  F = \"F\", // Operational\n  D = \"D\", // Failure\n  A = \"A\", // Stop\n}\n\nabstract class BaseStep implements NodeData<Step, GemmaGraphcet, Transition> {\n  abstract type: StepType;\n  nInputs = Number.POSITIVE_INFINITY;\n  errors = observable.map<string, string>();\n\n  constructor(\n    private node: GemmaNode,\n    d?: {\n      description?: string;\n      family?: ProcedureType;\n    }\n  ) {\n    this.description = d?.description ?? \"\";\n    this.family = d?.family ?? ProcedureType.F;\n  }\n\n  @computed\n  get name(): string {\n    return this.node.name;\n  }\n  @observable\n  description: string;\n  @observable\n  family: ProcedureType;\n\n  get automationSystem(): GemmaGraphcet {\n    return this.node.graph.globalData;\n  }\n\n  @computed\n  private get _transitions(): Transition[] {\n    return this.node.outputs\n      .map((t) => t.data)\n      .sort((a, b) => a.priority - b.priority);\n  }\n  @computed\n  get innerTransitionsLength(): number {\n    return this._transitions.length;\n  }\n  @computed\n  get transitions(): Transition[] {\n    return this.family === ProcedureType.F\n      ? this.automationSystem.workingFamilyTransitions.concat(this._transitions)\n      : this._transitions;\n  }\n  @computed\n  get id(): number {\n    return this.automationSystem.steps.indexOf(this as any) + 1;\n  }\n\n  spec = {\n    family: new ChoiceFieldSpec({\n      default: ProcedureType.F,\n      choices: listToMap(Object.values(ProcedureType)),\n    }),\n    description: new StrFieldSpec({ default: \"\" }),\n  };\n\n  isValidInput(n: GemmaNode): boolean {\n    return this.node.inputNodes.every((t) => t.data !== n.data);\n  }\n  @computed\n  get toJson(): JsonType {\n    return {\n      family: this.family, \n      description: this.description, \n      type: this.type\n    };\n  }\n\n  View = observer(() => {\n    let style: React.CSSProperties = {};\n    let innerStyle: React.CSSProperties = { padding: \"12px\" };\n    switch (this.type) {\n      case StepType.ENCLOSING:\n        style = { padding: \"0 0\",  display: \"flex\" };\n        // TODO: \n        return (\n          <div style={style}>\n            <span />\n            <div style={{ ...innerStyle, }}>\n              {this.node.name}\n            </div>\n            <span />\n          </div>\n        );\n      case StepType.MACRO:\n        style = { padding: \"5px 0\" };\n        innerStyle = {\n          border: \"1.5px solid\",\n          borderRight: \"0\",\n          borderLeft: \"0\",\n          padding: \"5px 12px\",\n        };\n        break;\n      case StepType.INITIAL:\n        style = { padding: \"5px\" };\n        innerStyle = {\n          border: \"1.5px solid\",\n          padding: \"7px\",\n        };\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div style={style}>\n        <div style={innerStyle}>{this.node.name}</div>\n      </div>\n    );\n  });\n}\n\nexport class SimpleStep extends BaseStep {\n  type = StepType.SIMPLE;\n}\n\nexport class InitialStep extends BaseStep {\n  type = StepType.INITIAL;\n}\n\nexport class EnclosingStep extends BaseStep {\n  type = StepType.ENCLOSING;\n}\n\nexport class MacroStep extends BaseStep {\n  type = StepType.MACRO;\n}\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n\n  constructor(v: { default: string; maxLength?: number; minLength?: number }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          setValue(value as any);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"140px\" }}\n      />\n    );\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","import { GemmaGraphcet } from \"./gemma\";\nimport {\n  EnclosingStep,\n  MacroStep,\n  SimpleStep,\n  InitialStep,\n  StepType,\n} from \"./step\";\nimport { Transition } from \"./transition\";\n\nclass H {\n  static textOrEmpty = (cond: boolean, text: string) => (cond ? text : \"\");\n}\n\nconst templateTransitions = (\n  transitions: Transition[],\n  { isNested }: { isNested: boolean }\n) => {\n  return `\\\n${transitions\n  .map((t, index) => {\n    return `\n${index === 0 ? \"IF\" : \"ELSIF\"} ${t.condition.expression} THEN\n  State:=${t.to.id};\\\n  ${isNested ? \"\\n  Entry:=TRUE;\" : \"\"}`;\n  })\n  .join(\"\\n\")}\\\n${transitions.length === 0 ? \"\" : \"\\nEND_IF\"}`;\n};\n\nconst templateGemmaGraphcetSimpleStep = (\n  model: SimpleStep | InitialStep\n): string => {\n  return templateTransitions(model.transitions, { isNested: false });\n};\n\nconst templateFBEntry = (model: MacroStep | EnclosingStep): string => `\\\nIF Entry THEN\n  ${model.name}(Initialization:=ENTRY);\n  Entry:=FALSE;\nEND_IF\n${model.name}(Initialization:=ENTRY);`;\n\nconst templateGemmaGraphcetMacroStep = (model: MacroStep): string => {\n  const transitions = model.transitions;\n  return `\n${templateFBEntry(model)}\n\n${transitions\n  .map((t, index) => {\n    return `\\\n${index === 0 ? \"IF\" : \"ELSIF\"} ${t.condition.expression}${\n      transitions.length - model.innerTransitionsLength <= index\n        ? ` AND ${model.name}.Complete`\n        : \"\"\n    } THEN\n  State:=${t.to.id};\n  Entry:=TRUE;`;\n  })\n  .join(\"\\n\")}\\\n${H.textOrEmpty(transitions.length !== 0, \"\\nEND_IF\")}`;\n};\n\nconst templateGemmaGraphcetEnclosingStep = (model: EnclosingStep): string => {\n  return `\\\n${templateFBEntry(model)}\n\n${templateTransitions(model.transitions, { isNested: true })}`;\n};\n\nexport const templateGemmaGraphcet = (model: GemmaGraphcet): string => {\n  return `\n// Variable declaration\nVAR\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .map((s) => `  ${s.name}:${s.name}_FB;`)\n  .join(\"\\n\")}\n\n  State:UINT:=${model.initialStep?.id};\n  Entry:BOOL:=TRUE;\nEND_VAR\n\n// Program behavior\nCASE State OF\n  ${model.steps\n    .map((step) => {\n      return `\n  ${step.id}: //State ${step.name}\n    ${(() => {\n      switch (step.type) {\n        case StepType.ENCLOSING:\n          return templateGemmaGraphcetEnclosingStep(step);\n        case StepType.INITIAL:\n        case StepType.SIMPLE:\n          return templateGemmaGraphcetSimpleStep(step);\n        case StepType.MACRO:\n          return templateGemmaGraphcetMacroStep(step);\n      }\n    })().replace(/\\n/g, \"\\n    \")}\n  `;\n    })\n    .join(\"\\n\")}\nEND_CASE\n`;\n};\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class SimpleBooleanLexer extends Lexer {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \"EQ\", \"LPAREN\", \n\t\t\"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanLexer._LITERAL_NAMES, SimpleBooleanLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(SimpleBooleanLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return SimpleBooleanLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return SimpleBooleanLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x11e\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x03\\x02\\x03\\x02\\x03\\x02\\x03\" +\n\t\t\"\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\" +\n\t\t\"\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\" +\n\t\t\"\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x05\\x0EI\\n\\x0E\\x03\\x0E\\x06\\x0E\" +\n\t\t\"L\\n\\x0E\\r\\x0E\\x0E\\x0EM\\x03\\x0E\\x03\\x0E\\x06\\x0ER\\n\\x0E\\r\\x0E\\x0E\\x0ES\\x05\" +\n\t\t\"\\x0EV\\n\\x0E\\x03\\x0F\\x03\\x0F\\x07\\x0FZ\\n\\x0F\\f\\x0F\\x0E\\x0F]\\v\\x0F\\x03\\x10\" +\n\t\t\"\\x06\\x10`\\n\\x10\\r\\x10\\x0E\\x10a\\x03\\x10\\x03\\x10\\x02\\x02\\x02\\x11\\x03\\x02\" +\n\t\t\"\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\" +\n\t\t\"\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\" +\n\t\t\"\\x1F\\x02\\x11\\x03\\x02\\x06\\x03\\x022;\\x05\\x02C\\\\aac|\\x06\\x022;C\\\\aac|\\x05\" +\n\t\t\"\\x02\\v\\f\\x0E\\x0F\\\"\\\"\\x02j\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x1F\\x03\\x02\\x02\\x02\\x03!\\x03\\x02\\x02\\x02\\x05%\\x03\\x02\\x02\\x02\\x07\" +\n\t\t\"(\\x03\\x02\\x02\\x02\\t,\\x03\\x02\\x02\\x02\\v1\\x03\\x02\\x02\\x02\\r7\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x0F9\\x03\\x02\\x02\\x02\\x11<\\x03\\x02\\x02\\x02\\x13>\\x03\\x02\\x02\\x02\\x15\" +\n\t\t\"A\\x03\\x02\\x02\\x02\\x17C\\x03\\x02\\x02\\x02\\x19E\\x03\\x02\\x02\\x02\\x1BH\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x1DW\\x03\\x02\\x02\\x02\\x1F_\\x03\\x02\\x02\\x02!\\\"\\x07C\\x02\\x02\\\"#\" +\n\t\t\"\\x07P\\x02\\x02#$\\x07F\\x02\\x02$\\x04\\x03\\x02\\x02\\x02%&\\x07Q\\x02\\x02&\\'\\x07\" +\n\t\t\"T\\x02\\x02\\'\\x06\\x03\\x02\\x02\\x02()\\x07P\\x02\\x02)*\\x07Q\\x02\\x02*+\\x07V\\x02\" +\n\t\t\"\\x02+\\b\\x03\\x02\\x02\\x02,-\\x07V\\x02\\x02-.\\x07T\\x02\\x02./\\x07W\\x02\\x02/\" +\n\t\t\"0\\x07G\\x02\\x020\\n\\x03\\x02\\x02\\x0212\\x07H\\x02\\x0223\\x07C\\x02\\x0234\\x07\" +\n\t\t\"N\\x02\\x0245\\x07U\\x02\\x0256\\x07G\\x02\\x026\\f\\x03\\x02\\x02\\x0278\\x07@\\x02\" +\n\t\t\"\\x028\\x0E\\x03\\x02\\x02\\x029:\\x07@\\x02\\x02:;\\x07?\\x02\\x02;\\x10\\x03\\x02\\x02\" +\n\t\t\"\\x02<=\\x07>\\x02\\x02=\\x12\\x03\\x02\\x02\\x02>?\\x07>\\x02\\x02?@\\x07?\\x02\\x02\" +\n\t\t\"@\\x14\\x03\\x02\\x02\\x02AB\\x07?\\x02\\x02B\\x16\\x03\\x02\\x02\\x02CD\\x07*\\x02\\x02\" +\n\t\t\"D\\x18\\x03\\x02\\x02\\x02EF\\x07+\\x02\\x02F\\x1A\\x03\\x02\\x02\\x02GI\\x07/\\x02\\x02\" +\n\t\t\"HG\\x03\\x02\\x02\\x02HI\\x03\\x02\\x02\\x02IK\\x03\\x02\\x02\\x02JL\\t\\x02\\x02\\x02\" +\n\t\t\"KJ\\x03\\x02\\x02\\x02LM\\x03\\x02\\x02\\x02MK\\x03\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02\" +\n\t\t\"NU\\x03\\x02\\x02\\x02OQ\\x070\\x02\\x02PR\\t\\x02\\x02\\x02QP\\x03\\x02\\x02\\x02RS\" +\n\t\t\"\\x03\\x02\\x02\\x02SQ\\x03\\x02\\x02\\x02ST\\x03\\x02\\x02\\x02TV\\x03\\x02\\x02\\x02\" +\n\t\t\"UO\\x03\\x02\\x02\\x02UV\\x03\\x02\\x02\\x02V\\x1C\\x03\\x02\\x02\\x02W[\\t\\x03\\x02\" +\n\t\t\"\\x02XZ\\t\\x04\\x02\\x02YX\\x03\\x02\\x02\\x02Z]\\x03\\x02\\x02\\x02[Y\\x03\\x02\\x02\" +\n\t\t\"\\x02[\\\\\\x03\\x02\\x02\\x02\\\\\\x1E\\x03\\x02\\x02\\x02][\\x03\\x02\\x02\\x02^`\\t\\x05\" +\n\t\t\"\\x02\\x02_^\\x03\\x02\\x02\\x02`a\\x03\\x02\\x02\\x02a_\\x03\\x02\\x02\\x02ab\\x03\\x02\" +\n\t\t\"\\x02\\x02bc\\x03\\x02\\x02\\x02cd\\b\\x10\\x02\\x02d \\x03\\x02\\x02\\x02\\t\\x02HMS\" +\n\t\t\"U[a\\x03\\b\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanLexer.__ATN) {\n\t\t\tSimpleBooleanLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanLexer._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanLexer.__ATN;\n\t}\n\n}\n\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n// @ts-ignore\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { SimpleBooleanListener } from \"./SimpleBooleanListener\";\nimport { SimpleBooleanVisitor } from \"./SimpleBooleanVisitor\";\n\n\nexport class SimpleBooleanParser extends Parser {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\tpublic static readonly RULE_parse = 0;\n\tpublic static readonly RULE_expression = 1;\n\tpublic static readonly RULE_expressionAnd = 2;\n\tpublic static readonly RULE_expressionSimple = 3;\n\tpublic static readonly RULE_numExpression = 4;\n\tpublic static readonly RULE_comparator = 5;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"parse\", \"expression\", \"expressionAnd\", \"expressionSimple\", \"numExpression\", \n\t\t\"comparator\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanParser._LITERAL_NAMES, SimpleBooleanParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanParser._serializedATN; }\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(SimpleBooleanParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic parse(): ParseContext {\n\t\tlet _localctx: ParseContext = new ParseContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, SimpleBooleanParser.RULE_parse);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 12;\n\t\t\tthis.expression();\n\t\t\tthis.state = 13;\n\t\t\tthis.match(SimpleBooleanParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expression(): ExpressionContext {\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, SimpleBooleanParser.RULE_expression);\n\t\ttry {\n\t\t\tthis.state = 22;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new NotExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 15;\n\t\t\t\tthis.match(SimpleBooleanParser.NOT);\n\t\t\t\tthis.state = 16;\n\t\t\t\tthis.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new OrExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 17;\n\t\t\t\t(_localctx as OrExpressionContext)._left = this.expressionAnd();\n\t\t\t\tthis.state = 18;\n\t\t\t\tthis.match(SimpleBooleanParser.OR);\n\t\t\t\tthis.state = 19;\n\t\t\t\t(_localctx as OrExpressionContext)._right = this.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new AndParentExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 21;\n\t\t\t\tthis.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\tlet _localctx: ExpressionAndContext = new ExpressionAndContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, SimpleBooleanParser.RULE_expressionAnd);\n\t\ttry {\n\t\t\tthis.state = 29;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new AndExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 24;\n\t\t\t\t(_localctx as AndExpressionContext)._left = this.expressionSimple();\n\t\t\t\tthis.state = 25;\n\t\t\t\tthis.match(SimpleBooleanParser.AND);\n\t\t\t\tthis.state = 26;\n\t\t\t\t(_localctx as AndExpressionContext)._right = this.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new SimpleExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 28;\n\t\t\t\tthis.expressionSimple();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\tlet _localctx: ExpressionSimpleContext = new ExpressionSimpleContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, SimpleBooleanParser.RULE_expressionSimple);\n\t\ttry {\n\t\t\tthis.state = 40;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new ComparatorExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 31;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._left = this.numExpression();\n\t\t\t\tthis.state = 32;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._op = this.comparator();\n\t\t\t\tthis.state = 33;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._right = this.numExpression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new IdentifierExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 35;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new ParenExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 36;\n\t\t\t\tthis.match(SimpleBooleanParser.LPAREN);\n\t\t\t\tthis.state = 37;\n\t\t\t\tthis.expression();\n\t\t\t\tthis.state = 38;\n\t\t\t\tthis.match(SimpleBooleanParser.RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic numExpression(): NumExpressionContext {\n\t\tlet _localctx: NumExpressionContext = new NumExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 8, SimpleBooleanParser.RULE_numExpression);\n\t\ttry {\n\t\t\tthis.state = 44;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch (this._input.LA(1)) {\n\t\t\tcase SimpleBooleanParser.IDENTIFIER:\n\t\t\t\t_localctx = new IdentifierNumExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 42;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SimpleBooleanParser.DECIMAL:\n\t\t\t\t_localctx = new DecimalExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 43;\n\t\t\t\tthis.match(SimpleBooleanParser.DECIMAL);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic comparator(): ComparatorContext {\n\t\tlet _localctx: ComparatorContext = new ComparatorContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 10, SimpleBooleanParser.RULE_comparator);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 46;\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SimpleBooleanParser.GT) | (1 << SimpleBooleanParser.GE) | (1 << SimpleBooleanParser.LT) | (1 << SimpleBooleanParser.LE) | (1 << SimpleBooleanParser.EQ))) !== 0))) {\n\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t} else {\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t}\n\n\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\tthis.consume();\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x113\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n\t\t\"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n\t\t\"\\x03\\x03\\x03\\x03\\x05\\x03\\x19\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\" +\n\t\t\"\\x04\\x05\\x04 \\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x05\\x05+\\n\\x05\\x03\\x06\\x03\\x06\\x05\\x06/\\n\\x06\\x03\" +\n\t\t\"\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x02\\b\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\" +\n\t\t\"\\f\\x02\\x02\\x03\\x03\\x02\\b\\f\\x022\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x18\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x06\\x1F\\x03\\x02\\x02\\x02\\b*\\x03\\x02\\x02\\x02\\n.\\x03\\x02\\x02\\x02\" +\n\t\t\"\\f0\\x03\\x02\\x02\\x02\\x0E\\x0F\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\\x10\" +\n\t\t\"\\x03\\x03\\x02\\x02\\x02\\x11\\x12\\x07\\x05\\x02\\x02\\x12\\x19\\x05\\x04\\x03\\x02\\x13\" +\n\t\t\"\\x14\\x05\\x06\\x04\\x02\\x14\\x15\\x07\\x04\\x02\\x02\\x15\\x16\\x05\\x04\\x03\\x02\\x16\" +\n\t\t\"\\x19\\x03\\x02\\x02\\x02\\x17\\x19\\x05\\x06\\x04\\x02\\x18\\x11\\x03\\x02\\x02\\x02\\x18\" +\n\t\t\"\\x13\\x03\\x02\\x02\\x02\\x18\\x17\\x03\\x02\\x02\\x02\\x19\\x05\\x03\\x02\\x02\\x02\\x1A\" +\n\t\t\"\\x1B\\x05\\b\\x05\\x02\\x1B\\x1C\\x07\\x03\\x02\\x02\\x1C\\x1D\\x05\\x06\\x04\\x02\\x1D\" +\n\t\t\" \\x03\\x02\\x02\\x02\\x1E \\x05\\b\\x05\\x02\\x1F\\x1A\\x03\\x02\\x02\\x02\\x1F\\x1E\\x03\" +\n\t\t\"\\x02\\x02\\x02 \\x07\\x03\\x02\\x02\\x02!\\\"\\x05\\n\\x06\\x02\\\"#\\x05\\f\\x07\\x02#$\" +\n\t\t\"\\x05\\n\\x06\\x02$+\\x03\\x02\\x02\\x02%+\\x07\\x10\\x02\\x02&\\'\\x07\\r\\x02\\x02\\'\" +\n\t\t\"(\\x05\\x04\\x03\\x02()\\x07\\x0E\\x02\\x02)+\\x03\\x02\\x02\\x02*!\\x03\\x02\\x02\\x02\" +\n\t\t\"*%\\x03\\x02\\x02\\x02*&\\x03\\x02\\x02\\x02+\\t\\x03\\x02\\x02\\x02,/\\x07\\x10\\x02\" +\n\t\t\"\\x02-/\\x07\\x0F\\x02\\x02.,\\x03\\x02\\x02\\x02.-\\x03\\x02\\x02\\x02/\\v\\x03\\x02\" +\n\t\t\"\\x02\\x0201\\t\\x02\\x02\\x021\\r\\x03\\x02\\x02\\x02\\x06\\x18\\x1F*.\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanParser.__ATN) {\n\t\t\tSimpleBooleanParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanParser._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanParser.__ATN;\n\t}\n\n}\n\nexport class ParseContext extends ParserRuleContext {\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic EOF(): TerminalNode { return this.getToken(SimpleBooleanParser.EOF, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_parse; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParse) {\n\t\t\tlistener.enterParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParse) {\n\t\t\tlistener.exitParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParse) {\n\t\t\treturn visitor.visitParse(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expression; }\n\tpublic copyFrom(ctx: ExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class NotExpressionContext extends ExpressionContext {\n\tpublic NOT(): TerminalNode { return this.getToken(SimpleBooleanParser.NOT, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterNotExpression) {\n\t\t\tlistener.enterNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitNotExpression) {\n\t\t\tlistener.exitNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitNotExpression) {\n\t\t\treturn visitor.visitNotExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class OrExpressionContext extends ExpressionContext {\n\tpublic _left: ExpressionAndContext;\n\tpublic _right: ExpressionContext;\n\tpublic OR(): TerminalNode { return this.getToken(SimpleBooleanParser.OR, 0); }\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterOrExpression) {\n\t\t\tlistener.enterOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitOrExpression) {\n\t\t\tlistener.exitOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitOrExpression) {\n\t\t\treturn visitor.visitOrExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class AndParentExpressionContext extends ExpressionContext {\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndParentExpression) {\n\t\t\tlistener.enterAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndParentExpression) {\n\t\t\tlistener.exitAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndParentExpression) {\n\t\t\treturn visitor.visitAndParentExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionAndContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionAnd; }\n\tpublic copyFrom(ctx: ExpressionAndContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class AndExpressionContext extends ExpressionAndContext {\n\tpublic _left: ExpressionSimpleContext;\n\tpublic _right: ExpressionAndContext;\n\tpublic AND(): TerminalNode { return this.getToken(SimpleBooleanParser.AND, 0); }\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndExpression) {\n\t\t\tlistener.enterAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndExpression) {\n\t\t\tlistener.exitAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndExpression) {\n\t\t\treturn visitor.visitAndExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class SimpleExpressionContext extends ExpressionAndContext {\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterSimpleExpression) {\n\t\t\tlistener.enterSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitSimpleExpression) {\n\t\t\tlistener.exitSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitSimpleExpression) {\n\t\t\treturn visitor.visitSimpleExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionSimpleContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionSimple; }\n\tpublic copyFrom(ctx: ExpressionSimpleContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class ComparatorExpressionContext extends ExpressionSimpleContext {\n\tpublic _left: NumExpressionContext;\n\tpublic _op: ComparatorContext;\n\tpublic _right: NumExpressionContext;\n\tpublic numExpression(): NumExpressionContext[];\n\tpublic numExpression(i: number): NumExpressionContext;\n\tpublic numExpression(i?: number): NumExpressionContext | NumExpressionContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(NumExpressionContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, NumExpressionContext);\n\t\t}\n\t}\n\tpublic comparator(): ComparatorContext {\n\t\treturn this.getRuleContext(0, ComparatorContext);\n\t}\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparatorExpression) {\n\t\t\tlistener.enterComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparatorExpression) {\n\t\t\tlistener.exitComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparatorExpression) {\n\t\t\treturn visitor.visitComparatorExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class IdentifierExpressionContext extends ExpressionSimpleContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierExpression) {\n\t\t\tlistener.enterIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierExpression) {\n\t\t\tlistener.exitIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierExpression) {\n\t\t\treturn visitor.visitIdentifierExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class ParenExpressionContext extends ExpressionSimpleContext {\n\tpublic LPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.LPAREN, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic RPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.RPAREN, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParenExpression) {\n\t\t\tlistener.enterParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParenExpression) {\n\t\t\tlistener.exitParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParenExpression) {\n\t\t\treturn visitor.visitParenExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class NumExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_numExpression; }\n\tpublic copyFrom(ctx: NumExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class IdentifierNumExpressionContext extends NumExpressionContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierNumExpression) {\n\t\t\tlistener.enterIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierNumExpression) {\n\t\t\tlistener.exitIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierNumExpression) {\n\t\t\treturn visitor.visitIdentifierNumExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class DecimalExpressionContext extends NumExpressionContext {\n\tpublic DECIMAL(): TerminalNode { return this.getToken(SimpleBooleanParser.DECIMAL, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterDecimalExpression) {\n\t\t\tlistener.enterDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitDecimalExpression) {\n\t\t\tlistener.exitDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitDecimalExpression) {\n\t\t\treturn visitor.visitDecimalExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ComparatorContext extends ParserRuleContext {\n\tpublic GT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GT, 0); }\n\tpublic GE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GE, 0); }\n\tpublic LT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LT, 0); }\n\tpublic LE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LE, 0); }\n\tpublic EQ(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.EQ, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_comparator; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparator) {\n\t\t\tlistener.enterComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparator) {\n\t\t\tlistener.exitComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparator) {\n\t\t\treturn visitor.visitComparator(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n","import { templateGemmaGraphcet } from \"./gemma-templates\";\nimport {\n  GlobalData,\n  RootStoreModel,\n  DataBuilder,\n  JsonType,\n} from \"../canvas/store\";\nimport { computed, IObservableArray, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Transition } from \"./transition\";\nimport {\n  Step,\n  SimpleStep,\n  EnclosingStep,\n  StepType,\n  InitialStep,\n  MacroStep,\n  ProcedureType,\n} from \"./step\";\nimport { ConnModel, NodeModel } from \"../node/node-model\";\nimport { IndexedDB } from \"../canvas/persistence\";\n\nenum SignalType {\n  bool = \"bool\",\n\n  sint = \"sint\",\n  int = \"int\",\n  lint = \"lint\",\n  dint = \"dint\",\n\n  usint = \"usint\",\n  uint = \"uint\",\n  ulint = \"ulint\",\n  udint = \"udint\",\n\n  real = \"real\",\n  lreal = \"lreal\",\n}\n\nexport class GemmaGraphcet implements GlobalData<Step> {\n  constructor(\n    private graph: RootStoreModel<Step, GemmaGraphcet, Transition>,\n    json?: JsonType\n  ) {\n    let signals: Signal[] = [];\n    if (Array.isArray(json?.signals)) {\n      signals = json?.signals\n        .map((s) => (typeof s === \"object\" ? Signal.fromJson(s) : undefined))\n        .filter((s) => s !== undefined) as Signal[];\n    }\n    this.signals = observable.array<Signal>(signals);\n  }\n\n  canAddNode(nodeType: string): boolean {\n    if (nodeType === StepType.INITIAL) {\n      return !this._hasInitialStep();\n    }\n    return true;\n  }\n\n  private _hasInitialStep(): boolean {\n    return [...this.graph.nodes.values()].some(\n      (n) => n.data.type === StepType.INITIAL\n    );\n  }\n\n  workingFamilyTransitions: Transition[] = [];\n\n  @computed\n  get steps(): Step[] {\n    return [...this.graph.nodes.values()].map((node) => node.data);\n  }\n\n  readonly signals: IObservableArray<Signal>;\n\n  @computed\n  get numSignals(): Signal[] {\n    return this.signals.filter((s) => s.type !== SignalType.bool);\n  }\n\n  @computed\n  get boolSignals(): Signal[] {\n    return this.signals.filter((s) => s.type === SignalType.bool);\n  }\n\n  @computed\n  get initialStep(): Step | undefined {\n    return this.steps.find((s) => s.type === StepType.INITIAL);\n  }\n\n  generateCode = (): string => {\n    return templateGemmaGraphcet(this);\n  };\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      signals: this.signals.map((s) => s.toJson),\n    };\n  }\n\n  View = observer(() => {\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <h2 style={{ margin: \"0 0 10px 0\" }}>Signals</h2>\n        {this.signals.map((s, index) => (\n          <div\n            className=\"row\"\n            style={{ display: \"flex\", alignItems: \"center\", padding: \"3px 0\" }}\n          >\n            <TextField\n              type=\"text\"\n              label=\"name\"\n              value={s.name}\n              onChange={(e) => (s.name = e.target.value)}\n              style={{ width: \"150px\" }}\n            ></TextField>\n            <div style={{ padding: \"0 12px 0 12px\" }}>\n              <ChoiceField\n                keys={Object.keys(SignalType)}\n                setValue={(v) => (s.type = v as any)}\n                value={s.type}\n              />\n            </div>\n            <TextField\n              type=\"text\"\n              label=\"default\"\n              value={s.defaultValue}\n              onChange={(e) => (s.defaultValue = e.target.value)}\n              style={{ width: \"100px\" }}\n            ></TextField>\n            <span style={{ flex: 1 }} />\n            <IconButton onClick={(e) => this.signals.remove(s)}>\n              <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n            </IconButton>\n          </div>\n        ))}\n        <Button\n          style={{ alignSelf: \"flex-end\" }}\n          onClick={(e) => this.signals.push(new Signal({ name: \"\" }))}\n        >\n          Add Signal\n        </Button>\n      </div>\n    );\n  });\n}\n\nexport class Signal {\n  @observable\n  name: string;\n  @observable\n  type: SignalType;\n  @observable\n  defaultValue: string;\n\n  description?: string;\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      name: this.name,\n      type: this.type,\n      defaultValue: this.defaultValue,\n    };\n  }\n\n  static fromJson(json: JsonType): Signal | undefined {\n    if (\n      typeof json[\"name\"] === \"string\" &&\n      Object.keys(SignalType).includes(json[\"type\"] as any)\n    ) {\n      return new Signal(json);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(d: { name?: string; description?: string; type?: SignalType; defaultValue?: string }) {\n    this.name = d.name ?? \"\";\n    this.description = d.description;\n    this.type = d.type ?? SignalType.bool;\n    this.defaultValue = d.defaultValue ?? \"\";\n  }\n}\n\n// const _nBuilder = {\n//   [StepType.SIMPLE]: (n, json) => {\n//     const type = json !== undefined ? json[\"type\"] : undefined;\n//     if (typeof type === \"string\" && Object.keys(StepType).includes(type)) {\n//       return new SimpleStep(n);\n//     }\n//     return new SimpleStep(n);\n//   },\n//   [StepType.MACRO]: (n, json) => new MacroStep(n),\n//   [StepType.ENCLOSING]: (n, json) => new EnclosingStep(n),\n//   [StepType.INITIAL]: (n, json) => new InitialStep(n),\n// };\n\nexport const gemmaBuilders: DataBuilder<Step, GemmaGraphcet, Transition> = {\n  graphBuilder: (g, json) => new GemmaGraphcet(g, json),\n  nodeBuilder: (n, json) => {\n    console.log(json);\n    const type = json !== undefined ? json[\"type\"] : undefined;\n    if (typeof type === \"string\" && Object.keys(StepType).includes(type)) {\n      switch (type) {\n        case StepType.ENCLOSING:\n          return new EnclosingStep(n, json);\n        case StepType.INITIAL:\n          return new InitialStep(n, json);\n        case StepType.MACRO:\n          return new MacroStep(n, json);\n        case StepType.SIMPLE:\n          return new SimpleStep(n, json);\n      }\n    }\n    return new SimpleStep(n);\n  },\n  connectionBuilder: (c, json) => new Transition(c, json),\n};\n\nexport const make5NodesGraph = (db: IndexedDB): RootStoreModel<\n  Step,\n  GemmaGraphcet,\n  Transition\n> => {\n  const rootStore = new RootStoreModel<Step, GemmaGraphcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const s1 = rootStore.addNode(StepType.INITIAL, { x: 72, y: 60 });\n  const s2 = rootStore.addNode(StepType.MACRO, { x: 261, y: 170 });\n\n  const _t = new ConnModel(\n    s1!,\n    s2!,\n    (c) =>\n      new Transition(c, {\n        name: \"Emergency\",\n        conditionExpression: \"I1 & I2\",\n      })\n  );\n  rootStore.globalData.workingFamilyTransitions.push(_t.data);\n\n  [\n    s1,\n    s2,\n    rootStore.addNode(StepType.ENCLOSING, { x: 441, y: 316 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 211, y: 410 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 441, y: 500 }),\n  ].forEach((s, index) => s?.setName(`S${index + 1}`));\n\n  s1!.data.family = ProcedureType.A;\n  s2!.data.family = ProcedureType.D;\n  rootStore.selectNode(s1!);\n\n  rootStore.selectingInput(s1!);\n  const conn = rootStore.assignInput(s2!);\n\n  rootStore.selectConnection(conn);\n  rootStore.globalData.signals.push(new Signal({ name: \"\" }));\n  return rootStore;\n};\n\nexport const makeBaseGemmaTemplate = (db: IndexedDB): RootStoreModel<\n  Step,\n  GemmaGraphcet,\n  Transition\n> => {\n  const rootStore = new RootStoreModel<Step, GemmaGraphcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const nodesRaw: {\n    [key in ProcedureType]: {\n      [key: string]: { type: StepType; x: number; y: number };\n    };\n  } = {\n    [ProcedureType.A]: {\n      A6: { type: StepType.INITIAL, x: 60, y: 60 },\n      A1: { type: StepType.SIMPLE, x: 200, y: 25 },\n      A2: { type: StepType.SIMPLE, x: 180, y: 300 },\n      A3: { type: StepType.SIMPLE, x: 270, y: 300 },\n      A4: { type: StepType.SIMPLE, x: 360, y: 200 },\n      A5: { type: StepType.MACRO, x: 60, y: 300 },\n      A7: { type: StepType.MACRO, x: 160, y: 200 },\n    },\n    [ProcedureType.D]: {\n      D1: { type: StepType.MACRO, x: 60, y: 600 },\n      D2: { type: StepType.SIMPLE, x: 90, y: 500 },\n      D3: { type: StepType.ENCLOSING, x: 200, y: 500 },\n    },\n    [ProcedureType.F]: {\n      F1: { type: StepType.MACRO, x: 500, y: 500 },\n      F2: { type: StepType.MACRO, x: 500, y: 200 },\n      F3: { type: StepType.MACRO, x: 640, y: 200 },\n      F4: { type: StepType.ENCLOSING, x: 650, y: 60 },\n      F5: { type: StepType.ENCLOSING, x: 650, y: 350 },\n      F6: { type: StepType.ENCLOSING, x: 650, y: 500 },\n    },\n  };\n\n  const nodes: {\n    [key: string]: NodeModel<Step, GemmaGraphcet, Transition>;\n  } = {};\n\n  for (const [family, nn] of Object.entries(nodesRaw)) {\n    for (const [k, v] of Object.entries(nn)) {\n      const n = rootStore.addNode(v.type, { x: v.x, y: v.y });\n      n?.setName(k);\n      n!.data.family = family as ProcedureType;\n      nodes[k] = n!;\n    }\n  }\n\n  const connextions = {\n    A1: [\"F2\", \"F1\", \"F6\", \"F5\", \"F4\"],\n    A2: [\"A1\"],\n    A3: [\"A4\"],\n    A4: [\"F1\"],\n    A5: [\"A7\"],\n    A6: [\"A1\"],\n    A7: [\"A4\"],\n    F1: [\"F3\", \"A2\", \"A3\", \"D1\", \"D3\"],\n    F2: [\"F1\"],\n    F3: [\"A1\"],\n    F4: [\"A6\"],\n    D1: [\"D2\", \"A5\"],\n    D2: [\"A5\"],\n    D3: [\"A2\", \"A3\"],\n  };\n\n  for (const [k, v] of Object.entries(connextions)) {\n    for (const to of v) {\n      rootStore.addConnection(nodes[k], nodes[to]);\n    }\n  }\n\n  const _t = new ConnModel(\n    nodes[\"A1\"]!,\n    nodes[\"D1\"]!,\n    (c) =>\n      new Transition(c, {\n        name: \"Emergency\",\n        conditionExpression: \"I1 & I2\",\n      })\n  );\n  rootStore.globalData.workingFamilyTransitions.push(_t.data);\n\n  const a1 = nodes[\"A1\"]!;\n  rootStore.selectNode(a1);\n  rootStore.selectConnection(a1.outputs[0]);\n\n  return rootStore;\n};\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { SimpleBooleanLexer } from \"../grammar/SimpleBooleanLexer\";\nimport {\n  ExpressionContext,\n  IdentifierExpressionContext,\n  IdentifierNumExpressionContext,\n  SimpleBooleanParser,\n} from \"../grammar/SimpleBooleanParser\";\nimport { SimpleBooleanVisitor } from \"../grammar/SimpleBooleanVisitor\";\nimport { AbstractParseTreeVisitor } from \"antlr4ts/tree/AbstractParseTreeVisitor\";\nimport { ErrorNode } from \"antlr4ts/tree/ErrorNode\";\nimport { ParseTree } from \"antlr4ts/tree/ParseTree\";\n\n// Extend the AbstractParseTreeVisitor to get default visitor behaviour\nclass ErrorVisitor\n  extends AbstractParseTreeVisitor<string[]>\n  implements SimpleBooleanVisitor<string[]> {\n  isInvalid: boolean = false;\n  constructor(public signals: { numSignals: string[]; boolSignals: string[] }) {\n    super();\n  }\n\n  defaultResult() {\n    return [];\n  }\n\n  aggregateResult(aggregate: string[], nextResult: string[]) {\n    return aggregate.concat(nextResult);\n  }\n\n  visitErrorNode(node: ErrorNode): string[] {\n    if (this.isInvalid) {\n      return [];\n    }\n    this.isInvalid = true;\n    return [\"Invalid boolean expression\"];\n  }\n\n  visitIdentifierExpression(n: IdentifierExpressionContext): string[] {\n    const valid = this.signals.boolSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined boolean signal`];\n  }\n\n  visitIdentifierNumExpression(n: IdentifierNumExpressionContext): string[] {\n    const valid = this.signals.numSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined numeric signal`];\n  }\n\n  visitExpression(n: ExpressionContext): string[] {\n    console.log(\"Dddddddddddddddddddddd\");\n    if (n.exception !== undefined && !this.isInvalid) {\n      this.isInvalid = true;\n      return [\"Invalid boolean expression\"];\n    }\n    return [];\n  }\n}\n\nexport const parseBoolExpression = (\n  text: string,\n  signals: { numSignals: string[]; boolSignals: string[] }\n): { tree: ExpressionContext; errors: string[] } => {\n  // Create the lexer and parser\n  let inputStream = CharStreams.fromString(text);\n  let lexer = new SimpleBooleanLexer(inputStream);\n  let tokenStream = new CommonTokenStream(lexer);\n  let parser = new SimpleBooleanParser(tokenStream);\n\n  // Parse the input, where `compilationUnit` is whatever entry point you defined\n\n  let tree = parser.parse();\n\n  // Create the visitor\n  const countFunctionsVisitor = new ErrorVisitor(signals);\n  // Use the visitor entry point\n  const errors = countFunctionsVisitor.visit(tree);\n\n  if (tree.exception !== undefined) {\n    countFunctionsVisitor.isInvalid = true;\n    errors.push(\"Invalid boolean expression\");\n  }\n\n  let toProcess: ParseTree[] | undefined = tree.children;\n  if (toProcess !== undefined && !countFunctionsVisitor.isInvalid) {\n    while (toProcess.length !== 0) {\n      const curr: ParseTree | undefined = toProcess.pop()!;\n      if (curr instanceof ExpressionContext && curr.exception !== undefined) {\n        errors.push(\"Invalid boolean expression\");\n        break;\n      } else if (curr.childCount > 0) {\n        toProcess = toProcess.concat(\n          [...Array(curr.childCount).keys()].map((i) => curr.getChild(i))\n        );\n      }\n    }\n  }\n  return { tree, errors };\n};\n","export class VarId {\n  constructor(public text: string) {}\n\n  toString(): string {\n    return this.text;\n  }\n}\n\ntype Token =\n  | \"(\"\n  | \")\"\n  | \"AND\"\n  | \"OR\"\n  | \"NOT\"\n  | \"<\"\n  | \">\"\n  | \"=\"\n  | \"<=\"\n  | \">=\"\n  | VarId;\n\nexport const getCustomTokens = (t: string): [Token, number][] => {\n  const l: [Token, number][] = [];\n  let i = -1;\n  let omit = 0;\n  let signal = \"\";\n  const addSignal = () => {\n    if (signal.length !== 0) {\n      l.push([new VarId(signal), i - signal.length]);\n      signal = \"\";\n    }\n  };\n  const add = (v: Token) => {\n    addSignal();\n    l.push([v, i]);\n  };\n\n  for (const c of t) {\n    i++;\n    if (omit !== 0) {\n      omit--;\n      continue;\n    }\n    switch (c) {\n      case \" \":\n        addSignal();\n        break;\n      case \")\":\n      case \"(\":\n      case \"<\":\n      case \">\":\n        add(c);\n        break;\n      case \"=\":\n        const prevToken = l[l.length - 1];\n        const prev = prevToken[0];\n        const strPrev = prev instanceof VarId ? prev.text : prev;\n        if ([\"<\", \">\"].includes(strPrev) && prevToken[1] === i - 1) {\n          l[l.length - 1][0] = (prev + \"=\") as any;\n        } else {\n          add(c);\n        }\n        break;\n      case \"A\":\n        if (t.substring(i, i + 3) === \"AND\") {\n          omit = 2;\n          add(\"AND\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"O\":\n        if (t.substring(i, i + 2) === \"OR\") {\n          omit = 1;\n          add(\"OR\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"N\":\n        if (t.substring(i, i + 3) === \"NOT\") {\n          omit = 2;\n          add(\"NOT\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      default:\n        signal += c;\n        break;\n    }\n  }\n  if (signal.length !== 0) {\n    l.push([new VarId(signal), i - signal.length + 1]);\n  }\n  return l;\n};\n\ntype ParseR = { ok: boolean };\n\n// type Conv = (tokens: Token[]) => ParseR;\n\n// const _union = (fs: Array<Conv>) => {};\n\n// const _find = (token: Token): Conv => {\n//   return (ts) => {\n//     return { ok: ts[0] == token };\n//   };\n// };\n\ntype Item = (Token | Union)[];\n\ntype ExpType = \"VarId\" | \"comp\" | \"and\" | \"simpleExp\" | \"numOP\";\n\nclass Union {\n  constructor(\n    items: Partial<{ [key in ExpType]: (Token | \"SELF\" | Union)[] }>\n  ) {\n    this.variants = Object.values(items).map((l) => {\n      return l!.map((v) => (v === \"SELF\" ? this : v));\n    });\n  }\n  variants: Item[];\n}\n\n// type Val = Item | Union;\n\n// type Expression<V extends { [key: string]: Token }> = {\n//   name: ExpType;\n//   tokens: Item;\n//   p: (t: Token[]) => V;\n// };\n\n// export const getCustomParse = (tokens: Token[]) => {\n//   const varId: Expression<{ varId: VarId }> = {\n//     name: \"VarId\",\n//     p: (t) => ({ varId: t[0] as VarId }),\n//     tokens: [new VarId(\"\")],\n//   };\n\n//   const numSimple = new Union({\n//     VarId: [new VarId(\"\")], //TODO: decimal\n//   });\n\n//   const comparator = new Union([[\"<\"], [\">\"], [\"=\"], [\"<=\"], [\">=\"]]);\n\n//   const expSimple = new Union([\n//     [numSimple, comparator, numSimple],\n//     [new VarId(\"\")],\n//   ]);\n\n//   const expAnd = new Union([[expSimple, \"AND\", \"SELF\"], [expSimple]]);\n\n//   const exp = new Union([\n//     [\"(\", \"SELF\", \")\"],\n//     [\"NOT\", \"SELF\"],\n//     [expAnd, \"OR\", \"SELF\"],\n//     [expAnd],\n//   ]);\n\n//   for (const t of tokens) {\n//     matchPossibilities(t, exp);\n//   }\n// };\n\n// const matchPossibilities = (t: Token, possibilities: Union): void => {\n//   let i = -1;\n//   for (const variant of possibilities.variants) {\n//     i++;\n\n//     const curr = variant.pop();\n//     if (curr === undefined) {\n//     } else if (typeof curr == \"string\") {\n//       if (t == curr) {\n//       }\n//     } else if (curr instanceof Union) {\n//       matchPossibilities(t, curr);\n//     } else {\n//       if (t instanceof VarId) {\n//       } else {\n//       }\n//     }\n//   }\n// };\n","import { action, computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { JsonType } from \"../canvas/store\";\nimport { FieldSpec, StrFieldSpec } from \"../fields\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { ConnModel } from \"../node/node-model\";\nimport { PropertiesTable } from \"../properties/properties-table\";\nimport { parseBoolExpression } from \"./antlr_parser\";\nimport { getCustomTokens, VarId } from \"./custom_parser\";\nimport { GemmaGraphcet } from \"./gemma\";\nimport { Step } from \"./step\";\n\ntype GemmaConn = ConnModel<Step, GemmaGraphcet, Transition>;\n\nexport class Transition {\n  name: string;\n  // condition: Condition;\n  @computed\n  get condition(): Condition {\n    return new Condition(this.conditionExpression);\n  }\n  @observable\n  conditionExpression: string;\n  @observable\n  priority: number;\n  @computed\n  get priorityChoices() {\n    return [...Array(this.connection.from.outputs.length)].map(\n      (v, i) => \"\" + (i + 1)\n    );\n  }\n\n  errors = observable.map<string, string>();\n\n  spec: { [key: string]: FieldSpec } = {\n    conditionExpression: new StrFieldSpec({ default: \"\" }),\n  };\n\n  constructor(\n    private connection: GemmaConn,\n    d?: {\n      name?: string;\n      conditionExpression?: string;\n      priority?: number;\n    }\n  ) {\n    this.name = d?.name ?? \"\";\n    // this.condition = d?.condition ?? new Condition(\"\");\n    this.conditionExpression =\n      d?.conditionExpression ?? this.spec[\"conditionExpression\"].default;\n    this.priority = d?.priority ?? connection.from.outputs.length + 1;\n  }\n\n  @action.bound\n  setPriority = (v: string): void => {\n    const priority = parseInt(v);\n    if (this.priority === priority) {\n      return;\n    }\n    const transitions = this.connection.from.outputs;\n    if (this.priority > priority) {\n      transitions\n        .filter(\n          (t) => t.data.priority >= priority && t.data.priority < this.priority\n        )\n        .forEach((t) => t.data.priority++);\n    } else {\n      transitions\n        .filter(\n          (t) => t.data.priority <= priority && t.data.priority > this.priority\n        )\n        .forEach((t) => t.data.priority--);\n    }\n    this.priority = priority;\n  };\n\n  get from(): Step {\n    return this.connection.from.data;\n  }\n\n  get to(): Step {\n    return this.connection.to.data;\n  }\n\n  @computed\n  get connectionText(): string {\n    const cond = this.conditionExpression.substring(0, 20);\n    return `${this.priority}: ${cond}${\n      this.conditionExpression.length > 20 ? \"...\" : \"\"\n    }`;\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      conditionExpression: this.conditionExpression,\n      priority: this.priority,\n    };\n  }\n\n  @computed\n  get expressionErrors(): string[] {\n    const gemma = this.connection.graph.globalData;\n    try {\n      const { tree, errors } = parseBoolExpression(this.conditionExpression, {\n        boolSignals: gemma.boolSignals.map((s) => s.name),\n        numSignals: gemma.numSignals.map((s) => s.name),\n      });\n      console.log(tree);\n\n      return errors;\n    } catch (e) {\n      console.log(`EEEEEEEEEEEEEEEE ${e}`);\n    }\n    return [];\n  }\n\n  ConnectionView = observer(() => {\n    return (\n      <>\n        <PropertiesTable key=\"table\">\n          <tr key=\"priority\">\n            <td>Priority</td>\n            <td>\n              <ChoiceField\n                keys={this.priorityChoices}\n                value={\"\" + this.priority}\n                setValue={this.setPriority}\n              />\n            </td>\n          </tr>\n          <tr key=\"condition\">\n            <td>Condition</td>\n            <td>{<ConditionInput m={this} />}</td>\n          </tr>\n        </PropertiesTable>\n        <div>\n          <h4 style={{ margin: \"0\" }}>Errors</h4>\n          {this.expressionErrors.length === 0 && \"No errors\"}\n          <ul style={{ color: \"indianred\", marginTop: \"0\" }} key=\"errors\">\n            {this.expressionErrors.map((err, index) => (\n              <li key={index}>{err}</li>\n            ))}\n          </ul>\n        </div>\n      </>\n    );\n  });\n}\n\nconst ConditionInput = observer(\n  ({ m }: { m: { conditionExpression: string } }) => {\n    const _tokens = getCustomTokens(m.conditionExpression);\n    let prevIndex = 0;\n    let _spanStyleRef = useRef<HTMLSpanElement>(null);\n    const sharedStyle: React.CSSProperties = {\n      font: \"400 15px monospace\",\n      width: \"180px\",\n      height: \"60px\",\n      overflow: \"auto\",\n      borderRadius: \"5px\",\n    };\n\n    return (\n      <div style={{ width: \"180px\", position: \"relative\" }} className=\"center\">\n        <span\n          style={{\n            ...sharedStyle,\n            position: \"absolute\",\n            top: 0,\n            padding: \"3px\",\n            textAlign: \"initial\",\n            whiteSpace: \"pre-line\",\n          }}\n          ref={_spanStyleRef}\n        >\n          {_tokens.map(([c, textIndex], index) => {\n            let color: string;\n            if (c instanceof VarId) {\n              color = \"black\";\n            } else if ([\"AND\", \"NOT\", \"OR\"].includes(c)) {\n              color = \"blue\";\n            } else {\n              color = \"brown\";\n            }\n            const whiteSpace = textIndex - prevIndex;\n            const text = \" \".repeat(whiteSpace) + c.toString();\n            prevIndex = textIndex + c.toString().length;\n            return (\n              <span key={index} style={{ color }}>\n                {text}\n              </span>\n            );\n          })}\n        </span>\n        <textarea\n          onScroll={(s) => {\n            _spanStyleRef.current!.scrollTo(0, s.currentTarget.scrollTop);\n          }}\n          style={{\n            ...sharedStyle,\n            background: \"transparent\",\n            color: \"transparent\",\n            caretColor: \"black\",\n            position: \"relative\",\n            resize: \"none\",\n          }}\n          spellCheck={false}\n          value={m.conditionExpression}\n          onSelect={(e) => {\n            // console.log(e.currentTarget.selectionStart);\n          }}\n          onChange={(e) => {\n            m.conditionExpression = e.currentTarget.value;\n          }}\n        ></textarea>\n      </div>\n    );\n  }\n);\n\nexport class Condition {\n  constructor(public expression: string) {}\n}\n\n// const processParsedExpression = (exp: ExpressionContext): {} => {\n//   const toProcess = [...exp.children];\n//   const numIds = [];\n//   const boolIds = [];\n\n//   while (toProcess.length !== 0) {\n//     const n = toProcess.pop()!;\n//   }\n\n//   return {};\n// };\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { ConfigView } from \"./canvas/config-view\";\nimport { createIndexedDB, IndexedDB } from \"./canvas/persistence\";\nimport { RootStoreModel, GlobalData } from \"./canvas/store\";\nimport { NodeData, ConnectionData } from \"./node/node-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\nimport { gemmaBuilders, makeBaseGemmaTemplate } from \"./step/gemma\";\nimport { importJson } from \"./utils\";\n\nexport const storeContext = React.createContext<RootStoreModel<\n  any,\n  any,\n  any\n> | null>(null);\n\nexport function useStore<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>() {\n  const store = React.useContext<RootStoreModel<D, G, C> | null>(storeContext);\n  if (!store) {\n    throw Error(\"useStore should be used inside a Store provider.\");\n  }\n  return store;\n}\n\ntype RootStore = RootStoreModel<any, any, any>;\n\nexport function App() {\n  const [globalDB, setDB] = React.useState<IndexedDB | null>(null);\n  const [store, setStore] = React.useState<RootStore | null>(null);\n  const _isReset = store && store.resetStore;\n  React.useEffect(() => {\n    if (!store) {\n      createIndexedDB().then(async (db) => {\n        setDB(db);\n        const graphs = await db.fetchGraphs();\n\n        let _store: RootStore;\n        const graph = graphs[0];\n        if (graph !== undefined) {\n          const graphExt = await db.loadGraph(graph.key);\n          _store = new RootStoreModel({\n            db,\n            json: { graph, ...graphExt },\n            builders: gemmaBuilders,\n          });\n        } else {\n          _store = makeBaseGemmaTemplate(db);\n        }\n\n        (window as any).store = _store;\n        setStore(_store);\n      });\n    } else if (store.resetStore) {\n      setStore(null);\n    }\n  }, [store, _isReset]);\n\n  if (!store) {\n    return <div className=\"center\">Cargando...</div>;\n  }\n\n  return (\n    <storeContext.Provider value={store}>\n      <div\n        className=\"row\"\n        style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n      >\n        {/* <div className=\"col\">\n          <MainMenu items={Object.keys(rootStore.builders.nodeBuilder)} />\n        </div> */}\n        <div\n          className=\"col\"\n          style={{\n            width: \"0px\",\n            background: \"rgba(250,250,250,0.7)\",\n            flex: \"1 0 auto\",\n          }}\n        >\n          <div className=\"row\" style={{ minHeight: 0, flex: 1 }}>\n            <div className=\"col\">\n              <div className=\"row\" style={{ justifyContent: \"flex-end\" }}>\n                <Button\n                  onClick={(e) => {\n                    store.saveModel();\n                  }}\n                >\n                  Save\n                </Button>\n                <Button\n                  onClick={(e) => {\n                    store.downloadModel();\n                  }}\n                >\n                  Export\n                </Button>\n                <Button>\n                  <label\n                    htmlFor=\"import-file-input\"\n                    style={{ margin: 0, width: \"100%\", cursor: \"pointer\" }}\n                  >\n                    Import\n                  </label>\n                  <input\n                    type=\"file\"\n                    id=\"import-file-input\"\n                    accept=\"application/json\"\n                    style={{ display: \"none\" }}\n                    onChange={async (e) => {\n                      const json = await importJson(e);\n                      if (typeof json === \"string\") {\n                        try {\n                          const val = JSON.parse(json);\n                          const _store = new RootStoreModel({\n                            db: globalDB!,\n                            json: val,\n                            builders: gemmaBuilders,\n                          });\n                          setStore(_store);\n                        } catch (e) {\n                          console.log(e);\n                        }\n                      }\n                    }}\n                  />\n                </Button>\n              </div>\n              <MainCanvas />\n            </div>\n            <ConfigView />\n          </div>\n          <PropertiesView />\n        </div>\n      </div>\n    </storeContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp, faTrashAlt);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}