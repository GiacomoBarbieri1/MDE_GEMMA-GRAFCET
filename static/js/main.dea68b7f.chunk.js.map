{"version":3,"sources":["canvas/arrow.tsx","canvas/canvas.tsx","utils.ts","canvas/config-view.tsx","canvas/persistence.ts","node/node-model.tsx","canvas/store.tsx","properties/properties-table.tsx","properties/properties-view.tsx","step/custom_parser.ts","fields/choice-field.tsx","step/step.tsx","fields/primitive-field.tsx","step/gemma-templates.ts","grammar/SimpleBooleanLexer.ts","grammar/SimpleBooleanParser.ts","step/antlr_parser.ts","step/transition.tsx","codegen/file-system.ts","step/macro-step.ts","node/node.tsx","step/gemma.tsx","step/enclosing-step.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["triangleFromCenter","x","y","height","width","y0","ArrowView","observer","changeX","changeY","connection","rootStore","useStore","from","to","isSelected","connectionStartPosition","data","undefined","b","top","bottom","left","right","getStartPositionConnection","x1","y1","x2","y2","dy","dx","m","Math","abs","deltaX","xa","ya","xm","ym","degrees","atan2","PI","style","strokeWidth","stroke","opacity","isHidden","d","onClick","_","selectConnection","RectAndText","texts","connectionText","rectFill","transform","padding","React","useState","textRefs","setTextRefs","curr","reduce","p","c","text","prev","setPrev","fullbbox","getBBox","max","useEffect","id","setTimeout","clearTimeout","xPrev","fill","cursor","map","t","index","bbox","key","ref","e","nn","MainCanvas","ops","nodes","values","overflow","flex","position","border","background","margin","borderRadius","globalData","CanvasView","flatMap","op","inputs","defaultResizeEnable","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","k","v","downloadToClient","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","importJson","event","files","target","Promise","resolve","window","alert","reader","FileReader","onload","result","onabort","onerror","readAsText","DBStores","ConfigView","connections","forEach","get","set","push","Map","orderedOps","counts","filter","withDependencies","length","numProcessed","size","slice","outs","dep","delete","minWidth","defaultSize","boxShadow","enable","className","borderBottom","Button","downloadSourceCode","generateMainFile","openDB","upgrade","db","createObjectStore","graph","keyPath","autoIncrement","node","createIndex","IndexedDB","getKeyFromConnection","path","connectionWithKey","graphKey","assign","this","getAll","value","put","tx","transaction","objectStore","dbKey","openCursor","continue","done","all","getAllFromIndex","_g","n","store","add","updateMany","close","clear","keys","items","val","Error","item","ConnModel","dataBuilder","json","selectedConnection","toJson","observable","computed","NodeModel","resizeObserver","element","setElement","setSize","getBoundingClientRect","disconnect","ResizeObserver","observe","name","conn","outputs","array","action","rect","RootStoreModel","builders","hideOnDelete","saveModel","clearDB","updateGraph","addNodes","addConnections","downloadModel","JSON","stringify","_addToZip","root","dir","newRoot","folder","when","zip","JSZip","sourceCode","generateSourceCode","generateAsync","graphBuilder","v4","nodeBuilder","addConnection","selectedNode","next","_n","initState","nodeType","pos","canAddNode","_in","remove","_out","selectingInputFor","addEventListener","_selectingInputKeyListener","connectionBuilder","addOutput","removeEventListener","ev","PropertiesTable","children","PropertiesTableStyled","PropertiesTableNode","self","spec","plotField","model","nInputs","variant","styled","table","PropertiesView","inner","maxHeight","maxWidth","justifyContent","backgroundColor","display","alignItems","IconButton","activateNode","removeNode","icon","color","activateConnection","removeConnection","ConnectionView","View","minHeight","VarId","StepType","ProcedureType","ButtonsDiv","div","ChoiceFieldSpec","choices","default","onChange","isObservableMap","Symbol","toStringTag","mobxProp","types","optional","string","Array","setValue","ChoiceField","maxButton","Select","autoWidth","marginBottom","disabled","MenuItem","ButtonGroup","aria-label","buttonStyle","StrFieldSpec","maxLength","minLength","multiline","errors","TextField","fullWidth","inputProps","textAlign","error","BoolFieldSpec","required","boolean","Switch","checked","BaseStep","l","Number","POSITIVE_INFINITY","CONTAINER","isInitial","SIMPLE","toString","_color","A","D","F","family","innerStyle","wrapper","nodeHeight","ENCLOSING","MACRO","borderTop","borderRight","borderLeft","description","reaction","console","log","otherInitial","automationSystem","steps","find","s","inputNodes","every","aFamily","dFamily","fFamily","sort","priority","_transitions","transitions","concat","indexOf","EnclosingDecoration","H","textOrEmpty","cond","templateCondition","expressionTokens","tok","join","templateGemmaGrafcetSimpleStep","isNested","templateTransitions","templateGemmaGrafcetNestedStep","templateFBEntry","_isInner","innerTransitionsLength","isNegated","_evaluateComplete","templateGemmaGrafcet","initialStep","step","replace","SimpleBooleanLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","AND","OR","NOT","TRUE","FALSE","GT","GE","LT","LE","EQ","LPAREN","RPAREN","DECIMAL","IDENTIFIER","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","SimpleBooleanParser","ParserATNSimulator","_localctx","ParseContext","_ctx","state","enterRule","RULE_parse","enterOuterAlt","expression","match","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","ExpressionContext","RULE_expression","sync","interpreter","adaptivePredict","_input","NotExpressionContext","OrExpressionContext","_left","expressionAnd","_right","AndParentExpressionContext","ExpressionAndContext","RULE_expressionAnd","AndExpressionContext","expressionSimple","SimpleExpressionContext","ExpressionSimpleContext","RULE_expressionSimple","ComparatorExpressionContext","numExpression","_op","comparator","IdentifierExpressionContext","ParenExpressionContext","NumExpressionContext","RULE_numExpression","LA","IdentifierNumExpressionContext","DecimalExpressionContext","NoViableAltException","_la","ComparatorContext","RULE_comparator","recoverInline","Token","matchedEOF","reportMatch","consume","Parser","parent","invokingState","getRuleContext","getToken","listener","enterParse","exitParse","visitor","visitParse","visitChildren","ParserRuleContext","ctx","copyFrom","enterNotExpression","exitNotExpression","visitNotExpression","enterOrExpression","exitOrExpression","visitOrExpression","enterAndParentExpression","exitAndParentExpression","visitAndParentExpression","enterAndExpression","exitAndExpression","visitAndExpression","enterSimpleExpression","exitSimpleExpression","visitSimpleExpression","i","getRuleContexts","enterComparatorExpression","exitComparatorExpression","visitComparatorExpression","enterIdentifierExpression","exitIdentifierExpression","visitIdentifierExpression","enterParenExpression","exitParenExpression","visitParenExpression","enterIdentifierNumExpression","exitIdentifierNumExpression","visitIdentifierNumExpression","enterDecimalExpression","exitDecimalExpression","visitDecimalExpression","tryGetToken","enterComparator","exitComparator","visitComparator","ErrorVisitor","signals","isInvalid","aggregate","nextResult","boolSignals","includes","numSignals","AbstractParseTreeVisitor","Transition","bound","conditionExpression","priorityChoices","setPriority","ConditionInput","expressionErrors","marginTop","err","substring","hasNegation","textDecoration","omit","signal","addSignal","prevToken","strPrev","getCustomTokens","gemma","inputStream","CharStreams","fromString","lexer","tokenStream","CommonTokenStream","tree","parse","countFunctionsVisitor","visit","toProcess","pop","childCount","getChild","parseBoolExpression","parseInt","prevIndex","_spanStyleRef","useRef","font","whiteSpace","textIndex","repeat","onScroll","current","scrollTo","currentTarget","scrollTop","caretColor","spellCheck","SourceItem","SourceFile","SourceDirectory","macroStepTemplate","SignalTypeBase","SignalType","SignalTypeSize","StyledNode","NodeView","params","onDrag","useCallback","move","deltaY","selectingInput","isValidInput","assignInput","selectNode","bounds","signalSizeMap","bool","int","uint","real","GemmaGrafcet","showDelete","setShowDelete","flexDirection","paddingLeft","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","SignalRow","removeSignal","findIndex","s2","alignSelf","Signal","w","h","_d","isArray","fromJson","addNode","setName","some","main","globals","defaultValue","trim","validator","regexSignalDefaultValid","typeBase","hasError","regex","test","defaultValueError","message","Tooltip","title","setTypeBase","typeSize","open","align","typePrim","base","lreal","startsWith","charAt","signalTypeToPrimitives","sizeStr","gemmaBuilders","g","makeBaseGemmaTemplate","nodesRaw","A1","A2","A3","A4","A5","A6","A7","D1","D2","D3","F1","F2","F3","F4","F5","F6","a1","storeContext","createContext","useContext","App","globalDB","setDB","setStore","_isReset","resetStore","createIndexedDB","then","fetchGraphs","graphs","loadGraph","graphExt","_store","Provider","TopMenu","isResetDialogOpen","setIsResetDialogOpen","toggleDialog","Dialog","onClose","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","htmlFor","accept","Boolean","location","hostname","library","faChevronDown","faChevronUp","faTrashAlt","faEye","faEyeSlash","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dea68b7f.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NodeModel, ConnModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\nexport type ArrowModel = {\n  from: NodeModel<any, any, any>;\n  to: NodeModel<any, any, any>;\n};\n\ntype ArrowViewProps = { connection: ConnModel<any, any, any> };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\nconst getStartPositionConnection = (\n  from: NodeModel<any, any, any>\n): { x: number; y: number } => {\n  const connectionStartPosition = (from.data as NodeData<any, any, any>)\n    .connectionStartPosition;\n\n  if (connectionStartPosition !== undefined) {\n    const b = connectionStartPosition();\n    if (b !== undefined) {\n      let x = from.x;\n      let y = from.y;\n      if (\"top\" in b) {\n        y += b.top;\n      } else {\n        y += from.height - b.bottom;\n      }\n\n      if (\"left\" in b) {\n        x += b.left;\n      } else {\n        y += from.width - b.right;\n      }\n      return { x, y };\n    }\n  }\n  return { x: from.x + from.width / 2, y: from.y + from.height / 2 };\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ connection }: ArrowViewProps) => {\n    const rootStore = useStore();\n    const { from, to, isSelected } = connection;\n    const { x: x1, y: y1 } = getStartPositionConnection(from);\n\n    const [x2, y2] = [to.x + to.width / 2, to.y + to.height / 2];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{\n            strokeWidth: 2,\n            stroke: \"black\",\n            opacity: connection.isHidden ? 0.07 : 1,\n          }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onClick={(_) => {\n            rootStore.selectConnection(connection);\n          }}\n        />\n        {!connection.isHidden && (\n          <>\n            <RectAndText\n              connection={connection}\n              texts={connection.data.connectionText}\n              x={xm}\n              rectFill={isSelected ? \"#eeedff\" : \"#eee\"}\n              y={ym}\n              onClick={(_) => rootStore.selectConnection(connection)}\n            />\n            <path\n              d={triangleFromCenter(xa, ya)}\n              transform={`rotate(${degrees} ${xa} ${ya})`}\n            />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  texts: { text: string; style?: React.CSSProperties }[];\n  connection: ConnModel<any, any, any>;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n  onClick: (event: React.MouseEvent<any, MouseEvent>) => void;\n}> = observer(\n  ({\n    texts,\n    x: xm,\n    y: ym,\n    rectFill = \"#eee\",\n    padding = 3,\n    onClick,\n    connection,\n  }) => {\n    const [textRefs, setTextRefs] = React.useState<SVGTextElement[]>([]);\n    const curr = texts.reduce((p, c) => p + c.text, \"\");\n    const [prev, setPrev] = React.useState(curr);\n    const fullbbox = textRefs.reduce(\n      (p, c) => {\n        if (c === undefined) {\n          return p;\n        }\n        const b = c.getBBox();\n\n        return {\n          width: p.width + b.width,\n          height: Math.max(p.height, b.height),\n        };\n      },\n      { width: 0, height: 0 }\n    );\n    React.useEffect(() => {\n      if (prev !== curr) {\n        const id = setTimeout(() => setPrev(curr), 0);\n        return () => clearTimeout(id);\n      }\n    });\n    let xPrev = 0;\n    return (\n      <>\n        <rect\n          width={fullbbox.width + padding * 2}\n          height={fullbbox.height + padding * 2}\n          x={xm - fullbbox.width / 2 - padding}\n          y={ym - fullbbox.height + padding}\n          fill={rectFill}\n          onClick={onClick}\n          style={{ cursor: \"pointer\" }}\n        ></rect>\n        {texts.map((t, index) => {\n          const bbox = textRefs[index]?.getBBox();\n          const x =\n            (fullbbox !== undefined ? xm - fullbbox.width / 2 : xm) + xPrev;\n          xPrev += bbox !== undefined ? bbox.width : 0;\n          return (\n            <text\n              key={`${connection.from.key}${connection.to.key}${index}`}\n              x={x}\n              y={ym + 2}\n              fill=\"black\"\n              ref={(e) => {\n                if (e === null || e === undefined || !!textRefs[index]) return;\n                const nn = [...textRefs];\n                nn[index] = e;\n                setTextRefs(nn);\n              }}\n              onClick={onClick}\n              style={{ cursor: \"pointer\", ...(t.style ?? {}) }}\n            >\n              {t.text}\n            </text>\n          );\n        })}\n      </>\n    );\n  }\n);\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  const ops = [...rootStore.nodes.values()];\n  return (\n    <div style={{ overflow: \"auto\", flex: \"1\" }}>\n      <div\n        style={{\n          position: \"relative\",\n          border: \"1px solid #eee\",\n          background: \"#fff\",\n          margin: \"10px\",\n          borderRadius: \"6px\",\n          flex: 1,\n          height: \"1000px\",\n          width: \"1200px\",\n        }}\n      >\n        <rootStore.globalData.CanvasView/>\n        <svg style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}>\n          {ops\n            .flatMap((op) => op.inputs)\n            .map((connection) => (\n              <ArrowView\n                connection={connection}\n                key={connection.from.key + connection.to.key}\n              />\n            ))}\n        </svg>\n      </div>\n    </div>\n  );\n});\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce(\n    (p, [k, v]) => {\n      if (v !== undefined) {\n        p[k as keyof typeof defaultResizeEnable] = v;\n      }\n      return p;\n    },\n    { ...defaultResizeEnable }\n  );\n}\n\nexport function downloadToClient(\n  content: BlobPart,\n  fileName: string,\n  contentType: string\n) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: contentType });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function importJson(\n  event: React.ChangeEvent<HTMLInputElement>\n): Promise<string | ArrayBuffer | null | undefined> {\n  const files = event.target.files;\n  return new Promise((resolve, _) => {\n    if (files !== null) {\n      const file = files[0];\n      if (file.type !== \"application/json\") {\n        window.alert(\n          \"Debes seleccionar un archivo válido, la extensión debe ser '.json'.\"\n        );\n        return resolve(undefined);\n      }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          resolve(e.target?.result);\n        };\n        reader.onabort = (e) => {\n          resolve(undefined);\n        };\n        reader.onerror = (e) => {\n          resolve(undefined);\n        };\n        reader.readAsText(file);\n    } else {\n      resolve(undefined);\n    }\n  });\n}\n","import Button from \"@material-ui/core/Button\";\nimport { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeModel } from \"../node/node-model\";\nimport { resizableEnable } from \"../utils\";\nimport { GlobalData } from \"./store\";\n\ntype Props = {};\n\nexport const ConfigView: React.FC<Props> = observer(<\n  G extends GlobalData<any>\n>() => {\n  const rootStore = useStore<any, G, any>();\n  const ops = [...rootStore.nodes.values()];\n  const connections = ops.reduce((p, c) => {\n    c.inputs.forEach((v) => {\n      let m = p.get(v.to);\n      if (m === undefined) {\n        m = [];\n        p.set(v.to, m);\n      }\n      m.push(c);\n    });\n    return p;\n  }, new Map<NodeModel<any, any, any>, NodeModel<any, any, any>[]>());\n\n  const orderedOps: NodeModel<any, any, any>[] = [];\n  const counts = new Map(\n    ops\n      .filter((op) => {\n        const withDependencies = op.data.length !== 0;\n        if (!withDependencies) {\n          orderedOps.push(op);\n        }\n        return withDependencies;\n      })\n      .map((op) => [op, op.data.length])\n  );\n  let numProcessed = 0;\n  while (counts.size !== 0 && orderedOps.length !== numProcessed) {\n    for (let k of orderedOps.slice(numProcessed)) {\n      numProcessed += 1;\n      const outs = connections.get(k);\n      if (outs === undefined) continue;\n\n      for (let dep of outs) {\n        const m = counts.get(dep)!;\n        if (m === 1) {\n          counts.delete(dep);\n          orderedOps.push(dep);\n        } else {\n          counts.set(dep, m - 1);\n        }\n      }\n    }\n  }\n\n  if (counts.size !== 0) {\n    // CICLE ?\n  }\n\n  return (\n    <Resizable\n      minWidth={200}\n      defaultSize={{ height: \"auto\", width: 250 }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ left: true })}\n    >\n      <div className=\"col\" style={{ height: \"100%\" }}>\n        <div style={{ borderBottom: \"rgb(221 220 220) solid 1.5px\" }}>\n          <Button\n            onClick={async (_) => {\n              rootStore.downloadSourceCode();\n            }}\n          >\n            Download Code\n          </Button>\n        </div>\n        <div\n          style={{\n            overflow: \"auto\",\n            height: \"100%\",\n            padding: \"0 10px\",\n            flex: 1,\n          }}\n        >\n          <pre>{rootStore.globalData.generateMainFile}</pre>\n        </div>\n      </div>\n    </Resizable>\n  );\n});\n","import { DBSchema, IDBPDatabase, openDB } from \"idb\";\nimport { JsonType } from \"./store\";\n\nconst DB_NAME = \"GemmaGrafcet\";\nenum DBStores {\n  graph = \"graph\",\n  node = \"node\",\n  connection = \"connection\",\n}\n\nexport type GraphJson = {\n  key: string;\n  data: JsonType;\n};\n\nexport type NodeJson = {\n  key: string;\n  name: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  isHidden: boolean;\n  data: JsonType;\n};\n\ntype _NodeJson = NodeJson & {\n  graphKey: string;\n};\n\nexport type ConnectionJson = {\n  from: string;\n  to: string;\n  isHidden: boolean;\n  data: JsonType;\n};\n\ntype _ConnectionJson = ConnectionJson & {\n  key: string;\n  graphKey: string;\n};\n\ninterface MyDB extends DBSchema {\n  [DBStores.graph]: {\n    key: string;\n    value: GraphJson;\n  };\n  [DBStores.node]: {\n    key: string;\n    value: _NodeJson;\n    indexes: { \"by-graph\": string };\n  };\n  [DBStores.connection]: {\n    key: string;\n    value: _ConnectionJson;\n    indexes: { \"by-graph\": string };\n  };\n}\n\nexport async function createIndexedDB() {\n  const db = await openDB<MyDB>(DB_NAME, 1, {\n    upgrade(db) {\n      db.createObjectStore(DBStores.graph, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n\n      const nodeStore = db.createObjectStore(DBStores.node, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      nodeStore.createIndex(\"by-graph\", \"graphKey\");\n\n      const connStore = db.createObjectStore(DBStores.connection, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      connStore.createIndex(\"by-graph\", \"graphKey\");\n    },\n  });\n  return new IndexedDB(db);\n}\n\nexport function sameKeys(path: ConnectionJson, path2: ConnectionJson) {\n  return getKeyFromConnection(path) === getKeyFromConnection(path2);\n}\n\nexport function getKeyFromConnection(path: ConnectionJson) {\n  return `${path.from}_${path.to}`;\n}\n\nexport function connectionWithKey(\n  graphKey: string,\n  path: ConnectionJson\n): _ConnectionJson {\n  return Object.assign(path, { key: getKeyFromConnection(path), graphKey });\n}\n\nexport class IndexedDB {\n  constructor(private db: IDBPDatabase<MyDB>) {}\n\n  //\n  // GRAPHS\n  //\n\n  fetchGraphs() {\n    return this.db.getAll(DBStores.graph);\n  }\n\n  updateGraph(value: GraphJson) {\n    return this.db.put(DBStores.graph, value);\n  }\n\n  async deleteGraph(graphKey: string) {\n    const tx = this.db.transaction(\n      [DBStores.graph, DBStores.node, DBStores.connection],\n      \"readwrite\"\n    );\n    tx.objectStore(DBStores.graph).delete(graphKey);\n    for (const dbKey of [DBStores.node, DBStores.connection] as Array<\n      DBStores.node | DBStores.connection\n    >) {\n      let cursor = await tx\n        .objectStore(dbKey)\n        .index(\"by-graph\")\n        .openCursor(graphKey);\n      while (cursor) {\n        cursor.delete();\n        cursor = await cursor.continue();\n      }\n    }\n    await tx.done;\n  }\n\n  async loadGraph(graphKey: string) {\n    const [nodes, connections] = await Promise.all([\n      this.db.getAllFromIndex(DBStores.node, \"by-graph\", graphKey),\n      this.db.getAllFromIndex(DBStores.connection, \"by-graph\", graphKey),\n    ]);\n\n    return { nodes, connections };\n  }\n\n  //\n  // NODES\n  //\n\n  async addNodes(graphKey: string, nodes: NodeJson[]) {\n    const tx = this.db.transaction(DBStores.node, \"readwrite\");\n\n    const _g = { graphKey };\n    for (const n of nodes) {\n      tx.store.add(Object.assign(n, _g));\n    }\n    return await tx.done;\n  }\n\n  deleteNode(path: NodeJson) {\n    return this.db.delete(DBStores.node, path.key);\n  }\n\n  async updateNode(graphKey: string, path: NodeJson) {\n    return this.db.put(DBStores.node, Object.assign(path, { graphKey }));\n  }\n\n  async updateNodes(graphKey: string, nodes: Array<NodeJson>) {\n    const _g = { graphKey };\n    return this.updateMany(\n      DBStores.node,\n      nodes.map((n) => n.key),\n      nodes.map((p) => Object.assign(p, _g))\n    );\n  }\n\n  //\n  // CONNECTIONS\n  //\n\n  async addConnections(graphKey: string, connections: ConnectionJson[]) {\n    const tx = this.db.transaction(DBStores.connection, \"readwrite\");\n\n    for (const p of connections) {\n      tx.store.add(connectionWithKey(graphKey, p));\n    }\n    return await tx.done;\n  }\n\n  deleteConnection(path: ConnectionJson) {\n    return this.db.delete(DBStores.connection, getKeyFromConnection(path));\n  }\n\n  async updateConnection(graphKey: string, connection: ConnectionJson) {\n    return this.db.put(\n      DBStores.connection,\n      connectionWithKey(graphKey, connection)\n    );\n  }\n\n  async updateConnections(\n    graphKey: string,\n    connections: Array<ConnectionJson>\n  ) {\n    return this.updateMany(\n      DBStores.connection,\n      connections.map(getKeyFromConnection),\n      connections.map((p) => connectionWithKey(graphKey, p))\n    );\n  }\n\n  //\n  // OTHER\n  //\n\n  async closeDB() {\n    this.db.close();\n  }\n\n  async clearDB() {\n    await Promise.all([\n      this.db.clear(DBStores.graph),\n      this.db.clear(DBStores.connection),\n      this.db.clear(DBStores.node),\n    ]);\n  }\n\n  private async updateMany<T>(dbKey: DBStores, keys: string[], items: T[]) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    await Promise.all(\n      items.map(async (path, index) => {\n        const key = keys[index];\n        const val = await tx.store.get(key);\n\n        if (!val) {\n          throw new Error();\n        }\n        return tx.store.put({ ...val, ...path });\n      })\n    );\n    return await tx.done;\n  }\n\n  private async updateIncrementalSingle<T>(\n    dbKey: DBStores,\n    key: string,\n    item: T\n  ) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    const val = await tx.store.get(key);\n\n    if (!val) {\n      throw new Error();\n    }\n    tx.store.put({ ...val, ...item });\n    await tx.done;\n  }\n}\n","import { action, computed, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn } from \"mobx-state-tree\";\nimport { FieldSpec } from \"../fields\";\nimport { GlobalData, RootStoreModel, JsonType } from \"../canvas/store\";\nimport { ConnectionJson, NodeJson } from \"../canvas/persistence\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\n\nexport type OperationI<\n  V extends { [key: string]: FieldSpec },\n  D extends NodeData<D, G, any>,\n  G extends GlobalData<D>\n> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  nInputs: number;\n  errors: ObservableMap<keyof V, string>;\n};\n\nexport const mobxDecorators = <V extends { [key: string]: FieldSpec }>(\n  spec: V\n) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    errors: observable,\n  };\n};\n\nexport type ConnectionPosition =\n  | { top: number; left: number }\n  | { top: number; right: number }\n  | { bottom: number; left: number }\n  | { bottom: number; right: number };\n\nexport interface NodeData<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  isValidInput(input: NodeModel<D, G, C>): boolean;\n  nInputs: number;\n  spec: { [key: string]: FieldSpec };\n  // TODO: ObservableMap<keyof V, string>\n  errors: ObservableMap<string, string>;\n  View: React.FC;\n  toJson: JsonType;\n  parent?: NodeModel<D, G, C>;\n  connectionStartPosition?: () => undefined | ConnectionPosition;\n}\n\nexport type ConnectionData<D> = {\n  ConnectionView: React.FunctionComponent;\n  connectionText: { text: string; style?: React.CSSProperties }[];\n  toJson: JsonType;\n};\n\nexport class ConnModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public from: NodeModel<D, G, C>,\n    public to: NodeModel<D, G, C>,\n\n    dataBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C,\n    json?: JsonType,\n    isHidden?: boolean\n  ) {\n    this.data = dataBuilder(this, json);\n    this.isHidden = isHidden ?? false;\n  }\n\n  data: C;\n  @observable\n  isHidden: boolean;\n  get graph(): RootStoreModel<D, G, any> {\n    return this.from.graph;\n  }\n\n  @computed\n  get isSelected(): boolean {\n    return this.from.graph.selectedConnection === this;\n  }\n\n  @computed\n  get toJson(): ConnectionJson {\n    return {\n      from: this.from.key,\n      to: this.to.key,\n      data: this.data.toJson,\n      isHidden: this.isHidden,\n    };\n  }\n}\n\nexport class NodeModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public graph: RootStoreModel<D, G, any>,\n    d: {\n      key: string;\n      name: string;\n      x: number;\n      y: number;\n      isHidden?: boolean;\n      dataBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n      data?: JsonType;\n    }\n  ) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.isHidden = d.isHidden ?? false;\n    this.data = d.dataBuilder(this, d.data);\n  }\n\n  resizeObserver?: ResizeObserver;\n  element?: HTMLElement;\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: D;\n  @observable\n  isHidden: boolean;\n  @observable\n  inputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get inputNodes(): NodeModel<D, G, C>[] {\n    return this.inputs.map((c) => c.from);\n  }\n  @observable\n  outputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get outputNodes(): NodeModel<D, G, C>[] {\n    return this.outputs.map((c) => c.to);\n  }\n\n  @action\n  addInput(conn: ConnModel<D, G, C>) {\n    this.inputs.push(conn);\n    conn.from.outputs.push(conn);\n  }\n\n  @action\n  addOutput(conn: ConnModel<D, G, C>) {\n    this.outputs.push(conn);\n    conn.to.inputs.push(conn);\n  }\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n  setElement = (element: HTMLElement) => {\n    this.setSize(element.getBoundingClientRect());\n\n    if (this.element !== element) {\n      if (this.resizeObserver !== undefined) {\n        this.resizeObserver.disconnect();\n      }\n      this.element = element;\n      this.resizeObserver = new ResizeObserver((entries, observer) => {\n        this.setSize(element.getBoundingClientRect());\n      });\n      this.resizeObserver.observe(element);\n    }\n  };\n\n  @computed\n  get toJson(): NodeJson {\n    return {\n      key: this.key,\n      name: this.name,\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      isHidden: this.isHidden,\n      data: this.data.toJson,\n    };\n  }\n}\n","import {\n  action,\n  computed,\n  IKeyValueMap,\n  IMapEntries,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport { v4 } from \"uuid\";\nimport { SourceDirectory } from \"../codegen/file-system\";\nimport {\n  NodeModel,\n  NodeData,\n  ConnModel,\n  ConnectionData,\n} from \"../node/node-model\";\nimport { downloadToClient } from \"../utils\";\nimport JSZip from \"jszip\";\nimport { ConnectionJson, GraphJson, IndexedDB, NodeJson } from \"./persistence\";\n\nexport type DataBuilder<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  connectionBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C;\n  nodeBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n  graphBuilder: (graph: RootStoreModel<D, G, C>, json?: JsonType) => G;\n};\n\ntype JsonTypeItem = number | string | boolean | JsonType;\nexport type JsonType = { [key: string]: JsonTypeItem | JsonTypeItem[] };\n\nexport interface GlobalData<D extends NodeData<D, any, any>> {\n  generateMainFile: string;\n  generateSourceCode: SourceDirectory;\n  canAddNode(nodeType: string): boolean;\n  View: React.FunctionComponent;\n  CanvasView: React.FunctionComponent;\n  toJson: JsonType;\n  initState?: () => void;\n}\n\ntype FullGraphJson = {\n  graph: GraphJson;\n  nodes: NodeJson[];\n  connections: ConnectionJson[];\n};\n\ntype ConstructParams<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  builders: DataBuilder<D, G, C>;\n  data?: G;\n  key?: string;\n  nodes?:\n    | IMapEntries<string, NodeModel<D, G, C>>\n    | IKeyValueMap<NodeModel<D, G, C>>;\n};\n\nexport class RootStoreModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> {\n  constructor(d: {\n    db: IndexedDB;\n    builders: DataBuilder<D, G, C>;\n    hideOnDelete?: boolean;\n    json?: FullGraphJson;\n  }) {\n    this.db = d.db;\n    this.builders = d.builders;\n    this.hideOnDelete = d.hideOnDelete ?? false;\n    this.globalData = d.builders.graphBuilder(this, d.json?.graph.data);\n    this.key = d.json?.graph.key ?? v4();\n\n    const nodes = d.json?.nodes.reduce((m, n) => {\n      const node = new NodeModel(this, {\n        ...n,\n        dataBuilder: d.builders.nodeBuilder,\n      });\n\n      m[n.key] = node;\n      return m;\n    }, {} as { [key: string]: NodeModel<D, G, C> });\n\n    this.nodes = observable.map(nodes ?? {});\n\n    d.json?.connections.forEach((c) => {\n      const from = this.nodes.get(c.from);\n      const to = this.nodes.get(c.to);\n      if (from !== undefined && to !== undefined) {\n        this.addConnection(from, to, c.data, c.isHidden);\n      }\n    });\n    if (this.nodes.size !== 0) {\n      this.selectedNode = this.nodes.values().next().value;\n      if (this.selectedNode!.outputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.outputs[0];\n      } else if (this.selectedNode!.inputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.inputs[0];\n      } else {\n        for (const _n of this.nodes.values()) {\n          if (_n.outputs.length !== 0) {\n            this.selectedConnection = _n.outputs[0];\n            break;\n          }\n        }\n      }\n    }\n    if (this.globalData.initState !== undefined) {\n      this.globalData.initState();\n    }\n  }\n\n  key: string;\n  // Builders to create graph, node and transition instances\n  builders: DataBuilder<D, G, C>;\n  hideOnDelete: boolean;\n  // Global generic data\n  globalData: G;\n  db: IndexedDB;\n\n  @observable\n  resetStore: boolean = false;\n  // All nodes\n  @observable\n  nodes: ObservableMap<string, NodeModel<D, G, C>>;\n  // Selected node\n  @observable\n  selectedNode?: NodeModel<D, G, C>;\n  // Selected connection\n  @observable\n  selectedConnection?: ConnModel<D, G, C>;\n\n  // Selected input for connection\n  @observable\n  selectingInputFor?: NodeModel<D, G, C>;\n\n  // Select a node\n  @action\n  selectNode = (node: NodeModel<D, G, C>) => {\n    this.selectedNode = node;\n  };\n\n  // Select a connection\n  @action\n  selectConnection = (connection: ConnModel<D, G, C>) => {\n    this.selectedConnection = connection;\n  };\n\n  // Add a node\n  @action\n  addNode = (\n    nodeType: string,\n    pos?: { x: number; y: number }\n  ): NodeModel<D, G, C> | undefined => {\n    if (this.globalData.canAddNode(nodeType)) {\n      const op = new NodeModel(this, {\n        dataBuilder: this.builders.nodeBuilder,\n        key: v4(),\n        name: nodeType,\n        x: pos?.x ?? 100,\n        y: pos?.y ?? 100,\n        data: { type: nodeType },\n      });\n      this.nodes.set(op.key, op);\n      return op;\n    }\n  };\n\n  // Remove a node\n  @action\n  removeNode = (node: NodeModel<D, G, C>): void => {\n    if (node === this.selectedNode) {\n      this.selectedNode = undefined;\n    }\n    if (this.hideOnDelete) {\n      node.isHidden = true;\n      for (const _in of node.inputs) {\n        _in.isHidden = true;\n      }\n      for (const _out of node.outputs) {\n        _out.isHidden = true;\n      }\n    } else {\n      if (this.nodes.delete(node.key)) {\n        for (const _in of node.inputs) {\n          _in.from.outputs.remove(_in);\n        }\n        for (const _out of node.outputs) {\n          _out.to.inputs.remove(_out);\n        }\n      }\n    }\n  };\n\n  @action\n  activateNode = (node: NodeModel<D, G, C>) => {\n    node.isHidden = false;\n    for (const _in of node.inputs) {\n      _in.isHidden = false;\n    }\n    for (const _out of node.outputs) {\n      _out.isHidden = false;\n    }\n  };\n\n  @action\n  removeConnection = (connection: ConnModel<D, G, C>): void => {\n    if (connection === this.selectedConnection) {\n      this.selectedConnection = undefined;\n    }\n    if (this.hideOnDelete) {\n      connection.isHidden = true;\n    } else {\n      connection.from.outputs.remove(connection);\n      connection.to.inputs.remove(connection);\n    }\n  };\n\n  @action\n  activateConnection = (connection: ConnModel<D, G, C>): void => {\n    if (!connection.from.isHidden && !connection.to.isHidden) {\n      connection.isHidden = false;\n    }\n  };\n\n  // Select input-output / add connection\n\n  @action\n  selectingInput = (from: NodeModel<D, G, C>) => {\n    this.selectingInputFor = from;\n    window.addEventListener(\"keyup\", this._selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (to: NodeModel<D, G, C>): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      this.selectingInputFor!,\n      to,\n      this.builders.connectionBuilder\n    );\n    conn.from.addOutput(conn);\n    this.selectingInputFor = undefined;\n    this.selectedConnection = conn;\n    window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    return conn;\n  };\n\n  @action\n  private _selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    }\n  };\n\n  @action\n  addConnection = (\n    from: NodeModel<D, G, C>,\n    to: NodeModel<D, G, C>,\n    json?: JsonType,\n    isHidden?: boolean\n  ): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      from,\n      to,\n      this.builders.connectionBuilder,\n      json,\n      isHidden\n    );\n    conn.from.addOutput(conn);\n    return conn;\n  };\n\n  // Serialization\n\n  @computed\n  get toJson(): GraphJson {\n    return { data: this.globalData.toJson, key: this.key };\n  }\n\n  saveModel = async () => {\n    const nodes = [...this.nodes.entries()];\n    await this.db.clearDB();\n    await Promise.all([\n      this.db.updateGraph(this.toJson),\n      this.db.addNodes(\n        this.key,\n        nodes.map(([_, value]) => value.toJson)\n      ),\n      this.db.addConnections(\n        this.key,\n        nodes.flatMap(([_, value]) => value.outputs).map((t) => t.toJson)\n      ),\n    ]);\n  };\n\n  downloadModel = (): FullGraphJson => {\n    const nodes = [...this.nodes.entries()];\n    const json = {\n      graph: this.toJson,\n      nodes: nodes.map(([_, value]) => value.toJson),\n      connections: nodes\n        .flatMap(([_, value]) => value.outputs)\n        .map((t) => t.toJson),\n    };\n\n    downloadToClient(\n      JSON.stringify(json),\n      \"gemma-model.json\",\n      \"application/json\"\n    );\n    return json;\n  };\n\n  downloadSourceCode = async () => {\n    const _addToZip = (root: JSZip, dir: SourceDirectory) => {\n      const newRoot = root.folder(dir.name)!;\n\n      for (const item of dir.items) {\n        item.when({\n          file: (f) => newRoot.file(f.name, f.content),\n          dir: (d) => _addToZip(newRoot, d),\n        });\n      }\n    };\n\n    const zip = new JSZip();\n    const sourceCode = this.globalData.generateSourceCode;\n    _addToZip(zip, sourceCode);\n\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    downloadToClient(\n      content,\n      \"gemma-grafcet-source-code.zip\",\n      \"application/zip\"\n    );\n  };\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { NodeModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\nimport Button from \"@material-ui/core/Button\";\n\ntype Props2 = {\n  children: React.ReactNode;\n};\n\nexport const PropertiesTable = observer(({ children }: Props2) => {\n  return (\n    <PropertiesTableStyled>\n      <thead>\n        <tr>\n          <td>Property</td>\n          <td>Value</td>\n        </tr>\n      </thead>\n      <tbody>{children}</tbody>\n    </PropertiesTableStyled>\n  );\n});\n\ntype Props<D extends NodeData<D, any, any>> = {\n  self: NodeModel<D, any, any>;\n};\n\nexport const PropertiesTableNode = observer(\n  <D extends NodeData<D, any, any>>({ self }: Props<D>) => {\n    const rootStore = useStore();\n    return (\n      <div className=\"col\">\n        <PropertiesTable>\n          {Object.entries(self.data.spec).map(([k, v]) => (\n            <tr key={k}>\n              <td>{k}</td>\n              <td>\n                <v.plotField name={k} model={self.data as any} />\n              </td>\n            </tr>\n          ))}\n        </PropertiesTable>\n        <div style={{ margin: \"0 3px\" }}>\n          {self.data.nInputs !== 0 && (\n            <div className=\"row\" key=\"inputs\">\n              <h4 style={{ margin: \"3px 0 5px 0\", width: \"100px\" }}>Inputs:</h4>\n              <div>\n                {self.inputs.map((v) => (\n                  <Button\n                    onClick={() => rootStore.selectConnection(v as any)}\n                    key={v.from.key}\n                    variant=\"outlined\"\n                    size=\"small\"\n                  >\n                    {v.from.name}\n                  </Button>\n                ))}\n                {self.inputs.length === 0 && \"No inputs\"}\n              </div>\n            </div>\n          )}\n          <div key=\"outputs\" className=\"row\">\n            <h4 style={{ margin: \"3px 0 5px 0\", width: \"100px\" }}>Outputs:</h4>\n            <div>\n              {self.outputs.map((v) => (\n                <Button\n                  onClick={() => rootStore.selectConnection(v as any)}\n                  key={v.to.key}\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  {v.to.name}\n                </Button>\n              ))}\n              {self.outputs.length === 0 && \"No outputs\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  padding-bottom: 10px;\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTableNode } from \"./properties-table\";\nimport { useStore } from \"../App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./properties-view.css\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n\n  let inner;\n  if (rootStore.selectedNode != null) {\n    const selectedNode = rootStore.selectedNode;\n    const selectedConnection = rootStore.selectedConnection;\n    inner = (\n      <div\n        style={{\n          overflow: \"auto\",\n          maxHeight: \"100%\",\n          maxWidth: \"100%\",\n          justifyContent: \"space-around\",\n          backgroundColor: \"#fafafa\",\n          display: \"flex\",\n        }}\n        className=\"row\"\n      >\n        <div\n          className=\"properties-view\"\n          key=\"node-properties\"\n          id=\"node-properties\"\n        >\n          <div\n            className=\"row\"\n            style={{ justifyContent: \"space-between\", alignItems: \"center\" }}\n          >\n            <h3 style={{ margin: \"5px 0px 10px 5px\" }}>\n              {`Step: ${selectedNode.name}`}\n            </h3>\n            <IconButton\n              onClick={(_) => {\n                if (selectedNode.isHidden) {\n                  rootStore.activateNode(selectedNode);\n                } else {\n                  rootStore.removeNode(selectedNode);\n                }\n              }}\n            >\n              <FontAwesomeIcon\n                icon={selectedNode.isHidden ? \"eye\" : \"eye-slash\"} //trash-alt\n                color={\"#000\"}\n              />\n            </IconButton>\n          </div>\n          <PropertiesTableNode self={rootStore.selectedNode} />\n        </div>\n        <div\n          className=\"properties-view\"\n          key=\"connection-properties\"\n          id=\"connection-properties\"\n        >\n          {selectedConnection !== undefined && (\n            <div className=\"col\">\n              <div\n                className=\"row\"\n                style={{\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <h3 style={{ margin: \"5px 0 10px 5px\" }}>\n                  {`Transition: ${selectedConnection.from.name} -> ${selectedConnection.to.name}`}\n                </h3>\n                <IconButton\n                  onClick={(_) => {\n                    if (selectedConnection.isHidden) {\n                      rootStore.activateConnection(selectedConnection);\n                    } else {\n                      rootStore.removeConnection(selectedConnection);\n                    }\n                  }}\n                >\n                  <FontAwesomeIcon\n                    icon={selectedConnection.isHidden ? \"eye\" : \"eye-slash\"} //trash-alt\n                    color={\"#000\"}\n                  />\n                </IconButton>\n              </div>\n              <selectedConnection.data.ConnectionView />\n            </div>\n          )}\n        </div>\n        <div\n          style={{ minWidth: \"270px\" }}\n          className=\"properties-view\"\n          key=\"graph-properties\"\n        >\n          <rootStore.globalData.View />\n        </div>\n      </div>\n    );\n  } else {\n    inner = (\n      <div style={{ width: \"150px\" }} className=\"row\">\n        <div style={{ width: \"150px\" }} className=\"center\">\n          Not selected\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      defaultSize={{ height: 280, width: \"auto\" }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","export class VarId {\n  constructor(public text: string) {}\n\n  toString(): string {\n    return this.text;\n  }\n}\n\nexport type CustomToken =\n  | \"(\"\n  | \")\"\n  | \"AND\"\n  | \"OR\"\n  | \"NOT\"\n  | \"<\"\n  | \">\"\n  | \"=\"\n  | \"<=\"\n  | \">=\"\n  | \"\\n\"\n  | VarId;\n\nexport const getCustomTokens = (t: string): [CustomToken, number][] => {\n  const l: [CustomToken, number][] = [];\n  let i = -1;\n  let omit = 0;\n  let signal = \"\";\n  const addSignal = () => {\n    if (signal.length !== 0) {\n      l.push([new VarId(signal), i - signal.length]);\n      signal = \"\";\n    }\n  };\n  const add = (v: CustomToken) => {\n    addSignal();\n    l.push([v, i]);\n  };\n\n  for (const c of t) {\n    i++;\n    if (omit !== 0) {\n      omit--;\n      continue;\n    }\n    switch (c) {\n      case \" \":\n        addSignal();\n        break;\n      case \"\\n\":\n      case \")\":\n      case \"(\":\n      case \"<\":\n      case \">\":\n        add(c);\n        break;\n      case \"=\":\n        const prevToken = l[l.length - 1];\n        const prev = prevToken[0];\n        const strPrev = prev instanceof VarId ? prev.text : prev;\n        if ([\"<\", \">\"].includes(strPrev) && prevToken[1] === i - 1) {\n          l[l.length - 1][0] = (prev + \"=\") as any;\n        } else {\n          add(c);\n        }\n        break;\n      case \"A\":\n        if (t.substring(i, i + 3) === \"AND\") {\n          omit = 2;\n          add(\"AND\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"O\":\n        if (t.substring(i, i + 2) === \"OR\") {\n          omit = 1;\n          add(\"OR\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"N\":\n        if (t.substring(i, i + 3) === \"NOT\") {\n          omit = 2;\n          add(\"NOT\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      default:\n        signal += c;\n        break;\n    }\n  }\n  if (signal.length !== 0) {\n    l.push([new VarId(signal), i - signal.length + 1]);\n  }\n  return l;\n};\n\ntype ParseR = { ok: boolean };\n\n// type Conv = (tokens: Token[]) => ParseR;\n\n// const _union = (fs: Array<Conv>) => {};\n\n// const _find = (token: Token): Conv => {\n//   return (ts) => {\n//     return { ok: ts[0] == token };\n//   };\n// };\n\ntype Item = (CustomToken | Union)[];\n\ntype ExpType = \"VarId\" | \"comp\" | \"and\" | \"simpleExp\" | \"numOP\";\n\nclass Union {\n  constructor(\n    items: Partial<{ [key in ExpType]: (CustomToken | \"SELF\" | Union)[] }>\n  ) {\n    this.variants = Object.values(items).map((l) => {\n      return l!.map((v) => (v === \"SELF\" ? this : v));\n    });\n  }\n  variants: Item[];\n}\n\n// type Val = Item | Union;\n\n// type Expression<V extends { [key: string]: Token }> = {\n//   name: ExpType;\n//   tokens: Item;\n//   p: (t: Token[]) => V;\n// };\n\n// export const getCustomParse = (tokens: Token[]) => {\n//   const varId: Expression<{ varId: VarId }> = {\n//     name: \"VarId\",\n//     p: (t) => ({ varId: t[0] as VarId }),\n//     tokens: [new VarId(\"\")],\n//   };\n\n//   const numSimple = new Union({\n//     VarId: [new VarId(\"\")], //TODO: decimal\n//   });\n\n//   const comparator = new Union([[\"<\"], [\">\"], [\"=\"], [\"<=\"], [\">=\"]]);\n\n//   const expSimple = new Union([\n//     [numSimple, comparator, numSimple],\n//     [new VarId(\"\")],\n//   ]);\n\n//   const expAnd = new Union([[expSimple, \"AND\", \"SELF\"], [expSimple]]);\n\n//   const exp = new Union([\n//     [\"(\", \"SELF\", \")\"],\n//     [\"NOT\", \"SELF\"],\n//     [expAnd, \"OR\", \"SELF\"],\n//     [expAnd],\n//   ]);\n\n//   for (const t of tokens) {\n//     matchPossibilities(t, exp);\n//   }\n// };\n\n// const matchPossibilities = (t: Token, possibilities: Union): void => {\n//   let i = -1;\n//   for (const variant of possibilities.variants) {\n//     i++;\n\n//     const curr = variant.pop();\n//     if (curr === undefined) {\n//     } else if (typeof curr == \"string\") {\n//       if (t == curr) {\n//       }\n//     } else if (curr instanceof Union) {\n//       matchPossibilities(t, curr);\n//     } else {\n//       if (t instanceof VarId) {\n//       } else {\n//       }\n//     }\n//   }\n// };\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n  onChange?: (n: V) => void;\n\n  constructor(v: { choices: C; default: K; onChange?: (n: V) => void }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    this.onChange = v.onChange;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n    return (\n      <ChoiceField\n        value={model[name]}\n        setValue={(v) => {\n          model[name] = v as any;\n          if (this.onChange !== undefined) this.onChange(v as any);\n        }}\n        keys={keys}\n      />\n    );\n  });\n}\n\nexport const ChoiceField = ({\n  keys,\n  value,\n  setValue,\n  maxButton,\n}: {\n  keys: string[];\n  value: string;\n  setValue: (v: string) => void;\n  maxButton?: number\n}) => {\n  if (keys.length > (maxButton ?? 3)) {\n    return (\n      <Select\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value as any);\n        }}\n        autoWidth={true}\n        style={{minHeight: \"35px\", marginBottom: \"3px\"}}\n        disabled={keys.length <= 1}\n      >\n        {keys.map((k) => {\n          return (\n            <MenuItem key={k} value={k}>\n              {k}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    );\n  } else {\n    return (\n      <ButtonsDiv>\n        <ButtonGroup\n          size=\"small\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n        >\n          {keys.map((k) => {\n            const buttonStyle =\n              k === value ? { background: \"#3f51b5\", color: \"white\" } : {};\n\n            return (\n              <Button\n                key={k}\n                onClick={() => {\n                  setValue(k);\n                }}\n                style={buttonStyle}\n              >\n                {k}\n              </Button>\n            );\n          })}\n        </ButtonGroup>\n      </ButtonsDiv>\n    );\n  }\n};\n","import React from \"react\";\nimport { computed, observable, reaction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { ChoiceFieldSpec } from \"../fields/choice-field\";\nimport { ConnectionPosition, NodeData, NodeModel } from \"../node/node-model\";\nimport { listToMap } from \"../utils\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { Transition } from \"./transition\";\nimport { JsonType } from \"../canvas/store\";\nimport { BoolFieldSpec } from \"../fields/primitive-field\";\n\nexport enum StepType {\n  ENCLOSING = \"ENCLOSING\",\n  MACRO = \"MACRO\",\n  SIMPLE = \"SIMPLE\",\n  CONTAINER = \"CONTAINER\",\n}\n\ntype GemmaNode = NodeModel<Step, GemmaGrafcet, Transition>;\n\nexport enum ProcedureType {\n  F = \"F\", // Operational\n  D = \"D\", // Failure\n  A = \"A\", // Stop\n}\n\nexport type Step = SimpleStep | EnclosingStep | MacroStep | ContainerStep;\n\nexport class BaseStep implements NodeData<Step, GemmaGrafcet, Transition> {\n  @observable\n  type: StepType;\n\n  nInputs = Number.POSITIVE_INFINITY;\n  errors = observable.map<string, string>();\n\n  constructor(\n    private node: GemmaNode,\n    d?: {\n      description?: string;\n      family?: ProcedureType;\n      isInitial?: boolean;\n      type?: StepType;\n    }\n  ) {\n    this.description = d?.description ?? \"\";\n    this.family = d?.family ?? ProcedureType.F;\n    this.isInitial = d?.isInitial ?? false;\n    this.type = d?.type ?? StepType.SIMPLE;\n    reaction(\n      (_) => this.isInitial,\n      (isInitial, _) => {\n        console.log(isInitial);\n        if (isInitial) {\n          const otherInitial = this.automationSystem.steps.find(\n            (s) => s.isInitial && s !== this\n          );\n          if (otherInitial !== undefined) {\n            otherInitial.isInitial = false;\n          }\n        }\n      }\n    );\n  }\n\n  @computed\n  get name(): string {\n    return this.node.name;\n  }\n  @observable\n  description: string;\n  @observable\n  isInitial: boolean;\n  @observable\n  family: ProcedureType;\n  @computed\n  get parent(): GemmaNode | undefined {\n    if (this.type === StepType.CONTAINER) {\n      return undefined;\n    }\n    switch (this.family) {\n      case ProcedureType.A:\n        return this.automationSystem.aFamily;\n      case ProcedureType.D:\n        return this.automationSystem.dFamily;\n      case ProcedureType.F:\n        return this.automationSystem.fFamily;\n    }\n    throw new Error(\"\");\n  }\n\n  get automationSystem(): GemmaGrafcet {\n    return this.node.graph.globalData;\n  }\n\n  connectionStartPosition = (): undefined | ConnectionPosition => {\n    if (this.type === StepType.CONTAINER) {\n      return { bottom: 40, left: 50 };\n    }\n    return undefined;\n  };\n\n  @computed\n  private get _transitions(): Transition[] {\n    return this.node.outputs\n      .filter((t) => !t.isHidden)\n      .map((t) => t.data)\n      .sort((a, b) => a.priority - b.priority);\n  }\n  @computed\n  get innerTransitionsLength(): number {\n    return this._transitions.length;\n  }\n  @computed\n  get transitions(): Transition[] {\n    if (this === this.automationSystem.fFamily!.data) {\n      return this._transitions;\n    }\n    return this.family === ProcedureType.F\n      ? this.automationSystem.fFamily!.data.transitions.concat(\n          this._transitions\n        )\n      : this._transitions;\n  }\n  @computed\n  get id(): number {\n    return this.automationSystem.steps.indexOf(this as any) + 1;\n  }\n\n  spec = {\n    isInitial: new BoolFieldSpec({ default: false, required: true }),\n    type: new ChoiceFieldSpec({\n      default: StepType.SIMPLE,\n      choices: listToMap(\n        Object.values(StepType).filter((t) => t !== StepType.CONTAINER)\n      ),\n    }),\n  };\n\n  isValidInput(n: GemmaNode): boolean {\n    return this.node.inputNodes.every((t) => t.data !== n.data);\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      family: this.family,\n      description: this.description,\n      type: this.type,\n      isInitial: this.isInitial,\n    };\n  }\n\n  View = observer(({ children }) => {\n    const _color = {\n      [ProcedureType.A]: \"#ecf5ff\",\n      [ProcedureType.D]: \"#ffd6d6\",\n      [ProcedureType.F]: \"#ebffec\",\n    };\n\n    if (this.type === StepType.CONTAINER) {\n      return (\n        <div\n          style={{\n            position: \"relative\",\n            border: \"1px solid #eee\",\n            background: _color[this.family],\n            flex: 1,\n            width: 400,\n            height: 400,\n          }}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    let style: React.CSSProperties = {};\n    let innerStyle: React.CSSProperties = { padding: \"12px\" };\n    let wrapper: (p: React.ReactElement) => React.ReactElement = (p) => p;\n\n    if (this.isInitial) {\n      wrapper = (p) => (\n        <div style={{ padding: \"5px\" }}>\n          <div\n            style={{\n              border: \"1.5px solid\",\n            }}\n          >\n            {p}\n          </div>\n        </div>\n      );\n    }\n\n    const nodeHeight = this.node.height - 2 - (this.isInitial ? 12 : 0);\n    switch (this.type) {\n      case StepType.ENCLOSING:\n        style = { padding: \"0 0\", display: \"flex\" };\n        return wrapper(\n          <div style={{ ...style, position: \"relative\" }}>\n            <EnclosingDecoration left={true} nodeHeight={nodeHeight} />\n            <div style={{ ...innerStyle, padding: \"12px 18px\" }}>\n              {this.node.name}\n            </div>\n            <EnclosingDecoration left={false} nodeHeight={nodeHeight} />\n          </div>\n        );\n      case StepType.MACRO:\n        style = { padding: \"5px 0\" };\n        innerStyle = {\n          borderTop: \"1.5px solid\",\n          borderBottom: \"1.5px solid\",\n          borderRight: \"0\",\n          borderLeft: \"0\",\n          padding: \"5px 12px\",\n        };\n        break;\n    }\n\n    return wrapper(\n      <div style={style}>\n        <div style={innerStyle}>{this.node.name}</div>\n      </div>\n    );\n  });\n}\n\nexport type SimpleStep = BaseStep & {\n  type: StepType.SIMPLE;\n};\n\nexport type ContainerStep = BaseStep & {\n  type: StepType.CONTAINER;\n};\n\nexport type EnclosingStep = BaseStep & {\n  type: StepType.ENCLOSING;\n};\n\nexport type MacroStep = BaseStep & {\n  type: StepType.MACRO;\n};\n\nconst EnclosingDecoration = ({\n  nodeHeight,\n  left,\n}: {\n  nodeHeight: number;\n  left: boolean;\n}) => {\n  return (\n    <svg\n      style={{\n        width: \"10px\",\n        height: \"\" + nodeHeight + \"px\",\n        position: \"absolute\",\n        right: left ? undefined : 0,\n      }}\n    >\n      <path\n        d={\n          left\n            ? `M 10 0 L 0 ${nodeHeight / 2} L 10 ${nodeHeight}`\n            : `M 0 0 L 10 ${nodeHeight / 2} L 0 ${nodeHeight}`\n        }\n        stroke=\"black\"\n        fill=\"transparent\"\n      ></path>\n    </svg>\n  );\n};\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n  multiline: boolean;\n\n  constructor(v: {\n    default: string;\n    maxLength?: number;\n    minLength?: number;\n    multiline?: boolean;\n  }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.multiline = v.multiline ?? false;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    const onChange = (\n      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n      let value = e.target.value;\n      setValue(value as any);\n\n      if (this.maxLength !== undefined && value.length > this.maxLength) {\n        errors.set(name, \"Max length exceded.\");\n      } else if (\n        this.minLength !== undefined &&\n        value.length < this.minLength\n      ) {\n        errors.set(name, \"Min length exceded.\");\n      } else {\n        errors.delete(name);\n        model[name] = value as any;\n      }\n    };\n\n    if (this.multiline) {\n      return (\n        <textarea\n          key={name}\n          className=\"multiline-input\"\n          value={value}\n          onChange={onChange}\n        ></textarea>\n      );\n    } else {\n      return (\n        <TextField\n          key={name}\n          value={value}\n          fullWidth={true}\n          margin=\"dense\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n          error={errors.get(name) !== undefined}\n          style={{ width: \"140px\" }}\n          onChange={onChange}\n        />\n      );\n    }\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","import { VarId } from \"./custom_parser\";\nimport { GemmaGrafcet, Signal } from \"./gemma\";\nimport { EnclosingStep, MacroStep, SimpleStep, StepType } from \"./step\";\nimport { Transition } from \"./transition\";\n\nexport class H {\n  static textOrEmpty = (cond: boolean, text: string) => (cond ? text : \"\");\n}\n\nconst templateCondition = (t: Transition): string => {\n  return t.expressionTokens\n    .map(([tok, _]) => {\n      if (tok instanceof VarId) {\n        return \"GVL.\" + tok.text;\n      } else {\n        return tok;\n      }\n    })\n    .join(\" \");\n};\n\nconst templateTransitions = (\n  transitions: Transition[],\n  { isNested }: { isNested: boolean }\n) => {\n  return `\\\n${transitions\n  .map((t, index) => {\n    return `\n${index === 0 ? \"IF\" : \"ELSIF\"} ${templateCondition(t)} THEN\n  State:=${t.to.id};\\\n  ${isNested ? \"\\n  Entry:=TRUE;\" : \"\"}`;\n  })\n  .join(\"\\n\")}\\\n${transitions.length === 0 ? \"\" : \"\\nEND_IF\"}`;\n};\n\nconst templateGemmaGrafcetSimpleStep = (model: SimpleStep): string => {\n  return templateTransitions(model.transitions, { isNested: false });\n};\n\nconst templateFBEntry = (model: MacroStep | EnclosingStep): string => `\\\nIF Entry THEN\n  ${model.name}(Initialization:=ENTRY);\n  Entry:=FALSE;\nEND_IF\n${model.name}(Initialization:=ENTRY);`;\n\nconst templateGemmaGrafcetNestedStep = (\n  model: MacroStep | EnclosingStep\n): string => {\n  const transitions = model.transitions;\n  const _evaluateComplete = (t: Transition, index: number): boolean => {\n    const _isInner = transitions.length - model.innerTransitionsLength <= index;\n    switch (model.type) {\n      case StepType.MACRO:\n        return _isInner && !t.isNegated;\n      case StepType.ENCLOSING:\n        return _isInner && t.isNegated;\n    }\n    throw new Error(\"\");\n  };\n\n  return `\n${templateFBEntry(model)}\n\n${transitions\n  .map((t, index) => {\n    return `\\\n${index === 0 ? \"IF\" : \"ELSIF\"} ${templateCondition(t)}${\n      _evaluateComplete(t, index) ? ` AND ${model.name}.Complete` : \"\"\n    } THEN\n  State:=${t.to.id};\n  Entry:=TRUE;`;\n  })\n  .join(\"\\n\")}\\\n${H.textOrEmpty(transitions.length !== 0, \"\\nEND_IF\")}`;\n};\n\nexport const templateGlobals = (signals: Array<Signal>): string => {\n  return `\\\nVAR_GLOBAL\n    ${signals\n      .map(\n        (s) =>\n          `${s.name} : ${s.type}${\n            s.defaultValue.trim().length === 0 ? \"\" : \" :=\" + s.defaultValue\n          };`\n      )\n      .join(\"\\n    \")}\nEND_VAR\n`;\n};\n\nexport const templateGemmaGrafcet = (model: GemmaGrafcet): string => {\n  return `\n// Variable declaration\nVAR\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .map((s) => `  ${s.name}:${s.name}_FB;`)\n  .join(\"\\n\")}\n\n  State:UINT:=${model.initialStep?.id};\n  Entry:BOOL:=TRUE;\nEND_VAR\n\n// Program behavior\nCASE State OF\n  ${model.steps\n    .map((step) => {\n      return `\n  ${step.id}: //State ${step.name}\n    ${(() => {\n      switch (step.type) {\n        case StepType.SIMPLE:\n          return templateGemmaGrafcetSimpleStep(step);\n        case StepType.ENCLOSING:\n        case StepType.MACRO:\n          return templateGemmaGrafcetNestedStep(step);\n        default:\n          throw new Error(\"\");\n      }\n    })().replace(/\\n/g, \"\\n    \")}\n  `;\n    })\n    .join(\"\\n\")}\nEND_CASE\n`;\n};\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class SimpleBooleanLexer extends Lexer {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \"EQ\", \"LPAREN\", \n\t\t\"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanLexer._LITERAL_NAMES, SimpleBooleanLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(SimpleBooleanLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return SimpleBooleanLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return SimpleBooleanLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x11e\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x03\\x02\\x03\\x02\\x03\\x02\\x03\" +\n\t\t\"\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\" +\n\t\t\"\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\" +\n\t\t\"\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x05\\x0EI\\n\\x0E\\x03\\x0E\\x06\\x0E\" +\n\t\t\"L\\n\\x0E\\r\\x0E\\x0E\\x0EM\\x03\\x0E\\x03\\x0E\\x06\\x0ER\\n\\x0E\\r\\x0E\\x0E\\x0ES\\x05\" +\n\t\t\"\\x0EV\\n\\x0E\\x03\\x0F\\x03\\x0F\\x07\\x0FZ\\n\\x0F\\f\\x0F\\x0E\\x0F]\\v\\x0F\\x03\\x10\" +\n\t\t\"\\x06\\x10`\\n\\x10\\r\\x10\\x0E\\x10a\\x03\\x10\\x03\\x10\\x02\\x02\\x02\\x11\\x03\\x02\" +\n\t\t\"\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\" +\n\t\t\"\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\" +\n\t\t\"\\x1F\\x02\\x11\\x03\\x02\\x06\\x03\\x022;\\x05\\x02C\\\\aac|\\x06\\x022;C\\\\aac|\\x05\" +\n\t\t\"\\x02\\v\\f\\x0E\\x0F\\\"\\\"\\x02j\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x1F\\x03\\x02\\x02\\x02\\x03!\\x03\\x02\\x02\\x02\\x05%\\x03\\x02\\x02\\x02\\x07\" +\n\t\t\"(\\x03\\x02\\x02\\x02\\t,\\x03\\x02\\x02\\x02\\v1\\x03\\x02\\x02\\x02\\r7\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x0F9\\x03\\x02\\x02\\x02\\x11<\\x03\\x02\\x02\\x02\\x13>\\x03\\x02\\x02\\x02\\x15\" +\n\t\t\"A\\x03\\x02\\x02\\x02\\x17C\\x03\\x02\\x02\\x02\\x19E\\x03\\x02\\x02\\x02\\x1BH\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x1DW\\x03\\x02\\x02\\x02\\x1F_\\x03\\x02\\x02\\x02!\\\"\\x07C\\x02\\x02\\\"#\" +\n\t\t\"\\x07P\\x02\\x02#$\\x07F\\x02\\x02$\\x04\\x03\\x02\\x02\\x02%&\\x07Q\\x02\\x02&\\'\\x07\" +\n\t\t\"T\\x02\\x02\\'\\x06\\x03\\x02\\x02\\x02()\\x07P\\x02\\x02)*\\x07Q\\x02\\x02*+\\x07V\\x02\" +\n\t\t\"\\x02+\\b\\x03\\x02\\x02\\x02,-\\x07V\\x02\\x02-.\\x07T\\x02\\x02./\\x07W\\x02\\x02/\" +\n\t\t\"0\\x07G\\x02\\x020\\n\\x03\\x02\\x02\\x0212\\x07H\\x02\\x0223\\x07C\\x02\\x0234\\x07\" +\n\t\t\"N\\x02\\x0245\\x07U\\x02\\x0256\\x07G\\x02\\x026\\f\\x03\\x02\\x02\\x0278\\x07@\\x02\" +\n\t\t\"\\x028\\x0E\\x03\\x02\\x02\\x029:\\x07@\\x02\\x02:;\\x07?\\x02\\x02;\\x10\\x03\\x02\\x02\" +\n\t\t\"\\x02<=\\x07>\\x02\\x02=\\x12\\x03\\x02\\x02\\x02>?\\x07>\\x02\\x02?@\\x07?\\x02\\x02\" +\n\t\t\"@\\x14\\x03\\x02\\x02\\x02AB\\x07?\\x02\\x02B\\x16\\x03\\x02\\x02\\x02CD\\x07*\\x02\\x02\" +\n\t\t\"D\\x18\\x03\\x02\\x02\\x02EF\\x07+\\x02\\x02F\\x1A\\x03\\x02\\x02\\x02GI\\x07/\\x02\\x02\" +\n\t\t\"HG\\x03\\x02\\x02\\x02HI\\x03\\x02\\x02\\x02IK\\x03\\x02\\x02\\x02JL\\t\\x02\\x02\\x02\" +\n\t\t\"KJ\\x03\\x02\\x02\\x02LM\\x03\\x02\\x02\\x02MK\\x03\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02\" +\n\t\t\"NU\\x03\\x02\\x02\\x02OQ\\x070\\x02\\x02PR\\t\\x02\\x02\\x02QP\\x03\\x02\\x02\\x02RS\" +\n\t\t\"\\x03\\x02\\x02\\x02SQ\\x03\\x02\\x02\\x02ST\\x03\\x02\\x02\\x02TV\\x03\\x02\\x02\\x02\" +\n\t\t\"UO\\x03\\x02\\x02\\x02UV\\x03\\x02\\x02\\x02V\\x1C\\x03\\x02\\x02\\x02W[\\t\\x03\\x02\" +\n\t\t\"\\x02XZ\\t\\x04\\x02\\x02YX\\x03\\x02\\x02\\x02Z]\\x03\\x02\\x02\\x02[Y\\x03\\x02\\x02\" +\n\t\t\"\\x02[\\\\\\x03\\x02\\x02\\x02\\\\\\x1E\\x03\\x02\\x02\\x02][\\x03\\x02\\x02\\x02^`\\t\\x05\" +\n\t\t\"\\x02\\x02_^\\x03\\x02\\x02\\x02`a\\x03\\x02\\x02\\x02a_\\x03\\x02\\x02\\x02ab\\x03\\x02\" +\n\t\t\"\\x02\\x02bc\\x03\\x02\\x02\\x02cd\\b\\x10\\x02\\x02d \\x03\\x02\\x02\\x02\\t\\x02HMS\" +\n\t\t\"U[a\\x03\\b\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanLexer.__ATN) {\n\t\t\tSimpleBooleanLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanLexer._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanLexer.__ATN;\n\t}\n\n}\n\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n// @ts-ignore\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { SimpleBooleanListener } from \"./SimpleBooleanListener\";\nimport { SimpleBooleanVisitor } from \"./SimpleBooleanVisitor\";\n\n\nexport class SimpleBooleanParser extends Parser {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\tpublic static readonly RULE_parse = 0;\n\tpublic static readonly RULE_expression = 1;\n\tpublic static readonly RULE_expressionAnd = 2;\n\tpublic static readonly RULE_expressionSimple = 3;\n\tpublic static readonly RULE_numExpression = 4;\n\tpublic static readonly RULE_comparator = 5;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"parse\", \"expression\", \"expressionAnd\", \"expressionSimple\", \"numExpression\", \n\t\t\"comparator\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanParser._LITERAL_NAMES, SimpleBooleanParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanParser._serializedATN; }\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(SimpleBooleanParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic parse(): ParseContext {\n\t\tlet _localctx: ParseContext = new ParseContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, SimpleBooleanParser.RULE_parse);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 12;\n\t\t\tthis.expression();\n\t\t\tthis.state = 13;\n\t\t\tthis.match(SimpleBooleanParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expression(): ExpressionContext {\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, SimpleBooleanParser.RULE_expression);\n\t\ttry {\n\t\t\tthis.state = 22;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new NotExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 15;\n\t\t\t\tthis.match(SimpleBooleanParser.NOT);\n\t\t\t\tthis.state = 16;\n\t\t\t\tthis.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new OrExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 17;\n\t\t\t\t(_localctx as OrExpressionContext)._left = this.expressionAnd();\n\t\t\t\tthis.state = 18;\n\t\t\t\tthis.match(SimpleBooleanParser.OR);\n\t\t\t\tthis.state = 19;\n\t\t\t\t(_localctx as OrExpressionContext)._right = this.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new AndParentExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 21;\n\t\t\t\tthis.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\tlet _localctx: ExpressionAndContext = new ExpressionAndContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, SimpleBooleanParser.RULE_expressionAnd);\n\t\ttry {\n\t\t\tthis.state = 29;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new AndExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 24;\n\t\t\t\t(_localctx as AndExpressionContext)._left = this.expressionSimple();\n\t\t\t\tthis.state = 25;\n\t\t\t\tthis.match(SimpleBooleanParser.AND);\n\t\t\t\tthis.state = 26;\n\t\t\t\t(_localctx as AndExpressionContext)._right = this.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new SimpleExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 28;\n\t\t\t\tthis.expressionSimple();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\tlet _localctx: ExpressionSimpleContext = new ExpressionSimpleContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, SimpleBooleanParser.RULE_expressionSimple);\n\t\ttry {\n\t\t\tthis.state = 40;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new ComparatorExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 31;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._left = this.numExpression();\n\t\t\t\tthis.state = 32;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._op = this.comparator();\n\t\t\t\tthis.state = 33;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._right = this.numExpression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new IdentifierExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 35;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new ParenExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 36;\n\t\t\t\tthis.match(SimpleBooleanParser.LPAREN);\n\t\t\t\tthis.state = 37;\n\t\t\t\tthis.expression();\n\t\t\t\tthis.state = 38;\n\t\t\t\tthis.match(SimpleBooleanParser.RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic numExpression(): NumExpressionContext {\n\t\tlet _localctx: NumExpressionContext = new NumExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 8, SimpleBooleanParser.RULE_numExpression);\n\t\ttry {\n\t\t\tthis.state = 44;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch (this._input.LA(1)) {\n\t\t\tcase SimpleBooleanParser.IDENTIFIER:\n\t\t\t\t_localctx = new IdentifierNumExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 42;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SimpleBooleanParser.DECIMAL:\n\t\t\t\t_localctx = new DecimalExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 43;\n\t\t\t\tthis.match(SimpleBooleanParser.DECIMAL);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic comparator(): ComparatorContext {\n\t\tlet _localctx: ComparatorContext = new ComparatorContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 10, SimpleBooleanParser.RULE_comparator);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 46;\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SimpleBooleanParser.GT) | (1 << SimpleBooleanParser.GE) | (1 << SimpleBooleanParser.LT) | (1 << SimpleBooleanParser.LE) | (1 << SimpleBooleanParser.EQ))) !== 0))) {\n\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t} else {\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t}\n\n\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\tthis.consume();\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x113\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n\t\t\"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n\t\t\"\\x03\\x03\\x03\\x03\\x05\\x03\\x19\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\" +\n\t\t\"\\x04\\x05\\x04 \\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x05\\x05+\\n\\x05\\x03\\x06\\x03\\x06\\x05\\x06/\\n\\x06\\x03\" +\n\t\t\"\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x02\\b\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\" +\n\t\t\"\\f\\x02\\x02\\x03\\x03\\x02\\b\\f\\x022\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x18\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x06\\x1F\\x03\\x02\\x02\\x02\\b*\\x03\\x02\\x02\\x02\\n.\\x03\\x02\\x02\\x02\" +\n\t\t\"\\f0\\x03\\x02\\x02\\x02\\x0E\\x0F\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\\x10\" +\n\t\t\"\\x03\\x03\\x02\\x02\\x02\\x11\\x12\\x07\\x05\\x02\\x02\\x12\\x19\\x05\\x04\\x03\\x02\\x13\" +\n\t\t\"\\x14\\x05\\x06\\x04\\x02\\x14\\x15\\x07\\x04\\x02\\x02\\x15\\x16\\x05\\x04\\x03\\x02\\x16\" +\n\t\t\"\\x19\\x03\\x02\\x02\\x02\\x17\\x19\\x05\\x06\\x04\\x02\\x18\\x11\\x03\\x02\\x02\\x02\\x18\" +\n\t\t\"\\x13\\x03\\x02\\x02\\x02\\x18\\x17\\x03\\x02\\x02\\x02\\x19\\x05\\x03\\x02\\x02\\x02\\x1A\" +\n\t\t\"\\x1B\\x05\\b\\x05\\x02\\x1B\\x1C\\x07\\x03\\x02\\x02\\x1C\\x1D\\x05\\x06\\x04\\x02\\x1D\" +\n\t\t\" \\x03\\x02\\x02\\x02\\x1E \\x05\\b\\x05\\x02\\x1F\\x1A\\x03\\x02\\x02\\x02\\x1F\\x1E\\x03\" +\n\t\t\"\\x02\\x02\\x02 \\x07\\x03\\x02\\x02\\x02!\\\"\\x05\\n\\x06\\x02\\\"#\\x05\\f\\x07\\x02#$\" +\n\t\t\"\\x05\\n\\x06\\x02$+\\x03\\x02\\x02\\x02%+\\x07\\x10\\x02\\x02&\\'\\x07\\r\\x02\\x02\\'\" +\n\t\t\"(\\x05\\x04\\x03\\x02()\\x07\\x0E\\x02\\x02)+\\x03\\x02\\x02\\x02*!\\x03\\x02\\x02\\x02\" +\n\t\t\"*%\\x03\\x02\\x02\\x02*&\\x03\\x02\\x02\\x02+\\t\\x03\\x02\\x02\\x02,/\\x07\\x10\\x02\" +\n\t\t\"\\x02-/\\x07\\x0F\\x02\\x02.,\\x03\\x02\\x02\\x02.-\\x03\\x02\\x02\\x02/\\v\\x03\\x02\" +\n\t\t\"\\x02\\x0201\\t\\x02\\x02\\x021\\r\\x03\\x02\\x02\\x02\\x06\\x18\\x1F*.\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanParser.__ATN) {\n\t\t\tSimpleBooleanParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanParser._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanParser.__ATN;\n\t}\n\n}\n\nexport class ParseContext extends ParserRuleContext {\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic EOF(): TerminalNode { return this.getToken(SimpleBooleanParser.EOF, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_parse; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParse) {\n\t\t\tlistener.enterParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParse) {\n\t\t\tlistener.exitParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParse) {\n\t\t\treturn visitor.visitParse(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expression; }\n\tpublic copyFrom(ctx: ExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class NotExpressionContext extends ExpressionContext {\n\tpublic NOT(): TerminalNode { return this.getToken(SimpleBooleanParser.NOT, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterNotExpression) {\n\t\t\tlistener.enterNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitNotExpression) {\n\t\t\tlistener.exitNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitNotExpression) {\n\t\t\treturn visitor.visitNotExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class OrExpressionContext extends ExpressionContext {\n\tpublic _left: ExpressionAndContext;\n\tpublic _right: ExpressionContext;\n\tpublic OR(): TerminalNode { return this.getToken(SimpleBooleanParser.OR, 0); }\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterOrExpression) {\n\t\t\tlistener.enterOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitOrExpression) {\n\t\t\tlistener.exitOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitOrExpression) {\n\t\t\treturn visitor.visitOrExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class AndParentExpressionContext extends ExpressionContext {\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndParentExpression) {\n\t\t\tlistener.enterAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndParentExpression) {\n\t\t\tlistener.exitAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndParentExpression) {\n\t\t\treturn visitor.visitAndParentExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionAndContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionAnd; }\n\tpublic copyFrom(ctx: ExpressionAndContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class AndExpressionContext extends ExpressionAndContext {\n\tpublic _left: ExpressionSimpleContext;\n\tpublic _right: ExpressionAndContext;\n\tpublic AND(): TerminalNode { return this.getToken(SimpleBooleanParser.AND, 0); }\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndExpression) {\n\t\t\tlistener.enterAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndExpression) {\n\t\t\tlistener.exitAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndExpression) {\n\t\t\treturn visitor.visitAndExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class SimpleExpressionContext extends ExpressionAndContext {\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterSimpleExpression) {\n\t\t\tlistener.enterSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitSimpleExpression) {\n\t\t\tlistener.exitSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitSimpleExpression) {\n\t\t\treturn visitor.visitSimpleExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionSimpleContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionSimple; }\n\tpublic copyFrom(ctx: ExpressionSimpleContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class ComparatorExpressionContext extends ExpressionSimpleContext {\n\tpublic _left: NumExpressionContext;\n\tpublic _op: ComparatorContext;\n\tpublic _right: NumExpressionContext;\n\tpublic numExpression(): NumExpressionContext[];\n\tpublic numExpression(i: number): NumExpressionContext;\n\tpublic numExpression(i?: number): NumExpressionContext | NumExpressionContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(NumExpressionContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, NumExpressionContext);\n\t\t}\n\t}\n\tpublic comparator(): ComparatorContext {\n\t\treturn this.getRuleContext(0, ComparatorContext);\n\t}\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparatorExpression) {\n\t\t\tlistener.enterComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparatorExpression) {\n\t\t\tlistener.exitComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparatorExpression) {\n\t\t\treturn visitor.visitComparatorExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class IdentifierExpressionContext extends ExpressionSimpleContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierExpression) {\n\t\t\tlistener.enterIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierExpression) {\n\t\t\tlistener.exitIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierExpression) {\n\t\t\treturn visitor.visitIdentifierExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class ParenExpressionContext extends ExpressionSimpleContext {\n\tpublic LPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.LPAREN, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic RPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.RPAREN, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParenExpression) {\n\t\t\tlistener.enterParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParenExpression) {\n\t\t\tlistener.exitParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParenExpression) {\n\t\t\treturn visitor.visitParenExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class NumExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_numExpression; }\n\tpublic copyFrom(ctx: NumExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class IdentifierNumExpressionContext extends NumExpressionContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierNumExpression) {\n\t\t\tlistener.enterIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierNumExpression) {\n\t\t\tlistener.exitIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierNumExpression) {\n\t\t\treturn visitor.visitIdentifierNumExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class DecimalExpressionContext extends NumExpressionContext {\n\tpublic DECIMAL(): TerminalNode { return this.getToken(SimpleBooleanParser.DECIMAL, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterDecimalExpression) {\n\t\t\tlistener.enterDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitDecimalExpression) {\n\t\t\tlistener.exitDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitDecimalExpression) {\n\t\t\treturn visitor.visitDecimalExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ComparatorContext extends ParserRuleContext {\n\tpublic GT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GT, 0); }\n\tpublic GE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GE, 0); }\n\tpublic LT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LT, 0); }\n\tpublic LE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LE, 0); }\n\tpublic EQ(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.EQ, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_comparator; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparator) {\n\t\t\tlistener.enterComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparator) {\n\t\t\tlistener.exitComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparator) {\n\t\t\treturn visitor.visitComparator(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { SimpleBooleanLexer } from \"../grammar/SimpleBooleanLexer\";\nimport {\n  ExpressionContext,\n  IdentifierExpressionContext,\n  IdentifierNumExpressionContext,\n  SimpleBooleanParser,\n} from \"../grammar/SimpleBooleanParser\";\nimport { SimpleBooleanVisitor } from \"../grammar/SimpleBooleanVisitor\";\nimport { AbstractParseTreeVisitor } from \"antlr4ts/tree/AbstractParseTreeVisitor\";\nimport { ErrorNode } from \"antlr4ts/tree/ErrorNode\";\nimport { ParseTree } from \"antlr4ts/tree/ParseTree\";\n\n// Extend the AbstractParseTreeVisitor to get default visitor behaviour\nclass ErrorVisitor\n  extends AbstractParseTreeVisitor<string[]>\n  implements SimpleBooleanVisitor<string[]> {\n  isInvalid: boolean = false;\n  constructor(public signals: { numSignals: string[]; boolSignals: string[] }) {\n    super();\n  }\n\n  defaultResult() {\n    return [];\n  }\n\n  aggregateResult(aggregate: string[], nextResult: string[]) {\n    return aggregate.concat(nextResult);\n  }\n\n  visitErrorNode(node: ErrorNode): string[] {\n    if (this.isInvalid) {\n      return [];\n    }\n    this.isInvalid = true;\n    return [\"Invalid boolean expression\"];\n  }\n\n  visitIdentifierExpression(n: IdentifierExpressionContext): string[] {\n    const valid = this.signals.boolSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined boolean signal`];\n  }\n\n  visitIdentifierNumExpression(n: IdentifierNumExpressionContext): string[] {\n    const valid = this.signals.numSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined numeric signal`];\n  }\n\n  visitExpression(n: ExpressionContext): string[] {\n    console.log(\"Dddddddddddddddddddddd\");\n    if (n.exception !== undefined && !this.isInvalid) {\n      this.isInvalid = true;\n      return [\"Invalid boolean expression\"];\n    }\n    return [];\n  }\n}\n\nexport const parseBoolExpression = (\n  text: string,\n  signals: { numSignals: string[]; boolSignals: string[] }\n): { tree: ExpressionContext; errors: string[] } => {\n  // Create the lexer and parser\n  let inputStream = CharStreams.fromString(text);\n  let lexer = new SimpleBooleanLexer(inputStream);\n  let tokenStream = new CommonTokenStream(lexer);\n  let parser = new SimpleBooleanParser(tokenStream);\n\n  // Parse the input, where `compilationUnit` is whatever entry point you defined\n\n  let tree = parser.parse();\n\n  // Create the visitor\n  const countFunctionsVisitor = new ErrorVisitor(signals);\n  // Use the visitor entry point\n  const errors = countFunctionsVisitor.visit(tree);\n\n  if (tree.exception !== undefined) {\n    countFunctionsVisitor.isInvalid = true;\n    errors.push(\"Invalid boolean expression\");\n  }\n\n  let toProcess: ParseTree[] | undefined = tree.children;\n  if (toProcess !== undefined && !countFunctionsVisitor.isInvalid) {\n    while (toProcess.length !== 0) {\n      const curr: ParseTree | undefined = toProcess.pop()!;\n      if (curr instanceof ExpressionContext && curr.exception !== undefined) {\n        errors.push(\"Invalid boolean expression\");\n        break;\n      } else if (curr.childCount > 0) {\n        toProcess = toProcess.concat(\n          [...Array(curr.childCount).keys()].map((i) => curr.getChild(i))\n        );\n      }\n    }\n  }\n  return { tree, errors };\n};\n","import Switch from \"@material-ui/core/Switch\";\nimport { action, computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { JsonType } from \"../canvas/store\";\nimport { FieldSpec, StrFieldSpec } from \"../fields\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { ConnModel } from \"../node/node-model\";\nimport { PropertiesTable } from \"../properties/properties-table\";\nimport { parseBoolExpression } from \"./antlr_parser\";\nimport { CustomToken, getCustomTokens, VarId } from \"./custom_parser\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { Step, StepType } from \"./step\";\n\ntype GemmaConn = ConnModel<Step, GemmaGrafcet, Transition>;\n\nexport class Transition {\n  @observable\n  conditionExpression: string;\n  @observable\n  priority: number;\n  @observable\n  isNegated: boolean;\n  @computed\n  get priorityChoices() {\n    return [...Array(this.connection.from.outputs.length)].map(\n      (_, i) => \"\" + (i + 1)\n    );\n  }\n\n  errors = observable.map<string, string>();\n\n  spec: { [key: string]: FieldSpec } = {\n    conditionExpression: new StrFieldSpec({ default: \"\" }),\n  };\n\n  constructor(\n    private connection: GemmaConn,\n    d?: {\n      conditionExpression?: string;\n      priority?: number;\n      isNegated?: boolean;\n    }\n  ) {\n    this.conditionExpression = d?.conditionExpression ?? \"\";\n    this.priority = d?.priority ?? connection.from.outputs.length + 1;\n    this.isNegated = d?.isNegated ?? false;\n  }\n\n  @action.bound\n  setPriority = (v: string): void => {\n    const priority = parseInt(v);\n    if (this.priority === priority) {\n      return;\n    }\n    const transitions = this.connection.from.outputs;\n    if (this.priority > priority) {\n      transitions\n        .filter(\n          (t) => t.data.priority >= priority && t.data.priority < this.priority\n        )\n        .forEach((t) => t.data.priority++);\n    } else {\n      transitions\n        .filter(\n          (t) => t.data.priority <= priority && t.data.priority > this.priority\n        )\n        .forEach((t) => t.data.priority--);\n    }\n    this.priority = priority;\n  };\n\n  get from(): Step {\n    return this.connection.from.data;\n  }\n\n  get to(): Step {\n    return this.connection.to.data;\n  }\n\n  @computed\n  get connectionText(): { text: string; style?: React.CSSProperties }[] {\n    const cond = this.conditionExpression.substring(0, 20);\n    const hasNegation =\n      this.isNegated &&\n      (this.from.type === StepType.MACRO ||\n        this.from.type === StepType.ENCLOSING);\n    const showPriority =\n      this.from.type !== StepType.CONTAINER &&\n      this.connection.from.outputs.length > 1;\n\n    return [\n      {\n        text: showPriority ? `${this.priority}:` : \"\",\n        style: { textDecoration: hasNegation ? \"overline\" : undefined },\n      },\n      { text: `${cond}${this.conditionExpression.length > 20 ? \"...\" : \"\"}` },\n    ];\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      conditionExpression: this.conditionExpression,\n      priority: this.priority,\n      isNegated: this.isNegated,\n    };\n  }\n\n  @computed\n  get expressionTokens(): [CustomToken, number][] {\n    return getCustomTokens(this.conditionExpression);\n  }\n\n  @computed\n  get expressionErrors(): string[] {\n    const gemma = this.connection.graph.globalData;\n    try {\n      const { errors } = parseBoolExpression(this.conditionExpression, {\n        boolSignals: gemma.boolSignals.map((s) => s.name),\n        numSignals: gemma.numSignals.map((s) => s.name),\n      });\n      return errors;\n    } catch (e) {}\n    return [];\n  }\n\n  ConnectionView = observer(() => {\n    return (\n      <>\n        <PropertiesTable key=\"table\">\n          <tr key=\"priority\">\n            <td>Priority</td>\n            <td>\n              <ChoiceField\n                keys={this.priorityChoices}\n                value={\"\" + this.priority}\n                setValue={this.setPriority}\n              />\n            </td>\n          </tr>\n          <tr key=\"condition\">\n            <td>Condition</td>\n            <td>{<ConditionInput m={this} />}</td>\n          </tr>\n          {(this.from.type === StepType.MACRO ||\n            this.from.type === StepType.ENCLOSING) && (\n            <tr key=\"isNegated\">\n              <td>Negated</td>\n              <td>\n                {\n                  <Switch\n                    checked={this.isNegated}\n                    onChange={() => {\n                      this.isNegated = !this.isNegated;\n                    }}\n                    color=\"primary\"\n                  />\n                }\n              </td>\n            </tr>\n          )}\n        </PropertiesTable>\n        <div>\n          <h4 style={{ margin: \"0\" }}>Errors</h4>\n          {this.expressionErrors.length === 0 && \"No errors\"}\n          <ul style={{ color: \"indianred\", marginTop: \"0\" }} key=\"errors\">\n            {this.expressionErrors.map((err, index) => (\n              <li key={index}>{err}</li>\n            ))}\n          </ul>\n        </div>\n      </>\n    );\n  });\n}\n\nconst ConditionInput = observer(\n  ({\n    m,\n  }: {\n    m: {\n      conditionExpression: string;\n      expressionTokens: [CustomToken, number][];\n    };\n  }) => {\n    let prevIndex = 0;\n    let _spanStyleRef = useRef<HTMLSpanElement>(null);\n    const font = \"400 15px monospace\";\n\n    return (\n      <div style={{ width: \"180px\", position: \"relative\" }} className=\"center\">\n        <span\n          style={{\n            font,\n            position: \"absolute\",\n            top: 0,\n            padding: \"3px\",\n            textAlign: \"initial\",\n            whiteSpace: \"pre-line\",\n          }}\n          ref={_spanStyleRef}\n        >\n          {m.expressionTokens.map(([c, textIndex], index) => {\n            let color: string;\n            if (c instanceof VarId) {\n              color = \"black\";\n            } else if ([\"AND\", \"NOT\", \"OR\"].includes(c)) {\n              color = \"blue\";\n            } else {\n              color = \"brown\";\n            }\n            const whiteSpace = textIndex - prevIndex;\n            const text = \" \".repeat(whiteSpace) + c.toString();\n            prevIndex = textIndex + c.toString().length;\n            return (\n              <span key={index} style={{ color }}>\n                {text}\n              </span>\n            );\n          })}\n        </span>\n        <textarea\n          onScroll={(s) => {\n            _spanStyleRef.current!.scrollTo(0, s.currentTarget.scrollTop);\n          }}\n          className=\"multiline-input\"\n          style={{\n            font,\n            background: \"transparent\",\n            color: \"transparent\",\n            caretColor: \"black\",\n            position: \"relative\",\n          }}\n          spellCheck={false}\n          value={m.conditionExpression}\n          onChange={(e) => {\n            m.conditionExpression = e.currentTarget.value;\n          }}\n        ></textarea>\n      </div>\n    );\n  }\n);\n","\nexport abstract class SourceItem {\n  constructor(public name: string) {}\n\n  when(f: {file: (f: SourceFile) => void, dir: (f: SourceDirectory) => void}) {\n    if (this instanceof SourceFile) {\n      f.file(this)\n    } else if (this instanceof SourceDirectory) {\n      f.dir(this)\n    }\n  }\n}\n\nexport class SourceFile extends SourceItem {\n  constructor(name: string, public content: string) {\n    super(name);\n  }\n}\n\nexport class SourceDirectory extends SourceItem {\n  constructor(name: string, public items: SourceItem[]) {\n    super(name);\n  }\n}\n","import { MacroStep } from \"./step\";\n\nexport const macroStepTemplate = (model: MacroStep) =>\n  `\\\nFUNCTION_BLOCK ${model.name}_FB\n\n// Variable declaration\nVAR_INPUT\n  Initialization:BOOL;\nEND_VAR\n\nVAR_OUTPUT\n  Complete:BOOL;\nEND_VAR\n\n// FB behavior\nIF Initialization THEN\n  Complete:=FALSE;\n  //Initialization actions\n\nEND_IF\n\n//Nested behavior\n\n//Termination of the nested behavior\nComplete:=TRUE;\n`;\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { NodeModel } from \"./node-model\";\nimport { useStore } from \"../App\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledNode = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  background: #fff;\n  border-radius: 6;\n  border: 1.5px solid;\n`;\n\ntype NodeViewProps = { node: NodeModel<any, any, any> };\nexport const NodeView: React.FC<NodeViewProps> = observer((params) => {\n  const { node, children } = params;\n  const rootStore = useStore();\n  const onDrag = React.useCallback(\n    (_: DraggableEvent, data: DraggableData) => {\n      node.move(data.deltaX, data.deltaY);\n    },\n    [node]\n  );\n  const selectingInput = rootStore.selectingInputFor !== undefined;\n  const isValidInput =\n    selectingInput && rootStore.selectingInputFor!.data.isValidInput(node);\n  const isSelected = rootStore.selectedNode === node;\n\n  const onClick = React.useCallback(\n    (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      console.log(node);\n      if (selectingInput) {\n        if (isValidInput) {\n          rootStore.assignInput(node);\n        }\n      } else {\n        rootStore.selectNode(node);\n      }\n    },\n    [rootStore, node, selectingInput, isValidInput]\n  );\n  // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n  const { x, y } = node;\n\n  let style: React.CSSProperties = {};\n  if (isSelected) {\n    style[\"boxShadow\"] = \"rgb(110 110 110) 1px 1.5px 3px 1px\";\n  }\n  if (selectingInput) {\n    style[\"cursor\"] = isValidInput ? \"pointer\" : \"not-allowed\";\n  }\n  if (node.isHidden) {\n    style[\"opacity\"] = 0.1;\n  }\n\n  return (\n    <Draggable\n      onDrag={onDrag}\n      position={{\n        // TODO: improve x, y with support for nested children\n        x: x - (node.data.parent?.x ?? 0),\n        y: y - (node.data.parent?.y ?? 0),\n      }}\n      bounds=\"parent\"\n    >\n      <StyledNode\n        ref={(e) => {\n          if (e === null) return;\n          node.setElement(e);\n        }}\n        onClick={onClick}\n        style={style}\n      >\n        <node.data.View children={children} />\n      </StyledNode>\n    </Draggable>\n  );\n});\n","import { templateGemmaGrafcet, templateGlobals } from \"./gemma-templates\";\nimport {\n  GlobalData,\n  RootStoreModel,\n  DataBuilder,\n  JsonType,\n} from \"../canvas/store\";\nimport { action, computed, IObservableArray, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Transition } from \"./transition\";\nimport { Step, StepType, ProcedureType, BaseStep } from \"./step\";\nimport { NodeModel } from \"../node/node-model\";\nimport { IndexedDB } from \"../canvas/persistence\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"./gemma-styles.css\";\nimport { SourceDirectory, SourceFile } from \"../codegen/file-system\";\nimport { enclosingStepTemplate } from \"./enclosing-step\";\nimport { macroStepTemplate } from \"./macro-step\";\nimport { NodeView } from \"../node/node\";\nimport { Tooltip } from \"@material-ui/core\";\n\nenum SignalTypeBase {\n  bool = \"bool\",\n  int = \"int\",\n  uint = \"uint\",\n  real = \"real\",\n}\n\nenum SignalType {\n  bool = \"bool\",\n\n  sint = \"sint\",\n  int = \"int\",\n  lint = \"lint\",\n  dint = \"dint\",\n\n  usint = \"usint\",\n  uint = \"uint\",\n  ulint = \"ulint\",\n  udint = \"udint\",\n\n  real = \"real\",\n  lreal = \"lreal\",\n}\n\nenum SignalTypeSize {\n  s = \"s\",\n  i = \"i\",\n  l = \"l\",\n  d = \"d\",\n}\n\nconst signalTypeToPrimitives = (\n  type?: SignalType\n): { base: SignalTypeBase; size: SignalTypeSize } | undefined => {\n  if (type === undefined) {\n    return undefined;\n  }\n  switch (type) {\n    case SignalType.bool:\n      return { base: SignalTypeBase.bool, size: SignalTypeSize.i };\n    case SignalType.real:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.i };\n    case SignalType.lreal:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.l };\n  }\n  let base: SignalTypeBase;\n  let index: number;\n  if (type.startsWith(\"u\")) {\n    base = SignalTypeBase.uint;\n    index = 1;\n  } else {\n    base = SignalTypeBase.int;\n    index = 0;\n  }\n\n  const size = type.charAt(index) as SignalTypeSize;\n\n  if (!Object.keys(SignalTypeSize).includes(size)) {\n    return undefined;\n  }\n\n  return { base, size };\n};\n\nconst signalSizeMap: { [key in SignalTypeBase]: SignalTypeSize[] } = {\n  [SignalType.bool]: [SignalTypeSize.i],\n  [SignalType.int]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.uint]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.real]: [SignalTypeSize.i, SignalTypeSize.l],\n};\n\nexport class GemmaGrafcet implements GlobalData<Step> {\n  constructor(\n    private graph: RootStoreModel<Step, GemmaGrafcet, Transition>,\n    json?: JsonType\n  ) {\n    let signals: Signal[] = [];\n    if (Array.isArray(json?.signals)) {\n      signals = json?.signals\n        .map((s) => (typeof s === \"object\" ? Signal.fromJson(s) : undefined))\n        .filter((s) => s !== undefined) as Signal[];\n    }\n    this.signals = observable.array<Signal>(signals);\n  }\n\n  canAddNode = (nodeType: string): boolean => {\n    return true;\n  };\n\n  initState(): void {\n    const nodes = [...this.graph.nodes.values()];\n    this.fFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.F\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 600, y: 0 })!;\n    this.fFamily.setName(\"F family\");\n    this.fFamily.data.family = ProcedureType.F;\n\n    this.aFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.A\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 0, y: 0 })!;\n    this.aFamily.setName(\"A family\");\n    this.aFamily.data.family = ProcedureType.A;\n\n    this.dFamily =\n      nodes.find(\n        (n) =>\n          n.data.type === StepType.CONTAINER &&\n          n.data.family === ProcedureType.D\n      ) ?? this.graph.addNode(StepType.CONTAINER, { x: 0, y: 500 })!;\n    this.dFamily.setName(\"D family\");\n    this.dFamily.data.family = ProcedureType.D;\n  }\n\n  fFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  aFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  dFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n\n  private _hasInitialStep(): boolean {\n    return [...this.graph.nodes.values()].some((n) => n.data.isInitial);\n  }\n\n  @computed\n  get steps(): Step[] {\n    return [...this.graph.nodes.values()]\n      .filter((node) => !node.isHidden && node.data.type !== StepType.CONTAINER)\n      .map((node) => node.data);\n  }\n\n  readonly signals: IObservableArray<Signal>;\n\n  @computed\n  get numSignals(): Signal[] {\n    return this.signals.filter((s) => s.type !== SignalType.bool);\n  }\n\n  @computed\n  get boolSignals(): Signal[] {\n    return this.signals.filter((s) => s.type === SignalType.bool);\n  }\n\n  @computed\n  get initialStep(): Step | undefined {\n    return this.steps.find((s) => s.isInitial);\n  }\n\n  @computed\n  get generateMainFile(): string {\n    return templateGemmaGrafcet(this);\n  }\n\n  @computed\n  get generateSourceCode(): SourceDirectory {\n    const main = templateGemmaGrafcet(this);\n    const globals = templateGlobals(this.signals);\n    const files = [\n      new SourceFile(\"main.txt\", main),\n      new SourceFile(\"GVL.txt\", globals),\n    ];\n\n    for (const s of this.steps.values()) {\n      if (s.type === StepType.ENCLOSING) {\n        files.push(\n          new SourceFile(s.name + \"_FB.txt\", enclosingStepTemplate(s))\n        );\n      } else if (s.type === StepType.MACRO) {\n        files.push(new SourceFile(s.name + \"_FB.txt\", macroStepTemplate(s)));\n      }\n    }\n\n    return new SourceDirectory(\"gemma_grafcet\", files);\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      signals: this.signals.map((s) => s.toJson),\n    };\n  }\n\n  View = observer(() => {\n    const [showDelete, setShowDelete] = useState(false);\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h3 style={{ margin: \"5px 0 10px 5px\" }}>Signals</h3>\n          <Button onClick={(_) => setShowDelete(!showDelete)}>\n            {showDelete ? \"Hide Delete\" : \"Show Delete\"}\n            <FontAwesomeIcon\n              style={{ paddingLeft: \"7px\" }}\n              icon={\"trash-alt\"}\n              color={\"#000\"}\n            />\n          </Button>\n        </div>\n        <Table\n          id=\"signals-table\"\n          size=\"small\"\n          aria-label=\"a dense table\"\n          stickyHeader={true}\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Size</TableCell>\n              <TableCell>Default</TableCell>\n              {showDelete && <TableCell>Delete</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.signals.map((s, index) => (\n              <SignalRow\n                signal={s}\n                key={index}\n                showDelete={showDelete}\n                removeSignal={(s) => this.signals.remove(s)}\n                error={\n                  this.signals.findIndex(\n                    (s2) => s2.name === s.name && s !== s2\n                  ) !== -1\n                    ? \"Duplicate name\"\n                    : undefined\n                }\n              />\n            ))}\n          </TableBody>\n        </Table>\n        <Button\n          style={{ alignSelf: \"flex-end\" }}\n          onClick={(_) => this.signals.push(new Signal())}\n        >\n          Add Signal\n        </Button>\n      </div>\n    );\n  });\n\n  CanvasView = observer(() => {\n    const nodes = [...this.graph.nodes.values()];\n    const _nodesFromFamily = (family: ProcedureType) => {\n      return nodes\n        .filter(\n          (n) => n.data.family === family && n.data.type !== StepType.CONTAINER\n        )\n        .map((n) => {\n          return <NodeView node={n} key={n.key} />;\n        });\n    };\n\n    const _color = {\n      [ProcedureType.A]: { color: \"#ecf5ff\", size: { w: 600, h: 500 } },\n      [ProcedureType.D]: { color: \"#ffd6d6\", size: { w: 600, h: 500 } },\n      [ProcedureType.F]: { color: \"#ebffec\", size: { w: 600, h: 1000 } },\n    };\n\n    return (\n      <div style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}>\n        {nodes\n          .filter((n) => n.data.type === StepType.CONTAINER)\n          .map((n) => {\n            const _d = _color[n.data.family]!;\n            return (\n              <div\n                style={{\n                  background: _d.color,\n                  width: _d.size.w,\n                  height: _d.size.h,\n                  position: \"absolute\",\n                  top: n.y,\n                  left: n.x,\n                }}\n                key={n.key}\n                ref={(e) => {\n                  if (e === null) return;\n                  n.setSize(e.getBoundingClientRect());\n                }}\n              >\n                {_nodesFromFamily(n.data.family)}\n              </div>\n            );\n          })}\n      </div>\n    );\n  });\n}\n\nconst SignalRow = observer(\n  ({\n    signal: s,\n    showDelete,\n    removeSignal,\n    error,\n  }: {\n    signal: Signal;\n    showDelete: boolean;\n    removeSignal: (s: Signal) => void;\n    error?: string;\n  }) => {\n    const validator = regexSignalDefaultValid[s.typeBase];\n    const hasError =\n      s.defaultValue.length !== 0 && !validator.regex.test(s.defaultValue);\n    const defaultValueError = hasError ? validator.message : \"\";\n\n    return (\n      <TableRow>\n        <TableCell>\n          <Tooltip title={error !== undefined ? error : \"\"}>\n            <TextField\n              type=\"text\"\n              value={s.name}\n              onChange={(e) => (s.name = e.target.value)}\n              style={{ width: \"110px\" }}\n              error={error !== undefined}\n            />\n          </Tooltip>\n        </TableCell>\n        <TableCell>\n          <ChoiceField\n            keys={Object.keys(SignalTypeBase)}\n            setValue={(v) => s.setTypeBase(v as any)}\n            value={s.typeBase}\n          />\n        </TableCell>\n        <TableCell>\n          <ChoiceField\n            keys={signalSizeMap[s.typeBase]}\n            setValue={(v) => (s.typeSize = v as any)}\n            value={s.typeSize}\n            maxButton={0}\n          />\n        </TableCell>\n        <TableCell>\n          <Tooltip title={defaultValueError} open={true}>\n            <TextField\n              type={s.typeBase === SignalTypeBase.bool ? \"text\" : \"number\"}\n              value={s.defaultValue}\n              onChange={(e) => {\n                s.defaultValue = e.target.value.replace(/\\s/g, \"\");\n              }}\n              style={{ width: \"80px\" }}\n              error={hasError}\n            />\n          </Tooltip>\n        </TableCell>\n        {showDelete && (\n          <TableCell align=\"center\">\n            <IconButton onClick={(_) => removeSignal(s)} size=\"small\">\n              <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n            </IconButton>\n          </TableCell>\n        )}\n      </TableRow>\n    );\n  }\n);\n\nconst regexSignalDefaultValid = {\n  [SignalTypeBase.bool]: {\n    regex: /^(TRUE|FALSE)$/,\n    message: 'should be \"TRUE\" or \"FALSE\"',\n  },\n  [SignalTypeBase.int]: {\n    regex: /^-?[1-9][0-9]*$/,\n    message: \"should be an integer\",\n  },\n  [SignalTypeBase.uint]: {\n    regex: /^[1-9][0-9]*$/,\n    message: \"should be a positive integer\",\n  },\n  [SignalTypeBase.real]: {\n    regex: /^-?[0-9]*\\.?[0-9]+$/,\n    message: \"should be a number\",\n  },\n};\n\nexport class Signal {\n  @observable\n  didBlur: boolean = false;\n\n  @observable\n  name: string;\n  @observable\n  defaultValue: string;\n  @observable\n  typeSize: SignalTypeSize;\n  @observable\n  typeBase: SignalTypeBase;\n  @computed\n  get type(): SignalType {\n    if (this.typeBase === SignalTypeBase.bool) {\n      return SignalType.bool;\n    }\n    const sizeStr = this.typeSize === SignalTypeSize.i ? \"\" : this.typeSize!;\n    if (this.typeBase.startsWith(\"u\")) {\n      return (\"u\" + sizeStr + this.typeBase.substring(1)) as SignalType;\n    } else {\n      return (sizeStr + this.typeBase) as SignalType;\n    }\n  }\n\n  @action.bound\n  setTypeBase = (base: SignalTypeBase) => {\n    this.typeBase = base;\n    if (!signalSizeMap[base].includes(this.typeSize)) {\n      this.typeSize = signalSizeMap[base][0];\n    }\n  };\n\n  description?: string;\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      name: this.name,\n      type: this.type,\n      defaultValue: this.defaultValue,\n    };\n  }\n\n  static fromJson(json: JsonType): Signal | undefined {\n    if (\n      typeof json[\"name\"] === \"string\" &&\n      Object.keys(SignalType).includes(json[\"type\"] as any)\n    ) {\n      return new Signal(json);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(d?: {\n    name?: string;\n    description?: string;\n    type?: SignalType;\n    defaultValue?: string;\n  }) {\n    this.name = d?.name ?? \"\";\n    this.description = d?.description;\n    const typePrim = signalTypeToPrimitives(d?.type);\n    this.typeBase = typePrim?.base ?? SignalTypeBase.bool;\n    this.typeSize = typePrim?.size ?? SignalTypeSize.i;\n    this.defaultValue = d?.defaultValue ?? \"\";\n  }\n}\n\nexport const gemmaBuilders: DataBuilder<Step, GemmaGrafcet, Transition> = {\n  graphBuilder: (g, json) => new GemmaGrafcet(g, json),\n  nodeBuilder: (n, json) => {\n    console.log(json);\n    const type = json !== undefined ? json[\"type\"] : undefined;\n    if (typeof type === \"string\" && Object.keys(StepType).includes(type)) {\n      return new BaseStep(n, json);\n    }\n\n    return new BaseStep(n);\n  },\n  connectionBuilder: (c, json) => new Transition(c, json),\n};\n\nexport const make5NodesGraph = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const s1 = rootStore.addNode(StepType.SIMPLE, { x: 72, y: 60 });\n  if (s1 !== undefined) {\n    s1.data.isInitial = true;\n  }\n  const s2 = rootStore.addNode(StepType.MACRO, { x: 261, y: 170 });\n\n  [\n    s1,\n    s2,\n    rootStore.addNode(StepType.ENCLOSING, { x: 441, y: 316 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 211, y: 410 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 441, y: 500 }),\n  ].forEach((s, index) => s?.setName(`S${index + 1}`));\n\n  s1!.data.family = ProcedureType.A;\n  s2!.data.family = ProcedureType.D;\n  rootStore.selectNode(s1!);\n\n  rootStore.selectingInput(s1!);\n  const conn = rootStore.assignInput(s2!);\n\n  rootStore.selectConnection(conn);\n  rootStore.globalData.signals.push(new Signal({ name: \"\" }));\n  return rootStore;\n};\n\nexport const makeBaseGemmaTemplate = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n    hideOnDelete: true,\n  });\n\n  const nodesRaw: {\n    [key in ProcedureType]: {\n      [key: string]: { type: StepType; x: number; y: number };\n    };\n  } = {\n    [ProcedureType.A]: {\n      A1: { type: StepType.SIMPLE, x: 497, y: 125 },\n      A2: { type: StepType.SIMPLE, x: 260, y: 364 },\n      A3: { type: StepType.SIMPLE, x: 444, y: 400 },\n      A4: { type: StepType.SIMPLE, x: 457, y: 246 },\n      A5: { type: StepType.MACRO, x: 100, y: 301 },\n      A6: { type: StepType.SIMPLE, x: 173, y: 54 },\n      A7: { type: StepType.MACRO, x: 239, y: 176 },\n    },\n    [ProcedureType.D]: {\n      D1: { type: StepType.MACRO, x: 146, y: 767 },\n      D2: { type: StepType.SIMPLE, x: 221, y: 573 },\n      D3: { type: StepType.ENCLOSING, x: 381, y: 639 },\n    },\n    [ProcedureType.F]: {\n      F1: { type: StepType.MACRO, x: 768, y: 707 },\n      F2: { type: StepType.MACRO, x: 846, y: 233 },\n      F3: { type: StepType.MACRO, x: 982, y: 147 },\n      F4: { type: StepType.ENCLOSING, x: 848, y: 29 },\n      F5: { type: StepType.ENCLOSING, x: 734, y: 282 },\n      F6: { type: StepType.ENCLOSING, x: 722, y: 378 },\n    },\n  };\n\n  const nodes: {\n    [key: string]: NodeModel<Step, GemmaGrafcet, Transition>;\n  } = {};\n\n  for (const [family, nn] of Object.entries(nodesRaw)) {\n    for (const [k, v] of Object.entries(nn)) {\n      const n = rootStore.addNode(v.type, { x: v.x, y: v.y });\n      n?.setName(k);\n      n!.data.family = family as ProcedureType;\n      nodes[k] = n!;\n      if (k === \"A6\") {\n        n!.data.isInitial = true;\n      }\n    }\n  }\n\n  const connections = {\n    A1: [\"F2\", \"F1\", \"F6\", \"F5\", \"F4\"],\n    A2: [\"A1\"],\n    A3: [\"A4\"],\n    A4: [\"F1\"],\n    A5: [\"A7\"],\n    A6: [\"A1\"],\n    A7: [\"A4\"],\n    F1: [\"F3\", \"A2\", \"A3\", \"D1\", \"D3\"],\n    F2: [\"F1\"],\n    F3: [\"A1\"],\n    F4: [\"A6\"],\n    D1: [\"D2\", \"A5\"],\n    D2: [\"A5\"],\n    D3: [\"A2\", \"A3\"],\n  };\n\n  for (const [from, v] of Object.entries(connections)) {\n    for (const to of v) {\n      rootStore.addConnection(nodes[from], nodes[to]);\n    }\n  }\n\n  rootStore.addConnection(rootStore.globalData.fFamily!, nodes[\"D1\"]!, {\n    conditionExpression: \"I1 AND I2\",\n  });\n\n  const a1 = nodes[\"A1\"]!;\n  rootStore.selectNode(a1);\n  rootStore.selectConnection(a1.outputs[0]);\n\n  return rootStore;\n};\n","import { EnclosingStep } from \"./step\";\n\nexport const enclosingStepTemplate = (model: EnclosingStep) =>\n  `\\\nFUNCTION_BLOCK ${model.name}_FB\n\n// Variable declaration\nVAR_INPUT\n  Initialization:BOOL;\nEND_VAR\n\n// FB behavior\nIF Initialization THEN\n  //Initialization actions\n\nEND_IF\n\n//Nested behavior\n\n`;\n","import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport React, { useCallback, useState } from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { ConfigView } from \"./canvas/config-view\";\nimport { createIndexedDB, IndexedDB } from \"./canvas/persistence\";\nimport { RootStoreModel, GlobalData } from \"./canvas/store\";\nimport { NodeData, ConnectionData } from \"./node/node-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\nimport { gemmaBuilders, makeBaseGemmaTemplate } from \"./step/gemma\";\nimport { importJson } from \"./utils\";\n\nexport const storeContext = React.createContext<RootStoreModel<\n  any,\n  any,\n  any\n> | null>(null);\n\nexport function useStore<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>() {\n  const store = React.useContext<RootStoreModel<D, G, C> | null>(storeContext);\n  if (!store) {\n    throw Error(\"useStore should be used inside a Store provider.\");\n  }\n  return store;\n}\n\ntype RootStore = RootStoreModel<any, any, any>;\n\nexport function App() {\n  const [globalDB, setDB] = React.useState<IndexedDB | null>(null);\n  const [store, setStore] = React.useState<RootStore | null>(null);\n  const _isReset = store && store.resetStore;\n  React.useEffect(() => {\n    if (!store) {\n      createIndexedDB().then(async (db) => {\n        setDB(db);\n        const graphs = await db.fetchGraphs();\n\n        let _store: RootStore;\n        const graph = graphs[0];\n        if (graph !== undefined) {\n          const graphExt = await db.loadGraph(graph.key);\n          _store = new RootStoreModel({\n            db,\n            json: { graph, ...graphExt },\n            hideOnDelete: true,\n            builders: gemmaBuilders,\n          });\n        } else {\n          _store = makeBaseGemmaTemplate(db);\n        }\n\n        (window as any).store = _store;\n        setStore(_store);\n      });\n    } else if (store.resetStore) {\n      setStore(null);\n    }\n  }, [store, _isReset]);\n\n  if (!store) {\n    return <div className=\"center\">Loading...</div>;\n  }\n\n  return (\n    <storeContext.Provider value={store}>\n      <div\n        className=\"row\"\n        style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n      >\n        {/* <div className=\"col\">\n          <MainMenu items={Object.keys(rootStore.builders.nodeBuilder)} />\n        </div> */}\n        <div\n          className=\"col\"\n          style={{\n            width: \"0px\",\n            background: \"rgba(250,250,250,0.7)\",\n            flex: \"1 0 auto\",\n          }}\n        >\n          <div className=\"row\" style={{ minHeight: 0, flex: 1 }}>\n            <div className=\"col\">\n              <TopMenu store={store} globalDB={globalDB!} setStore={setStore} />\n              <MainCanvas />\n            </div>\n            <ConfigView />\n          </div>\n          <PropertiesView />\n        </div>\n      </div>\n    </storeContext.Provider>\n  );\n}\n\nfunction TopMenu({\n  store,\n  setStore,\n  globalDB,\n}: {\n  store: RootStore;\n  globalDB: IndexedDB;\n  setStore: (store: RootStore) => void;\n}) {\n  const [isResetDialogOpen, setIsResetDialogOpen] = useState(false);\n  const toggleDialog = useCallback(() => {\n    setIsResetDialogOpen(!isResetDialogOpen);\n  }, [isResetDialogOpen]);\n\n  return (\n    <div\n      className=\"row\"\n      style={{\n        justifyContent: \"flex-end\",\n        borderBottom: \"rgb(221 220 220) solid 1.5px\",\n      }}\n    >\n      <Button\n        onClick={(_) => {\n          store.saveModel();\n        }}\n      >\n        Save\n      </Button>\n      <Button onClick={toggleDialog}>Reset</Button>\n      <Dialog\n        open={isResetDialogOpen}\n        onClose={toggleDialog}\n        keepMounted\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          Reset Diagram State\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Are you sure you want to reset the diagram state? All changes will\n            be lost.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleDialog} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={async (_) => {\n              const _store = makeBaseGemmaTemplate(globalDB);\n              setStore(_store);\n              toggleDialog();\n            }}\n            color=\"primary\"\n          >\n            Reset Diagram\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Button\n        onClick={(_) => {\n          store.downloadModel();\n        }}\n      >\n        Export\n      </Button>\n      <Button>\n        <label\n          htmlFor=\"import-file-input\"\n          style={{ margin: 0, width: \"100%\", cursor: \"pointer\" }}\n        >\n          Import\n        </label>\n        <input\n          type=\"file\"\n          id=\"import-file-input\"\n          accept=\"application/json\"\n          style={{ display: \"none\" }}\n          onChange={async (e) => {\n            const json = await importJson(e);\n            if (typeof json === \"string\") {\n              try {\n                const val = JSON.parse(json);\n                const _store = new RootStoreModel({\n                  db: globalDB,\n                  json: val,\n                  builders: gemmaBuilders,\n                });\n                setStore(_store);\n              } catch (e) {\n                console.log(e);\n              }\n            }\n          }}\n        />\n      </Button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp, faTrashAlt, faEye, faEyeSlash} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp, faTrashAlt, faEye, faEyeSlash);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}