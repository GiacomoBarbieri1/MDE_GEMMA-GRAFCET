{"version":3,"sources":["canvas/arrow.tsx","canvas/canvas.tsx","utils.ts","canvas/config-view.tsx","canvas/persistence.ts","node/node-model.tsx","canvas/store.tsx","properties/properties-table.tsx","properties/properties-view.tsx","step/custom_parser.ts","fields/choice-field.tsx","step/step.tsx","step/gemma-templates.ts","fields/primitive-field.tsx","grammar/SimpleBooleanLexer.ts","grammar/SimpleBooleanParser.ts","step/antlr_parser.ts","step/transition.tsx","codegen/file-system.ts","step/macro-step.ts","node/node.tsx","step/gemma.tsx","step/enclosing-step.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["triangleFromCenter","x","y","height","width","y0","ArrowView","observer","changeX","changeY","connection","rootStore","useStore","from","to","isSelected","x1","y1","x2","y2","dy","dx","m","Math","abs","deltaX","xa","ya","xm","ym","degrees","atan2","PI","style","strokeWidth","stroke","d","onClick","e","selectConnection","RectAndText","text","data","connectionText","rectFill","_","transform","padding","React","useState","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","undefined","fill","cursor","ref","MainCanvas","ops","nodes","values","overflow","flex","position","border","background","margin","borderRadius","globalData","CanvasView","flatMap","op","inputs","map","key","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","reduce","p","k","v","downloadToClient","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","importJson","event","files","target","Promise","resolve","window","alert","reader","FileReader","onload","result","onabort","onerror","readAsText","DBStores","ConfigView","connections","c","forEach","get","set","push","Map","orderedOps","counts","filter","withDependencies","length","numProcessed","size","slice","outs","dep","delete","minWidth","defaultSize","boxShadow","enable","className","borderBottom","Button","downloadSourceCode","generateMainFile","openDB","upgrade","db","createObjectStore","graph","keyPath","autoIncrement","node","createIndex","IndexedDB","getKeyFromConnection","path","connectionWithKey","graphKey","assign","this","getAll","value","put","tx","transaction","objectStore","dbKey","index","openCursor","continue","done","all","getAllFromIndex","_g","n","store","add","updateMany","close","clear","keys","items","val","Error","item","ConnModel","dataBuilder","json","selectedConnection","toJson","computed","NodeModel","name","conn","outputs","observable","array","action","rect","RootStoreModel","builders","graphBuilder","v4","nodeBuilder","addConnection","selectedNode","next","_n","initState","_in","remove","_out","clearDB","updateGraph","addNodes","addConnections","t","console","log","JSON","stringify","_addToZip","root","dir","newRoot","folder","when","zip","JSZip","sourceCode","generateSourceCode","generateAsync","nodeType","pos","canAddNode","selectingInputFor","addEventListener","_selectingInputKeyListener","connectionBuilder","addOutput","removeEventListener","ev","PropertiesTable","children","PropertiesTableStyled","PropertiesTableNode","self","spec","plotField","model","nInputs","variant","styled","table","PropertiesView","inner","maxHeight","maxWidth","justifyContent","backgroundColor","display","alignItems","IconButton","removeNode","icon","color","removeConnection","ConnectionView","View","minHeight","VarId","StepType","ProcedureType","ButtonsDiv","div","ChoiceFieldSpec","choices","default","onChange","isObservableMap","Symbol","toStringTag","mobxProp","types","optional","string","Array","setValue","ChoiceField","maxButton","Select","autoWidth","marginBottom","disabled","MenuItem","ButtonGroup","aria-label","buttonStyle","BaseStep","l","Number","POSITIVE_INFINITY","errors","SIMPLE","CONTAINER","toString","INITIAL","otherInitial","automationSystem","steps","find","s","_color","A","D","F","family","innerStyle","nodeHeight","ENCLOSING","MACRO","borderRight","borderLeft","description","inputNodes","every","aFamily","dFamily","fFamily","sort","b","priority","_transitions","workingFamilyTransitions","concat","indexOf","SimpleStep","ContainerStep","InitialStep","EnclosingStep","MacroStep","EnclosingDecoration","H","textOrEmpty","cond","templateCondition","expressionTokens","tok","join","templateTransitions","transitions","isNested","templateFBEntry","templateGemmaGrafcet","initialStep","step","templateGemmaGrafcetEnclosingStep","templateGemmaGrafcetSimpleStep","innerTransitionsLength","templateGemmaGrafcetMacroStep","replace","StrFieldSpec","maxLength","minLength","multiline","TextField","fullWidth","inputProps","textAlign","error","SimpleBooleanLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","AND","OR","NOT","TRUE","FALSE","GT","GE","LT","LE","EQ","LPAREN","RPAREN","DECIMAL","IDENTIFIER","WS","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","SimpleBooleanParser","ParserATNSimulator","_localctx","ParseContext","_ctx","state","enterRule","RULE_parse","enterOuterAlt","expression","match","EOF","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","ExpressionContext","RULE_expression","sync","interpreter","adaptivePredict","_input","NotExpressionContext","OrExpressionContext","_left","expressionAnd","_right","AndParentExpressionContext","ExpressionAndContext","RULE_expressionAnd","AndExpressionContext","expressionSimple","SimpleExpressionContext","ExpressionSimpleContext","RULE_expressionSimple","ComparatorExpressionContext","numExpression","_op","comparator","IdentifierExpressionContext","ParenExpressionContext","NumExpressionContext","RULE_numExpression","LA","IdentifierNumExpressionContext","DecimalExpressionContext","NoViableAltException","_la","ComparatorContext","RULE_comparator","recoverInline","Token","matchedEOF","reportMatch","consume","Parser","parent","invokingState","getRuleContext","getToken","listener","enterParse","exitParse","visitor","visitParse","visitChildren","ParserRuleContext","ctx","copyFrom","enterNotExpression","exitNotExpression","visitNotExpression","enterOrExpression","exitOrExpression","visitOrExpression","enterAndParentExpression","exitAndParentExpression","visitAndParentExpression","enterAndExpression","exitAndExpression","visitAndExpression","enterSimpleExpression","exitSimpleExpression","visitSimpleExpression","i","getRuleContexts","enterComparatorExpression","exitComparatorExpression","visitComparatorExpression","enterIdentifierExpression","exitIdentifierExpression","visitIdentifierExpression","enterParenExpression","exitParenExpression","visitParenExpression","enterIdentifierNumExpression","exitIdentifierNumExpression","visitIdentifierNumExpression","enterDecimalExpression","exitDecimalExpression","visitDecimalExpression","tryGetToken","enterComparator","exitComparator","visitComparator","ErrorVisitor","signals","isInvalid","aggregate","nextResult","boolSignals","includes","numSignals","AbstractParseTreeVisitor","Transition","bound","conditionExpression","priorityChoices","setPriority","ConditionInput","expressionErrors","marginTop","err","substring","omit","signal","addSignal","prevToken","strPrev","getCustomTokens","gemma","inputStream","CharStreams","fromString","lexer","tokenStream","CommonTokenStream","tree","parse","countFunctionsVisitor","visit","toProcess","curr","pop","childCount","getChild","parseBoolExpression","parseInt","prevIndex","_spanStyleRef","useRef","font","whiteSpace","textIndex","repeat","onScroll","current","scrollTo","currentTarget","scrollTop","caretColor","spellCheck","SourceItem","SourceFile","SourceDirectory","macroStepTemplate","SignalTypeBase","SignalType","SignalTypeSize","StyledNode","NodeView","params","onDrag","useCallback","move","deltaY","selectingInput","isValidInput","assignInput","selectNode","bounds","setSize","getBoundingClientRect","signalSizeMap","bool","int","uint","real","GemmaGrafcet","_hasInitialStep","showDelete","setShowDelete","flexDirection","paddingLeft","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","SignalRow","removeSignal","findIndex","s2","alignSelf","Signal","w","h","_d","isArray","fromJson","addNode","setName","some","main","globals","defaultValue","trim","Tooltip","title","setTypeBase","typeBase","typeSize","didBlur","regexSignalDefaultValid","test","onBlur","align","typePrim","base","lreal","startsWith","charAt","signalTypeToPrimitives","sizeStr","gemmaBuilders","g","makeBaseGemmaTemplate","nodesRaw","A6","A1","A2","A3","A4","A5","A7","D1","D2","D3","F1","F2","F3","F4","F5","F6","nn","_t","a1","storeContext","createContext","useContext","App","globalDB","setDB","setStore","_isReset","resetStore","createIndexedDB","then","fetchGraphs","graphs","loadGraph","graphExt","_store","Provider","TopMenu","saveModel","downloadModel","htmlFor","accept","Boolean","location","hostname","library","faChevronDown","faChevronUp","faTrashAlt","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1e2e2b96.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { NodeModel, ConnModel } from \"../node/node-model\";\nimport { useStore } from \"../App\";\n\nexport type ArrowModel = {\n  from: NodeModel<any, any, any>;\n  to: NodeModel<any, any, any>;\n};\n\ntype ArrowViewProps = { connection: ConnModel<any, any, any> };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ connection }: ArrowViewProps) => {\n    const rootStore = useStore();\n    const { from, to, isSelected } = connection;\n\n    const [x1, y1, x2, y2] = [\n      from.x + from.width / 2,\n      from.y + from.height / 2,\n      to.x + to.width / 2,\n      to.y + to.height / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onClick={(e) => {\n            rootStore.selectConnection(connection);\n          }}\n        />\n        <RectAndText\n          text={connection.data.connectionText}\n          x={xm}\n          rectFill={isSelected ? \"#eeedff\": \"#eee\"}\n          y={ym}\n          onClick={(_) => rootStore.selectConnection(connection)}\n        />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n  onClick: (event: React.MouseEvent<any, MouseEvent>) => void;\n}> = observer(\n  ({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3, onClick }) => {\n    const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n    const [prev, setPrev] = React.useState(text);\n    const bbox = textRef?.getBBox();\n    React.useEffect(() => {\n      if (prev !== text) {\n        const id = setTimeout(() => setPrev(text), 0);\n        return () => clearTimeout(id);\n      }\n    });\n\n    return (\n      <>\n        {bbox !== undefined && (\n          <rect\n            width={bbox.width + padding * 2}\n            height={bbox.height + padding * 2}\n            x={xm - bbox.width / 2 - padding}\n            y={ym - bbox.height + padding}\n            fill={rectFill}\n            onClick={onClick}\n            style={{ cursor: \"pointer\" }}\n          ></rect>\n        )}\n        <text\n          x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n          y={ym}\n          fill=\"black\"\n          ref={setTextRef}\n          onClick={onClick}\n          style={{ cursor: \"pointer\" }}\n        >\n          {text}\n        </text>\n      </>\n    );\n  }\n);\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n  const ops = [...rootStore.nodes.values()];\n  return (\n    <div style={{ overflow: \"auto\", flex: \"1\" }}>\n      <div\n        style={{\n          position: \"relative\",\n          border: \"1px solid #eee\",\n          background: \"#fff\",\n          margin: \"10px\",\n          borderRadius: \"6px\",\n          flex: 1,\n          height: \"1000px\",\n          width: \"1200px\",\n        }}\n      >\n        <rootStore.globalData.CanvasView/>\n        <svg style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}>\n          {ops\n            .flatMap((op) => op.inputs)\n            .map((connection) => (\n              <ArrowView\n                connection={connection}\n                key={connection.from.key + connection.to.key}\n              />\n            ))}\n        </svg>\n      </div>\n    </div>\n  );\n});\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce(\n    (p, [k, v]) => {\n      if (v !== undefined) {\n        p[k as keyof typeof defaultResizeEnable] = v;\n      }\n      return p;\n    },\n    { ...defaultResizeEnable }\n  );\n}\n\nexport function downloadToClient(\n  content: BlobPart,\n  fileName: string,\n  contentType: string\n) {\n  let a = document.createElement(\"a\");\n  let file = new Blob([content], { type: contentType });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n}\n\nexport function importJson(\n  event: React.ChangeEvent<HTMLInputElement>\n): Promise<string | ArrayBuffer | null | undefined> {\n  const files = event.target.files;\n  return new Promise((resolve, _) => {\n    if (files !== null) {\n      const file = files[0];\n      if (file.type !== \"application/json\") {\n        window.alert(\n          \"Debes seleccionar un archivo válido, la extensión debe ser '.json'.\"\n        );\n        return resolve(undefined);\n      }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          resolve(e.target?.result);\n        };\n        reader.onabort = (e) => {\n          resolve(undefined);\n        };\n        reader.onerror = (e) => {\n          resolve(undefined);\n        };\n        reader.readAsText(file);\n    } else {\n      resolve(undefined);\n    }\n  });\n}\n","import Button from \"@material-ui/core/Button\";\nimport { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { useStore } from \"../App\";\nimport { NodeModel } from \"../node/node-model\";\nimport { resizableEnable } from \"../utils\";\nimport { GlobalData } from \"./store\";\n\ntype Props = {};\n\nexport const ConfigView: React.FC<Props> = observer(<\n  G extends GlobalData<any>\n>() => {\n  const rootStore = useStore<any, G, any>();\n  const ops = [...rootStore.nodes.values()];\n  const connections = ops.reduce((p, c) => {\n    c.inputs.forEach((v) => {\n      let m = p.get(v.to);\n      if (m === undefined) {\n        m = [];\n        p.set(v.to, m);\n      }\n      m.push(c);\n    });\n    return p;\n  }, new Map<NodeModel<any, any, any>, NodeModel<any, any, any>[]>());\n\n  const orderedOps: NodeModel<any, any, any>[] = [];\n  const counts = new Map(\n    ops\n      .filter((op) => {\n        const withDependencies = op.data.length !== 0;\n        if (!withDependencies) {\n          orderedOps.push(op);\n        }\n        return withDependencies;\n      })\n      .map((op) => [op, op.data.length])\n  );\n  let numProcessed = 0;\n  while (counts.size !== 0 && orderedOps.length !== numProcessed) {\n    for (let k of orderedOps.slice(numProcessed)) {\n      numProcessed += 1;\n      const outs = connections.get(k);\n      if (outs === undefined) continue;\n\n      for (let dep of outs) {\n        const m = counts.get(dep)!;\n        if (m === 1) {\n          counts.delete(dep);\n          orderedOps.push(dep);\n        } else {\n          counts.set(dep, m - 1);\n        }\n      }\n    }\n  }\n\n  if (counts.size !== 0) {\n    // CICLE ?\n  }\n\n  return (\n    <Resizable\n      minWidth={200}\n      defaultSize={{ height: \"auto\", width: 250 }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ left: true })}\n    >\n      <div className=\"col\" style={{ height: \"100%\" }}>\n        <div style={{ borderBottom: \"rgb(221 220 220) solid 1.5px\" }}>\n          <Button\n            onClick={async (_) => {\n              rootStore.downloadSourceCode();\n            }}\n          >\n            Download Code\n          </Button>\n        </div>\n        <div\n          style={{\n            overflow: \"auto\",\n            height: \"100%\",\n            padding: \"0 10px\",\n            flex: 1,\n          }}\n        >\n          <pre>{rootStore.globalData.generateMainFile}</pre>\n        </div>\n      </div>\n    </Resizable>\n  );\n});\n","import { DBSchema, IDBPDatabase, openDB } from \"idb\";\nimport { JsonType } from \"./store\";\n\nconst DB_NAME = \"GemmaGrafcet\";\nenum DBStores {\n  graph = \"graph\",\n  node = \"node\",\n  connection = \"connection\",\n}\n\nexport type GraphJson = {\n  key: string;\n  data: JsonType;\n};\n\nexport type NodeJson = {\n  key: string;\n  name: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  data: JsonType;\n};\n\ntype _NodeJson = NodeJson & {\n  graphKey: string;\n};\n\nexport type ConnectionJson = {\n  from: string;\n  to: string;\n  data: JsonType;\n};\n\ntype _ConnectionJson = ConnectionJson & {\n  key: string;\n  graphKey: string;\n};\n\ninterface MyDB extends DBSchema {\n  [DBStores.graph]: {\n    key: string;\n    value: GraphJson;\n  };\n  [DBStores.node]: {\n    key: string;\n    value: _NodeJson;\n    indexes: { \"by-graph\": string };\n  };\n  [DBStores.connection]: {\n    key: string;\n    value: _ConnectionJson;\n    indexes: { \"by-graph\": string };\n  };\n}\n\nexport async function createIndexedDB() {\n  const db = await openDB<MyDB>(DB_NAME, 1, {\n    upgrade(db) {\n      db.createObjectStore(DBStores.graph, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n\n      const nodeStore = db.createObjectStore(DBStores.node, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      nodeStore.createIndex(\"by-graph\", \"graphKey\");\n\n      const connStore = db.createObjectStore(DBStores.connection, {\n        keyPath: \"key\",\n        autoIncrement: false,\n      });\n      connStore.createIndex(\"by-graph\", \"graphKey\");\n    },\n  });\n  return new IndexedDB(db);\n}\n\nexport function sameKeys(path: ConnectionJson, path2: ConnectionJson) {\n  return getKeyFromConnection(path) === getKeyFromConnection(path2);\n}\n\nexport function getKeyFromConnection(path: ConnectionJson) {\n  return `${path.from}_${path.to}`;\n}\n\nexport function connectionWithKey(\n  graphKey: string,\n  path: ConnectionJson\n): _ConnectionJson {\n  return Object.assign(path, { key: getKeyFromConnection(path), graphKey });\n}\n\nexport class IndexedDB {\n  constructor(private db: IDBPDatabase<MyDB>) {}\n\n  //\n  // GRAPHS\n  //\n\n  fetchGraphs() {\n    return this.db.getAll(DBStores.graph);\n  }\n\n  updateGraph(value: GraphJson) {\n    return this.db.put(DBStores.graph, value);\n  }\n\n  async deleteGraph(graphKey: string) {\n    const tx = this.db.transaction(\n      [DBStores.graph, DBStores.node, DBStores.connection],\n      \"readwrite\"\n    );\n    tx.objectStore(DBStores.graph).delete(graphKey);\n    for (const dbKey of [DBStores.node, DBStores.connection] as Array<\n      DBStores.node | DBStores.connection\n    >) {\n      let cursor = await tx\n        .objectStore(dbKey)\n        .index(\"by-graph\")\n        .openCursor(graphKey);\n      while (cursor) {\n        cursor.delete();\n        cursor = await cursor.continue();\n      }\n    }\n    await tx.done;\n  }\n\n  async loadGraph(graphKey: string) {\n    const [nodes, connections] = await Promise.all([\n      this.db.getAllFromIndex(DBStores.node, \"by-graph\", graphKey),\n      this.db.getAllFromIndex(DBStores.connection, \"by-graph\", graphKey),\n    ]);\n\n    return { nodes, connections };\n  }\n\n  //\n  // NODES\n  //\n\n  async addNodes(graphKey: string, nodes: NodeJson[]) {\n    const tx = this.db.transaction(DBStores.node, \"readwrite\");\n\n    const _g = { graphKey };\n    for (const n of nodes) {\n      tx.store.add(Object.assign(n, _g));\n    }\n    return await tx.done;\n  }\n\n  deleteNode(path: NodeJson) {\n    return this.db.delete(DBStores.node, path.key);\n  }\n\n  async updateNode(graphKey: string, path: NodeJson) {\n    return this.db.put(DBStores.node, Object.assign(path, { graphKey }));\n  }\n\n  async updateNodes(graphKey: string, nodes: Array<NodeJson>) {\n    const _g = { graphKey };\n    return this.updateMany(\n      DBStores.node,\n      nodes.map((n) => n.key),\n      nodes.map((p) => Object.assign(p, _g))\n    );\n  }\n\n  //\n  // CONNECTIONS\n  //\n\n  async addConnections(graphKey: string, connections: ConnectionJson[]) {\n    const tx = this.db.transaction(DBStores.connection, \"readwrite\");\n\n    for (const p of connections) {\n      tx.store.add(connectionWithKey(graphKey, p));\n    }\n    return await tx.done;\n  }\n\n  deleteConnection(path: ConnectionJson) {\n    return this.db.delete(DBStores.connection, getKeyFromConnection(path));\n  }\n\n  async updateConnection(graphKey: string, connection: ConnectionJson) {\n    return this.db.put(DBStores.connection, connectionWithKey(graphKey, connection));\n  }\n\n  async updateConnections(graphKey: string, connections: Array<ConnectionJson>) {\n    return this.updateMany(\n      DBStores.connection,\n      connections.map(getKeyFromConnection),\n      connections.map((p) => connectionWithKey(graphKey, p))\n    );\n  }\n\n  //\n  // OTHER\n  //\n\n  async closeDB() {\n    this.db.close();\n  }\n\n  async clearDB() {\n    await Promise.all([\n      this.db.clear(DBStores.graph),\n      this.db.clear(DBStores.connection),\n      this.db.clear(DBStores.node),\n    ]);\n  }\n\n  private async updateMany<T>(dbKey: DBStores, keys: string[], items: T[]) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    await Promise.all(\n      items.map(async (path, index) => {\n        const key = keys[index];\n        const val = await tx.store.get(key);\n\n        if (!val) {\n          throw new Error();\n        }\n        return tx.store.put({ ...val, ...path });\n      })\n    );\n    return await tx.done;\n  }\n\n  private async updateIncrementalSingle<T>(\n    dbKey: DBStores,\n    key: string,\n    item: T\n  ) {\n    const tx = this.db.transaction(dbKey, \"readwrite\");\n    const val = await tx.store.get(key);\n\n    if (!val) {\n      throw new Error();\n    }\n    tx.store.put({ ...val, ...item });\n    await tx.done;\n  }\n}\n","import { action, computed, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn } from \"mobx-state-tree\";\nimport { FieldSpec } from \"../fields\";\nimport { GlobalData, RootStoreModel, JsonType } from \"../canvas/store\";\nimport { ConnectionJson, NodeJson } from \"../canvas/persistence\";\n\nexport type OperationI<\n  V extends { [key: string]: FieldSpec },\n  D extends NodeData<D, G, any>,\n  G extends GlobalData<D>\n> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  nInputs: number;\n  errors: ObservableMap<keyof V, string>;\n};\n\nexport const mobxDecorators = <V extends { [key: string]: FieldSpec }>(\n  spec: V\n) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    errors: observable,\n  };\n};\n\nexport interface NodeData<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  isValidInput(input: NodeModel<D, G, C>): boolean;\n  nInputs: number;\n  spec: { [key: string]: FieldSpec };\n  // TODO: ObservableMap<keyof V, string>\n  errors: ObservableMap<string, string>;\n  View: React.FC;\n  toJson: JsonType;\n  parent?: NodeModel<D, G, C>;\n}\n\nexport type ConnectionData<D> = {\n  ConnectionView: React.FunctionComponent;\n  connectionText: string;\n  toJson: JsonType;\n};\n\nexport class ConnModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public from: NodeModel<D, G, C>,\n    public to: NodeModel<D, G, C>,\n    dataBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C,\n    json?: JsonType\n  ) {\n    this.data = dataBuilder(this, json);\n  }\n\n  get graph(): RootStoreModel<D, G, any> {\n    return this.from.graph;\n  }\n\n  @computed\n  get isSelected(): boolean {\n    return this.from.graph.selectedConnection === this;\n  }\n\n  data: C;\n\n  @computed\n  get toJson(): ConnectionJson {\n    return {\n      from: this.from.key,\n      to: this.to.key,\n      data: this.data.toJson,\n    };\n  }\n}\n\nexport class NodeModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<G>\n> {\n  constructor(\n    public graph: RootStoreModel<D, G, any>,\n    d: {\n      key: string;\n      name: string;\n      x: number;\n      y: number;\n      dataBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n      data?: JsonType;\n    }\n  ) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.dataBuilder(this, d.data);\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: D;\n  @observable\n  inputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get inputNodes(): NodeModel<D, G, C>[] {\n    return this.inputs.map((c) => c.from);\n  }\n  @observable\n  outputs = observable.array<ConnModel<D, G, C>>();\n  @computed\n  get outputNodes(): NodeModel<D, G, C>[] {\n    return this.outputs.map((c) => c.to);\n  }\n\n  @action\n  addInput(conn: ConnModel<D, G, C>) {\n    this.inputs.push(conn);\n    conn.from.outputs.push(conn);\n  }\n\n  @action\n  addOutput(conn: ConnModel<D, G, C>) {\n    this.outputs.push(conn);\n    conn.to.inputs.push(conn);\n  }\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n\n  @computed\n  get toJson(): NodeJson {\n    return {\n      key: this.key,\n      name: this.name,\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      data: this.data.toJson,\n    };\n  }\n}\n","import {\n  action,\n  computed,\n  IKeyValueMap,\n  IMapEntries,\n  observable,\n  ObservableMap,\n} from \"mobx\";\nimport { v4 } from \"uuid\";\nimport { SourceDirectory } from \"../codegen/file-system\";\nimport {\n  NodeModel,\n  NodeData,\n  ConnModel,\n  ConnectionData,\n} from \"../node/node-model\";\nimport { downloadToClient } from \"../utils\";\nimport JSZip from \"jszip\";\nimport { ConnectionJson, GraphJson, IndexedDB, NodeJson } from \"./persistence\";\n\nexport type DataBuilder<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  connectionBuilder: (connection: ConnModel<D, G, C>, json?: JsonType) => C;\n  nodeBuilder: (node: NodeModel<D, G, C>, json?: JsonType) => D;\n  graphBuilder: (graph: RootStoreModel<D, G, C>, json?: JsonType) => G;\n};\n\ntype JsonTypeItem = number | string | boolean | JsonType;\nexport type JsonType = { [key: string]: JsonTypeItem | JsonTypeItem[] };\n\nexport interface GlobalData<D extends NodeData<D, any, any>> {\n  generateMainFile: string;\n  generateSourceCode: SourceDirectory;\n  canAddNode(nodeType: string): boolean;\n  View: React.FunctionComponent;\n  CanvasView: React.FunctionComponent;\n  toJson: JsonType;\n  initState?: () => void;\n}\n\ntype FullGraphJson = {\n  graph: GraphJson;\n  nodes: NodeJson[];\n  connections: ConnectionJson[];\n};\n\ntype ConstructParams<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> = {\n  builders: DataBuilder<D, G, C>;\n  data?: G;\n  key?: string;\n  nodes?:\n    | IMapEntries<string, NodeModel<D, G, C>>\n    | IKeyValueMap<NodeModel<D, G, C>>;\n};\n\nexport class RootStoreModel<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n> {\n  constructor(d: {\n    db: IndexedDB;\n    builders: DataBuilder<D, G, C>;\n    json?: FullGraphJson;\n  }) {\n    this.db = d.db;\n    this.builders = d.builders;\n    this.globalData = d.builders.graphBuilder(this, d.json?.graph.data);\n    this.key = d.json?.graph.key ?? v4();\n\n    const nodes = d.json?.nodes.reduce((m, n) => {\n      const node = new NodeModel(this, {\n        ...n,\n        dataBuilder: d.builders.nodeBuilder,\n      });\n\n      m[n.key] = node;\n      return m;\n    }, {} as { [key: string]: NodeModel<D, G, C> });\n\n    this.nodes = observable.map(nodes ?? {});\n\n    d.json?.connections.forEach((c) => {\n      const from = this.nodes.get(c.from);\n      const to = this.nodes.get(c.to);\n      if (from !== undefined && to !== undefined) {\n        this.addConnection(from, to, c.data);\n      }\n    });\n    if (this.nodes.size !== 0) {\n      this.selectedNode = this.nodes.values().next().value;\n      if (this.selectedNode!.outputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.outputs[0];\n      } else if (this.selectedNode!.inputs.length !== 0) {\n        this.selectedConnection = this.selectedNode!.inputs[0];\n      } else {\n        for (const _n of this.nodes.values()) {\n          if (_n.outputs.length !== 0) {\n            this.selectedConnection = _n.outputs[0];\n            break;\n          }\n        }\n      }\n    }\n    if (this.globalData.initState !== undefined){ \n      this.globalData.initState();\n    }\n  }\n\n  key: string;\n  // Builders to create graph, node and transition instances\n  builders: DataBuilder<D, G, C>;\n  // Global generic data\n  globalData: G;\n  db: IndexedDB;\n\n  @observable\n  resetStore: boolean = false;\n  // All nodes\n  @observable\n  nodes: ObservableMap<string, NodeModel<D, G, C>>;\n  // Selected node\n  @observable\n  selectedNode?: NodeModel<D, G, C>;\n  // Selected connection\n  @observable\n  selectedConnection?: ConnModel<D, G, C>;\n\n  // Selected input for connection\n  @observable\n  selectingInputFor?: NodeModel<D, G, C>;\n\n  // Select a node\n  @action\n  selectNode = (node: NodeModel<D, G, C>) => {\n    this.selectedNode = node;\n  };\n\n  // Select a connection\n  @action\n  selectConnection = (connection: ConnModel<D, G, C>) => {\n    this.selectedConnection = connection;\n  };\n\n  // Add a node\n  @action\n  addNode = (\n    nodeType: string,\n    pos?: { x: number; y: number }\n  ): NodeModel<D, G, C> | undefined => {\n    if (this.globalData.canAddNode(nodeType)) {\n      const op = new NodeModel(this, {\n        dataBuilder: this.builders.nodeBuilder,\n        key: v4(),\n        name: nodeType,\n        x: pos?.x ?? 100,\n        y: pos?.y ?? 100,\n        data: { type: nodeType },\n      });\n      this.nodes.set(op.key, op);\n      return op;\n    }\n  };\n\n  // Remove a node\n  @action\n  removeNode(node: NodeModel<D, G, C>): void {\n    if (node === this.selectedNode) {\n      this.selectedNode = undefined;\n    }\n    if (this.nodes.delete(node.key)) {\n      for (const _in of node.inputs) {\n        _in.from.outputs.remove(_in);\n      }\n      for (const _out of node.outputs) {\n        _out.to.inputs.remove(_out);\n      }\n    }\n  }\n\n  @action\n  removeConnection(connection: ConnModel<D, G, C>): void {\n    if (connection === this.selectedConnection) {\n      this.selectedConnection = undefined;\n    }\n    connection.from.outputs.remove(connection);\n    connection.to.inputs.remove(connection);\n  }\n\n  // Select input-output / add connection\n\n  @action\n  selectingInput = (from: NodeModel<D, G, C>) => {\n    this.selectingInputFor = from;\n    window.addEventListener(\"keyup\", this._selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (to: NodeModel<D, G, C>): ConnModel<D, G, C> => {\n    const conn = new ConnModel(\n      this.selectingInputFor!,\n      to,\n      this.builders.connectionBuilder\n    );\n    conn.from.addOutput(conn);\n    this.selectingInputFor = undefined;\n    this.selectedConnection = conn;\n    window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    return conn;\n  };\n\n  @action\n  private _selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this._selectingInputKeyListener);\n    }\n  };\n\n  @action\n  addConnection = (\n    from: NodeModel<D, G, C>,\n    to: NodeModel<D, G, C>,\n    json?: JsonType\n  ): ConnModel<D, G, C> => {\n    const conn = new ConnModel(from, to, this.builders.connectionBuilder, json);\n    conn.from.addOutput(conn);\n    return conn;\n  };\n\n  // Serialization\n\n  @computed\n  get toJson(): GraphJson {\n    return { data: this.globalData.toJson, key: this.key };\n  }\n\n  async saveModel() {\n    const nodes = [...this.nodes.entries()];\n    await this.db.clearDB();\n    await Promise.all([\n      this.db.updateGraph(this.toJson),\n      this.db.addNodes(\n        this.key,\n        nodes.map(([_, value]) => value.toJson)\n      ),\n      this.db.addConnections(\n        this.key,\n        nodes.flatMap(([_, value]) => value.outputs).map((t) => t.toJson)\n      ),\n    ]);\n  }\n\n  downloadModel(): FullGraphJson {\n    const nodes = [...this.nodes.entries()];\n    const json = {\n      graph: this.toJson,\n      nodes: nodes.map(([_, value]) => value.toJson),\n      connections: nodes\n        .flatMap(([_, value]) => value.outputs)\n        .map((t) => t.toJson),\n    };\n\n    console.log(json);\n    downloadToClient(\n      JSON.stringify(json),\n      \"gemma-model.json\",\n      \"application/json\"\n    );\n    return json;\n  }\n\n  async downloadSourceCode() {\n    const _addToZip = (root: JSZip, dir: SourceDirectory) => {\n      const newRoot = root.folder(dir.name)!;\n\n      for (const item of dir.items) {\n        item.when({\n          file: (f) => newRoot.file(f.name, f.content),\n          dir: (d) => _addToZip(newRoot, d),\n        });\n      }\n    };\n\n    const zip = new JSZip();\n    const sourceCode = this.globalData.generateSourceCode;\n    _addToZip(zip, sourceCode);\n\n    const content = await zip.generateAsync({ type: \"blob\" });\n\n    downloadToClient(\n      content,\n      \"gemma-grafcet-source-code.zip\",\n      \"application/zip\"\n    );\n  }\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { NodeModel, NodeData } from \"../node/node-model\";\nimport { useStore } from \"../App\";\nimport Button from \"@material-ui/core/Button\";\n\ntype Props2 = {\n  children: React.ReactNode;\n};\n\nexport const PropertiesTable = observer(({ children }: Props2) => {\n  return (\n    <PropertiesTableStyled>\n      <thead>\n        <tr>\n          <td>Property</td>\n          <td>Value</td>\n        </tr>\n      </thead>\n      <tbody>{children}</tbody>\n    </PropertiesTableStyled>\n  );\n});\n\ntype Props<D extends NodeData<D, any, any>> = {\n  self: NodeModel<D, any, any>;\n};\n\nexport const PropertiesTableNode = observer(\n  <D extends NodeData<D, any, any>>({ self }: Props<D>) => {\n    const rootStore = useStore();\n    return (\n      <div className=\"col\">\n        <PropertiesTable>\n          {Object.entries(self.data.spec).map(([k, v]) => (\n            <tr key={k}>\n              <td>{k}</td>\n              <td>\n                <v.plotField name={k} model={self.data as any} />\n              </td>\n            </tr>\n          ))}\n        </PropertiesTable>\n        <div style={{ margin: \"0 3px\" }}>\n          {self.data.nInputs !== 0 && (\n            <div className=\"row\" key=\"inputs\">\n              <h4 style={{ margin: \"3px 0 5px 0\", width: \"100px\" }}>Inputs:</h4>\n              <div>\n                {self.inputs.map((v) => (\n                  <Button\n                    onClick={() => rootStore.selectConnection(v as any)}\n                    key={v.from.key}\n                    variant=\"outlined\"\n                    size=\"small\"\n                  >\n                    {v.from.name}\n                  </Button>\n                ))}\n                {self.inputs.length === 0 && \"No inputs\"}\n              </div>\n            </div>\n          )}\n          <div key=\"outputs\" className=\"row\">\n            <h4 style={{ margin: \"3px 0 5px 0\", width: \"100px\" }}>Outputs:</h4>\n            <div>\n              {self.outputs.map((v) => (\n                <Button\n                  onClick={() => rootStore.selectConnection(v as any)}\n                  key={v.to.key}\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  {v.to.name}\n                </Button>\n              ))}\n              {self.outputs.length === 0 && \"No outputs\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  padding-bottom: 10px;\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTableNode } from \"./properties-table\";\nimport { useStore } from \"../App\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./properties-view.css\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  const rootStore = useStore();\n\n  let inner;\n  if (rootStore.selectedNode != null) {\n    const selectedNode = rootStore.selectedNode;\n    const selectedConnection = rootStore.selectedConnection;\n    inner = (\n      <div\n        style={{\n          overflow: \"auto\",\n          maxHeight: \"100%\",\n          maxWidth: \"100%\",\n          justifyContent: \"space-around\",\n          backgroundColor: \"#fafafa\",\n          display: \"flex\",\n        }}\n        className=\"row\"\n      >\n        <div\n          className=\"properties-view\"\n          key=\"node-properties\"\n          id=\"node-properties\"\n        >\n          <div\n            className=\"row\"\n            style={{ justifyContent: \"space-between\", alignItems: \"center\" }}\n          >\n            <h3 style={{ margin: \"5px 0px 10px 5px\" }}>\n              {`Step: ${selectedNode.name}`}\n            </h3>\n            <IconButton onClick={(e) => rootStore.removeNode(selectedNode)}>\n              <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n            </IconButton>\n          </div>\n          <PropertiesTableNode self={rootStore.selectedNode} />\n        </div>\n        <div\n          className=\"properties-view\"\n          key=\"connection-properties\"\n          id=\"connection-properties\"\n        >\n          {selectedConnection !== undefined && (\n            <div className=\"col\">\n              <div\n                className=\"row\"\n                style={{\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <h3 style={{ margin: \"5px 0 10px 5px\" }}>\n                  {`Transition: ${selectedConnection.from.name} -> ${selectedConnection.to.name}`}\n                </h3>\n                <IconButton\n                  onClick={(e) =>\n                    rootStore.removeConnection(selectedConnection)\n                  }\n                >\n                  <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n                </IconButton>\n              </div>\n              <selectedConnection.data.ConnectionView />\n            </div>\n          )}\n        </div>\n        <div\n          style={{ minWidth: \"270px\" }}\n          className=\"properties-view\"\n          key=\"graph-properties\"\n        >\n          <rootStore.globalData.View />\n        </div>\n      </div>\n    );\n  } else {\n    inner = (\n      <div style={{ width: \"150px\" }} className=\"row\">\n        <div style={{ width: \"150px\" }} className=\"center\">\n          Not selected\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      defaultSize={{ height: 280, width: \"auto\" }}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        border: \"1px solid #eee\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","export class VarId {\n  constructor(public text: string) {}\n\n  toString(): string {\n    return this.text;\n  }\n}\n\nexport type CustomToken =\n  | \"(\"\n  | \")\"\n  | \"AND\"\n  | \"OR\"\n  | \"NOT\"\n  | \"<\"\n  | \">\"\n  | \"=\"\n  | \"<=\"\n  | \">=\"\n  | \"\\n\"\n  | VarId;\n\nexport const getCustomTokens = (t: string): [CustomToken, number][] => {\n  const l: [CustomToken, number][] = [];\n  let i = -1;\n  let omit = 0;\n  let signal = \"\";\n  const addSignal = () => {\n    if (signal.length !== 0) {\n      l.push([new VarId(signal), i - signal.length]);\n      signal = \"\";\n    }\n  };\n  const add = (v: CustomToken) => {\n    addSignal();\n    l.push([v, i]);\n  };\n\n  for (const c of t) {\n    i++;\n    if (omit !== 0) {\n      omit--;\n      continue;\n    }\n    switch (c) {\n      case \" \":\n        addSignal();\n        break;\n      case \"\\n\":\n      case \")\":\n      case \"(\":\n      case \"<\":\n      case \">\":\n        add(c);\n        break;\n      case \"=\":\n        const prevToken = l[l.length - 1];\n        const prev = prevToken[0];\n        const strPrev = prev instanceof VarId ? prev.text : prev;\n        if ([\"<\", \">\"].includes(strPrev) && prevToken[1] === i - 1) {\n          l[l.length - 1][0] = (prev + \"=\") as any;\n        } else {\n          add(c);\n        }\n        break;\n      case \"A\":\n        if (t.substring(i, i + 3) === \"AND\") {\n          omit = 2;\n          add(\"AND\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"O\":\n        if (t.substring(i, i + 2) === \"OR\") {\n          omit = 1;\n          add(\"OR\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      case \"N\":\n        if (t.substring(i, i + 3) === \"NOT\") {\n          omit = 2;\n          add(\"NOT\");\n          continue;\n        }\n      // ignore: no-fallthrough\n      default:\n        signal += c;\n        break;\n    }\n  }\n  if (signal.length !== 0) {\n    l.push([new VarId(signal), i - signal.length + 1]);\n  }\n  return l;\n};\n\ntype ParseR = { ok: boolean };\n\n// type Conv = (tokens: Token[]) => ParseR;\n\n// const _union = (fs: Array<Conv>) => {};\n\n// const _find = (token: Token): Conv => {\n//   return (ts) => {\n//     return { ok: ts[0] == token };\n//   };\n// };\n\ntype Item = (CustomToken | Union)[];\n\ntype ExpType = \"VarId\" | \"comp\" | \"and\" | \"simpleExp\" | \"numOP\";\n\nclass Union {\n  constructor(\n    items: Partial<{ [key in ExpType]: (CustomToken | \"SELF\" | Union)[] }>\n  ) {\n    this.variants = Object.values(items).map((l) => {\n      return l!.map((v) => (v === \"SELF\" ? this : v));\n    });\n  }\n  variants: Item[];\n}\n\n// type Val = Item | Union;\n\n// type Expression<V extends { [key: string]: Token }> = {\n//   name: ExpType;\n//   tokens: Item;\n//   p: (t: Token[]) => V;\n// };\n\n// export const getCustomParse = (tokens: Token[]) => {\n//   const varId: Expression<{ varId: VarId }> = {\n//     name: \"VarId\",\n//     p: (t) => ({ varId: t[0] as VarId }),\n//     tokens: [new VarId(\"\")],\n//   };\n\n//   const numSimple = new Union({\n//     VarId: [new VarId(\"\")], //TODO: decimal\n//   });\n\n//   const comparator = new Union([[\"<\"], [\">\"], [\"=\"], [\"<=\"], [\">=\"]]);\n\n//   const expSimple = new Union([\n//     [numSimple, comparator, numSimple],\n//     [new VarId(\"\")],\n//   ]);\n\n//   const expAnd = new Union([[expSimple, \"AND\", \"SELF\"], [expSimple]]);\n\n//   const exp = new Union([\n//     [\"(\", \"SELF\", \")\"],\n//     [\"NOT\", \"SELF\"],\n//     [expAnd, \"OR\", \"SELF\"],\n//     [expAnd],\n//   ]);\n\n//   for (const t of tokens) {\n//     matchPossibilities(t, exp);\n//   }\n// };\n\n// const matchPossibilities = (t: Token, possibilities: Union): void => {\n//   let i = -1;\n//   for (const variant of possibilities.variants) {\n//     i++;\n\n//     const curr = variant.pop();\n//     if (curr === undefined) {\n//     } else if (typeof curr == \"string\") {\n//       if (t == curr) {\n//       }\n//     } else if (curr instanceof Union) {\n//       matchPossibilities(t, curr);\n//     } else {\n//       if (t instanceof VarId) {\n//       } else {\n//       }\n//     }\n//   }\n// };\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n  onChange?: (n: V) => void;\n\n  constructor(v: { choices: C; default: K; onChange?: (n: V) => void }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    this.onChange = v.onChange;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n    return (\n      <ChoiceField\n        value={model[name]}\n        setValue={(v) => {\n          model[name] = v as any;\n          if (this.onChange !== undefined) this.onChange(v as any);\n        }}\n        keys={keys}\n      />\n    );\n  });\n}\n\nexport const ChoiceField = ({\n  keys,\n  value,\n  setValue,\n  maxButton,\n}: {\n  keys: string[];\n  value: string;\n  setValue: (v: string) => void;\n  maxButton?: number\n}) => {\n  if (keys.length > (maxButton ?? 3)) {\n    return (\n      <Select\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value as any);\n        }}\n        autoWidth={true}\n        style={{minHeight: \"35px\", marginBottom: \"3px\"}}\n        disabled={keys.length <= 1}\n      >\n        {keys.map((k) => {\n          return (\n            <MenuItem key={k} value={k}>\n              {k}\n            </MenuItem>\n          );\n        })}\n      </Select>\n    );\n  } else {\n    return (\n      <ButtonsDiv>\n        <ButtonGroup\n          size=\"small\"\n          color=\"primary\"\n          aria-label=\"outlined primary button group\"\n        >\n          {keys.map((k) => {\n            const buttonStyle =\n              k === value ? { background: \"#3f51b5\", color: \"white\" } : {};\n\n            return (\n              <Button\n                key={k}\n                onClick={() => {\n                  setValue(k);\n                }}\n                style={buttonStyle}\n              >\n                {k}\n              </Button>\n            );\n          })}\n        </ButtonGroup>\n      </ButtonsDiv>\n    );\n  }\n};\n","import React from \"react\";\nimport { computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { ChoiceFieldSpec } from \"../fields/choice-field\";\nimport { NodeData, NodeModel } from \"../node/node-model\";\nimport { listToMap } from \"../utils\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { Transition } from \"./transition\";\nimport { JsonType } from \"../canvas/store\";\n\nexport type Step = SimpleStep | EnclosingStep | MacroStep | InitialStep;\nexport enum StepType {\n  ENCLOSING = \"ENCLOSING\",\n  INITIAL = \"INITIAL\",\n  MACRO = \"MACRO\",\n  SIMPLE = \"SIMPLE\",\n  CONTAINER = \"CONTAINER\",\n}\n\ntype GemmaNode = NodeModel<Step, GemmaGrafcet, Transition>;\n\nexport enum ProcedureType {\n  F = \"F\", // Operational\n  D = \"D\", // Failure\n  A = \"A\", // Stop\n}\n\nabstract class BaseStep implements NodeData<Step, GemmaGrafcet, Transition> {\n  @observable\n  abstract type: StepType;\n\n  nInputs = Number.POSITIVE_INFINITY;\n  errors = observable.map<string, string>();\n\n  constructor(\n    private node: GemmaNode,\n    d?: {\n      description?: string;\n      family?: ProcedureType;\n    }\n  ) {\n    this.description = d?.description ?? \"\";\n    this.family = d?.family ?? ProcedureType.F;\n  }\n\n  @computed\n  get name(): string {\n    return this.node.name;\n  }\n  @observable\n  description: string;\n  @observable\n  family: ProcedureType;\n  @computed\n  get parent(): GemmaNode | undefined {\n    if (this.type === StepType.CONTAINER) {\n      return undefined;\n    }\n    switch (this.family) {\n      case ProcedureType.A:\n        return this.automationSystem.aFamily;\n      case ProcedureType.D:\n        return this.automationSystem.dFamily;\n      case ProcedureType.F:\n        return this.automationSystem.fFamily;\n    }\n    throw new Error(\"\");\n  }\n\n  get automationSystem(): GemmaGrafcet {\n    return this.node.graph.globalData;\n  }\n\n  @computed\n  private get _transitions(): Transition[] {\n    return this.node.outputs\n      .map((t) => t.data)\n      .sort((a, b) => a.priority - b.priority);\n  }\n  @computed\n  get innerTransitionsLength(): number {\n    return this._transitions.length;\n  }\n  @computed\n  get transitions(): Transition[] {\n    return this.family === ProcedureType.F\n      ? this.automationSystem.workingFamilyTransitions.concat(this._transitions)\n      : this._transitions;\n  }\n  @computed\n  get id(): number {\n    return this.automationSystem.steps.indexOf(this as any) + 1;\n  }\n\n  spec = {\n    type: new ChoiceFieldSpec({\n      default: StepType.SIMPLE,\n      choices: listToMap(\n        Object.values(StepType).filter((t) => t !== StepType.CONTAINER)\n      ),\n      onChange: (n: StepType) => {\n        if (n === StepType.INITIAL) {\n          const otherInitial = this.automationSystem.steps.find(\n            (s) => s.type === StepType.INITIAL && s !== this\n          );\n          if (otherInitial !== undefined) {\n            otherInitial.type = StepType.SIMPLE;\n          }\n        }\n      },\n    }),\n  };\n\n  isValidInput(n: GemmaNode): boolean {\n    return this.node.inputNodes.every((t) => t.data !== n.data);\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      family: this.family,\n      description: this.description,\n      type: this.type,\n    };\n  }\n\n  View = observer(({ children }) => {\n    const _color = {\n      [ProcedureType.A]: \"#ecf5ff\",\n      [ProcedureType.D]: \"#ffd6d6\",\n      [ProcedureType.F]: \"#ebffec\",\n    };\n\n    if (this.type === StepType.CONTAINER) {\n      return (\n        <div\n          style={{\n            position: \"relative\",\n            border: \"1px solid #eee\",\n            background: _color[this.family],\n            flex: 1,\n            width: 400,\n            height: 400,\n          }}\n        >\n          {children}\n        </div>\n      );\n    }\n    let style: React.CSSProperties = {};\n    let innerStyle: React.CSSProperties = { padding: \"12px\" };\n    const nodeHeight = this.node.height - 2;\n    switch (this.type) {\n      case StepType.ENCLOSING:\n        style = { padding: \"0 0\", display: \"flex\" };\n        return (\n          <div style={{ ...style, position: \"relative\" }}>\n            <EnclosingDecoration left={true} nodeHeight={nodeHeight} />\n            <div style={{ ...innerStyle, padding: \"12px 18px\" }}>\n              {this.node.name}\n            </div>\n            <EnclosingDecoration left={false} nodeHeight={nodeHeight} />\n          </div>\n        );\n      case StepType.MACRO:\n        style = { padding: \"5px 0\" };\n        innerStyle = {\n          border: \"1.5px solid\",\n          borderRight: \"0\",\n          borderLeft: \"0\",\n          padding: \"5px 12px\",\n        };\n        break;\n      case StepType.INITIAL:\n        style = { padding: \"5px\" };\n        innerStyle = {\n          border: \"1.5px solid\",\n          padding: \"7px\",\n        };\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div style={style}>\n        <div style={innerStyle}>{this.node.name}</div>\n      </div>\n    );\n  });\n}\n\nexport class SimpleStep extends BaseStep {\n  type = StepType.SIMPLE;\n}\n\nexport class ContainerStep extends BaseStep {\n  type = StepType.CONTAINER;\n}\n\nexport class InitialStep extends BaseStep {\n  type = StepType.INITIAL;\n}\n\nexport class EnclosingStep extends BaseStep {\n  type = StepType.ENCLOSING;\n}\n\nexport class MacroStep extends BaseStep {\n  type = StepType.MACRO;\n}\n\nconst EnclosingDecoration = ({\n  nodeHeight,\n  left,\n}: {\n  nodeHeight: number;\n  left: boolean;\n}) => {\n  return (\n    <svg\n      style={{\n        width: \"10px\",\n        height: \"\" + nodeHeight + \"px\",\n        position: \"absolute\",\n        right: left ? undefined : 0,\n      }}\n    >\n      <path\n        d={\n          left\n            ? `M 10 0 L 0 ${nodeHeight / 2} L 10 ${nodeHeight}`\n            : `M 0 0 L 10 ${nodeHeight / 2} L 0 ${nodeHeight}`\n        }\n        stroke=\"black\"\n        fill=\"transparent\"\n      ></path>\n    </svg>\n  );\n};\n","import { VarId } from \"./custom_parser\";\nimport { GemmaGrafcet, Signal } from \"./gemma\";\nimport {\n  EnclosingStep,\n  MacroStep,\n  SimpleStep,\n  InitialStep,\n  StepType,\n} from \"./step\";\nimport { Transition } from \"./transition\";\n\nexport class H {\n  static textOrEmpty = (cond: boolean, text: string) => (cond ? text : \"\");\n}\n\nconst templateCondition = (t: Transition): string => {\n  return t.expressionTokens\n    .map(([tok, _]) => {\n      if (tok instanceof VarId) {\n        return \"GVL.\" + tok.text;\n      } else {\n        return tok;\n      }\n    })\n    .join(\" \");\n};\n\nconst templateTransitions = (\n  transitions: Transition[],\n  { isNested }: { isNested: boolean }\n) => {\n  return `\\\n${transitions\n  .map((t, index) => {\n    return `\n${index === 0 ? \"IF\" : \"ELSIF\"} ${templateCondition(t)} THEN\n  State:=${t.to.id};\\\n  ${isNested ? \"\\n  Entry:=TRUE;\" : \"\"}`;\n  })\n  .join(\"\\n\")}\\\n${transitions.length === 0 ? \"\" : \"\\nEND_IF\"}`;\n};\n\nconst templateGemmaGrafcetSimpleStep = (\n  model: SimpleStep | InitialStep\n): string => {\n  return templateTransitions(model.transitions, { isNested: false });\n};\n\nconst templateFBEntry = (model: MacroStep | EnclosingStep): string => `\\\nIF Entry THEN\n  ${model.name}(Initialization:=ENTRY);\n  Entry:=FALSE;\nEND_IF\n${model.name}(Initialization:=ENTRY);`;\n\nconst templateGemmaGrafcetMacroStep = (model: MacroStep): string => {\n  const transitions = model.transitions;\n  return `\n${templateFBEntry(model)}\n\n${transitions\n  .map((t, index) => {\n    return `\\\n${index === 0 ? \"IF\" : \"ELSIF\"} ${templateCondition(t)}${\n      transitions.length - model.innerTransitionsLength <= index\n        ? ` AND ${model.name}.Complete`\n        : \"\"\n    } THEN\n  State:=${t.to.id};\n  Entry:=TRUE;`;\n  })\n  .join(\"\\n\")}\\\n${H.textOrEmpty(transitions.length !== 0, \"\\nEND_IF\")}`;\n};\n\nconst templateGemmaGrafcetEnclosingStep = (model: EnclosingStep): string => {\n  return `\\\n${templateFBEntry(model)}\n\n${templateTransitions(model.transitions, { isNested: true })}`;\n};\n\nexport const templateGlobals = (signals: Array<Signal>): string => {\n  return `\\\nVAR_GLOBAL\n    ${signals\n      .map(\n        (s) =>\n          `${s.name} : ${s.type}${\n            s.defaultValue.trim().length === 0 ? \"\" : \" :=\" + s.defaultValue\n          };`\n      )\n      .join(\"\\n    \")}\nEND_VAR\n`;\n};\n\nexport const templateGemmaGrafcet = (model: GemmaGrafcet): string => {\n  return `\n// Variable declaration\nVAR\n${model.steps\n  .filter((s) => s.type === StepType.ENCLOSING || s.type === StepType.MACRO)\n  .map((s) => `  ${s.name}:${s.name}_FB;`)\n  .join(\"\\n\")}\n\n  State:UINT:=${model.initialStep?.id};\n  Entry:BOOL:=TRUE;\nEND_VAR\n\n// Program behavior\nCASE State OF\n  ${model.steps\n    .filter((s) => s.type !== StepType.CONTAINER)\n    .map((step) => {\n      return `\n  ${step.id}: //State ${step.name}\n    ${(() => {\n      switch (step.type) {\n        case StepType.ENCLOSING:\n          return templateGemmaGrafcetEnclosingStep(step);\n        case StepType.INITIAL:\n        case StepType.SIMPLE:\n          return templateGemmaGrafcetSimpleStep(step);\n        case StepType.MACRO:\n          return templateGemmaGrafcetMacroStep(step);\n        default:\n          throw new Error(\"\");\n      }\n    })().replace(/\\n/g, \"\\n    \")}\n  `;\n    })\n    .join(\"\\n\")}\nEND_CASE\n`;\n};\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n  multiline: boolean;\n\n  constructor(v: {\n    default: string;\n    maxLength?: number;\n    minLength?: number;\n    multiline?: boolean;\n  }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.multiline = v.multiline ?? false;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    const onChange = (\n      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n      let value = e.target.value;\n      setValue(value as any);\n\n      if (this.maxLength !== undefined && value.length > this.maxLength) {\n        errors.set(name, \"Max length exceded.\");\n      } else if (\n        this.minLength !== undefined &&\n        value.length < this.minLength\n      ) {\n        errors.set(name, \"Min length exceded.\");\n      } else {\n        errors.delete(name);\n        model[name] = value as any;\n      }\n    };\n\n    if (this.multiline) {\n      return (\n        <textarea\n          key={name}\n          className=\"multiline-input\"\n          value={value}\n          onChange={onChange}\n        ></textarea>\n      );\n    } else {\n      return (\n        <TextField\n          key={name}\n          value={value}\n          fullWidth={true}\n          margin=\"dense\"\n          inputProps={{ style: { textAlign: \"center\" } }}\n          error={errors.get(name) !== undefined}\n          style={{ width: \"140px\" }}\n          onChange={onChange}\n        />\n      );\n    }\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class SimpleBooleanLexer extends Lexer {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \"EQ\", \"LPAREN\", \n\t\t\"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanLexer._LITERAL_NAMES, SimpleBooleanLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(SimpleBooleanLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return SimpleBooleanLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return SimpleBooleanLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x11e\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\" +\n\t\t\"\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x03\\x02\\x03\\x02\\x03\\x02\\x03\" +\n\t\t\"\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\" +\n\t\t\"\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\" +\n\t\t\"\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x05\\x0EI\\n\\x0E\\x03\\x0E\\x06\\x0E\" +\n\t\t\"L\\n\\x0E\\r\\x0E\\x0E\\x0EM\\x03\\x0E\\x03\\x0E\\x06\\x0ER\\n\\x0E\\r\\x0E\\x0E\\x0ES\\x05\" +\n\t\t\"\\x0EV\\n\\x0E\\x03\\x0F\\x03\\x0F\\x07\\x0FZ\\n\\x0F\\f\\x0F\\x0E\\x0F]\\v\\x0F\\x03\\x10\" +\n\t\t\"\\x06\\x10`\\n\\x10\\r\\x10\\x0E\\x10a\\x03\\x10\\x03\\x10\\x02\\x02\\x02\\x11\\x03\\x02\" +\n\t\t\"\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\" +\n\t\t\"\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\" +\n\t\t\"\\x1F\\x02\\x11\\x03\\x02\\x06\\x03\\x022;\\x05\\x02C\\\\aac|\\x06\\x022;C\\\\aac|\\x05\" +\n\t\t\"\\x02\\v\\f\\x0E\\x0F\\\"\\\"\\x02j\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\" +\n\t\t\"\\x02\\x1F\\x03\\x02\\x02\\x02\\x03!\\x03\\x02\\x02\\x02\\x05%\\x03\\x02\\x02\\x02\\x07\" +\n\t\t\"(\\x03\\x02\\x02\\x02\\t,\\x03\\x02\\x02\\x02\\v1\\x03\\x02\\x02\\x02\\r7\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x0F9\\x03\\x02\\x02\\x02\\x11<\\x03\\x02\\x02\\x02\\x13>\\x03\\x02\\x02\\x02\\x15\" +\n\t\t\"A\\x03\\x02\\x02\\x02\\x17C\\x03\\x02\\x02\\x02\\x19E\\x03\\x02\\x02\\x02\\x1BH\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x1DW\\x03\\x02\\x02\\x02\\x1F_\\x03\\x02\\x02\\x02!\\\"\\x07C\\x02\\x02\\\"#\" +\n\t\t\"\\x07P\\x02\\x02#$\\x07F\\x02\\x02$\\x04\\x03\\x02\\x02\\x02%&\\x07Q\\x02\\x02&\\'\\x07\" +\n\t\t\"T\\x02\\x02\\'\\x06\\x03\\x02\\x02\\x02()\\x07P\\x02\\x02)*\\x07Q\\x02\\x02*+\\x07V\\x02\" +\n\t\t\"\\x02+\\b\\x03\\x02\\x02\\x02,-\\x07V\\x02\\x02-.\\x07T\\x02\\x02./\\x07W\\x02\\x02/\" +\n\t\t\"0\\x07G\\x02\\x020\\n\\x03\\x02\\x02\\x0212\\x07H\\x02\\x0223\\x07C\\x02\\x0234\\x07\" +\n\t\t\"N\\x02\\x0245\\x07U\\x02\\x0256\\x07G\\x02\\x026\\f\\x03\\x02\\x02\\x0278\\x07@\\x02\" +\n\t\t\"\\x028\\x0E\\x03\\x02\\x02\\x029:\\x07@\\x02\\x02:;\\x07?\\x02\\x02;\\x10\\x03\\x02\\x02\" +\n\t\t\"\\x02<=\\x07>\\x02\\x02=\\x12\\x03\\x02\\x02\\x02>?\\x07>\\x02\\x02?@\\x07?\\x02\\x02\" +\n\t\t\"@\\x14\\x03\\x02\\x02\\x02AB\\x07?\\x02\\x02B\\x16\\x03\\x02\\x02\\x02CD\\x07*\\x02\\x02\" +\n\t\t\"D\\x18\\x03\\x02\\x02\\x02EF\\x07+\\x02\\x02F\\x1A\\x03\\x02\\x02\\x02GI\\x07/\\x02\\x02\" +\n\t\t\"HG\\x03\\x02\\x02\\x02HI\\x03\\x02\\x02\\x02IK\\x03\\x02\\x02\\x02JL\\t\\x02\\x02\\x02\" +\n\t\t\"KJ\\x03\\x02\\x02\\x02LM\\x03\\x02\\x02\\x02MK\\x03\\x02\\x02\\x02MN\\x03\\x02\\x02\\x02\" +\n\t\t\"NU\\x03\\x02\\x02\\x02OQ\\x070\\x02\\x02PR\\t\\x02\\x02\\x02QP\\x03\\x02\\x02\\x02RS\" +\n\t\t\"\\x03\\x02\\x02\\x02SQ\\x03\\x02\\x02\\x02ST\\x03\\x02\\x02\\x02TV\\x03\\x02\\x02\\x02\" +\n\t\t\"UO\\x03\\x02\\x02\\x02UV\\x03\\x02\\x02\\x02V\\x1C\\x03\\x02\\x02\\x02W[\\t\\x03\\x02\" +\n\t\t\"\\x02XZ\\t\\x04\\x02\\x02YX\\x03\\x02\\x02\\x02Z]\\x03\\x02\\x02\\x02[Y\\x03\\x02\\x02\" +\n\t\t\"\\x02[\\\\\\x03\\x02\\x02\\x02\\\\\\x1E\\x03\\x02\\x02\\x02][\\x03\\x02\\x02\\x02^`\\t\\x05\" +\n\t\t\"\\x02\\x02_^\\x03\\x02\\x02\\x02`a\\x03\\x02\\x02\\x02a_\\x03\\x02\\x02\\x02ab\\x03\\x02\" +\n\t\t\"\\x02\\x02bc\\x03\\x02\\x02\\x02cd\\b\\x10\\x02\\x02d \\x03\\x02\\x02\\x02\\t\\x02HMS\" +\n\t\t\"U[a\\x03\\b\\x02\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanLexer.__ATN) {\n\t\t\tSimpleBooleanLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanLexer._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanLexer.__ATN;\n\t}\n\n}\n\n","/* eslint-disable */\n// Generated from ./src/step/SimpleBoolean.g4 by ANTLR 4.7.3-SNAPSHOT\n// @ts-nocheck\n// @ts-ignore\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { SimpleBooleanListener } from \"./SimpleBooleanListener\";\nimport { SimpleBooleanVisitor } from \"./SimpleBooleanVisitor\";\n\n\nexport class SimpleBooleanParser extends Parser {\n\tpublic static readonly AND = 1;\n\tpublic static readonly OR = 2;\n\tpublic static readonly NOT = 3;\n\tpublic static readonly TRUE = 4;\n\tpublic static readonly FALSE = 5;\n\tpublic static readonly GT = 6;\n\tpublic static readonly GE = 7;\n\tpublic static readonly LT = 8;\n\tpublic static readonly LE = 9;\n\tpublic static readonly EQ = 10;\n\tpublic static readonly LPAREN = 11;\n\tpublic static readonly RPAREN = 12;\n\tpublic static readonly DECIMAL = 13;\n\tpublic static readonly IDENTIFIER = 14;\n\tpublic static readonly WS = 15;\n\tpublic static readonly RULE_parse = 0;\n\tpublic static readonly RULE_expression = 1;\n\tpublic static readonly RULE_expressionAnd = 2;\n\tpublic static readonly RULE_expressionSimple = 3;\n\tpublic static readonly RULE_numExpression = 4;\n\tpublic static readonly RULE_comparator = 5;\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"parse\", \"expression\", \"expressionAnd\", \"expressionSimple\", \"numExpression\", \n\t\t\"comparator\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, \"'AND'\", \"'OR'\", \"'NOT'\", \"'TRUE'\", \"'FALSE'\", \"'>'\", \"'>='\", \n\t\t\"'<'\", \"'<='\", \"'='\", \"'('\", \"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"AND\", \"OR\", \"NOT\", \"TRUE\", \"FALSE\", \"GT\", \"GE\", \"LT\", \"LE\", \n\t\t\"EQ\", \"LPAREN\", \"RPAREN\", \"DECIMAL\", \"IDENTIFIER\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SimpleBooleanParser._LITERAL_NAMES, SimpleBooleanParser._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn SimpleBooleanParser.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"SimpleBoolean.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return SimpleBooleanParser.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return SimpleBooleanParser._serializedATN; }\n\n\tconstructor(input: TokenStream) {\n\t\tsuper(input);\n\t\tthis._interp = new ParserATNSimulator(SimpleBooleanParser._ATN, this);\n\t}\n\t// @RuleVersion(0)\n\tpublic parse(): ParseContext {\n\t\tlet _localctx: ParseContext = new ParseContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 0, SimpleBooleanParser.RULE_parse);\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 12;\n\t\t\tthis.expression();\n\t\t\tthis.state = 13;\n\t\t\tthis.match(SimpleBooleanParser.EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expression(): ExpressionContext {\n\t\tlet _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 2, SimpleBooleanParser.RULE_expression);\n\t\ttry {\n\t\t\tthis.state = 22;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new NotExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 15;\n\t\t\t\tthis.match(SimpleBooleanParser.NOT);\n\t\t\t\tthis.state = 16;\n\t\t\t\tthis.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new OrExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 17;\n\t\t\t\t(_localctx as OrExpressionContext)._left = this.expressionAnd();\n\t\t\t\tthis.state = 18;\n\t\t\t\tthis.match(SimpleBooleanParser.OR);\n\t\t\t\tthis.state = 19;\n\t\t\t\t(_localctx as OrExpressionContext)._right = this.expression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new AndParentExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 21;\n\t\t\t\tthis.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\tlet _localctx: ExpressionAndContext = new ExpressionAndContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 4, SimpleBooleanParser.RULE_expressionAnd);\n\t\ttry {\n\t\t\tthis.state = 29;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new AndExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 24;\n\t\t\t\t(_localctx as AndExpressionContext)._left = this.expressionSimple();\n\t\t\t\tthis.state = 25;\n\t\t\t\tthis.match(SimpleBooleanParser.AND);\n\t\t\t\tthis.state = 26;\n\t\t\t\t(_localctx as AndExpressionContext)._right = this.expressionAnd();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new SimpleExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 28;\n\t\t\t\tthis.expressionSimple();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\tlet _localctx: ExpressionSimpleContext = new ExpressionSimpleContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 6, SimpleBooleanParser.RULE_expressionSimple);\n\t\ttry {\n\t\t\tthis.state = 40;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {\n\t\t\tcase 1:\n\t\t\t\t_localctx = new ComparatorExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 31;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._left = this.numExpression();\n\t\t\t\tthis.state = 32;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._op = this.comparator();\n\t\t\t\tthis.state = 33;\n\t\t\t\t(_localctx as ComparatorExpressionContext)._right = this.numExpression();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t_localctx = new IdentifierExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 35;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t_localctx = new ParenExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 3);\n\t\t\t\t{\n\t\t\t\tthis.state = 36;\n\t\t\t\tthis.match(SimpleBooleanParser.LPAREN);\n\t\t\t\tthis.state = 37;\n\t\t\t\tthis.expression();\n\t\t\t\tthis.state = 38;\n\t\t\t\tthis.match(SimpleBooleanParser.RPAREN);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic numExpression(): NumExpressionContext {\n\t\tlet _localctx: NumExpressionContext = new NumExpressionContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 8, SimpleBooleanParser.RULE_numExpression);\n\t\ttry {\n\t\t\tthis.state = 44;\n\t\t\tthis._errHandler.sync(this);\n\t\t\tswitch (this._input.LA(1)) {\n\t\t\tcase SimpleBooleanParser.IDENTIFIER:\n\t\t\t\t_localctx = new IdentifierNumExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t\t{\n\t\t\t\tthis.state = 42;\n\t\t\t\tthis.match(SimpleBooleanParser.IDENTIFIER);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SimpleBooleanParser.DECIMAL:\n\t\t\t\t_localctx = new DecimalExpressionContext(_localctx);\n\t\t\t\tthis.enterOuterAlt(_localctx, 2);\n\t\t\t\t{\n\t\t\t\tthis.state = 43;\n\t\t\t\tthis.match(SimpleBooleanParser.DECIMAL);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new NoViableAltException(this);\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\t// @RuleVersion(0)\n\tpublic comparator(): ComparatorContext {\n\t\tlet _localctx: ComparatorContext = new ComparatorContext(this._ctx, this.state);\n\t\tthis.enterRule(_localctx, 10, SimpleBooleanParser.RULE_comparator);\n\t\tlet _la: number;\n\t\ttry {\n\t\t\tthis.enterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\tthis.state = 46;\n\t\t\t_la = this._input.LA(1);\n\t\t\tif (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SimpleBooleanParser.GT) | (1 << SimpleBooleanParser.GE) | (1 << SimpleBooleanParser.LT) | (1 << SimpleBooleanParser.LE) | (1 << SimpleBooleanParser.EQ))) !== 0))) {\n\t\t\tthis._errHandler.recoverInline(this);\n\t\t\t} else {\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis.matchedEOF = true;\n\t\t\t\t}\n\n\t\t\t\tthis._errHandler.reportMatch(this);\n\t\t\t\tthis.consume();\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (re) {\n\t\t\tif (re instanceof RecognitionException) {\n\t\t\t\t_localctx.exception = re;\n\t\t\t\tthis._errHandler.reportError(this, re);\n\t\t\t\tthis._errHandler.recover(this, re);\n\t\t\t} else {\n\t\t\t\tthrow re;\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tthis.exitRule();\n\t\t}\n\t\treturn _localctx;\n\t}\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x113\\x04\\x02\" +\n\t\t\"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n\t\t\"\\t\\x07\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n\t\t\"\\x03\\x03\\x03\\x03\\x05\\x03\\x19\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\" +\n\t\t\"\\x04\\x05\\x04 \\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x05\\x05\\x05+\\n\\x05\\x03\\x06\\x03\\x06\\x05\\x06/\\n\\x06\\x03\" +\n\t\t\"\\x07\\x03\\x07\\x03\\x07\\x02\\x02\\x02\\b\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\" +\n\t\t\"\\f\\x02\\x02\\x03\\x03\\x02\\b\\f\\x022\\x02\\x0E\\x03\\x02\\x02\\x02\\x04\\x18\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x06\\x1F\\x03\\x02\\x02\\x02\\b*\\x03\\x02\\x02\\x02\\n.\\x03\\x02\\x02\\x02\" +\n\t\t\"\\f0\\x03\\x02\\x02\\x02\\x0E\\x0F\\x05\\x04\\x03\\x02\\x0F\\x10\\x07\\x02\\x02\\x03\\x10\" +\n\t\t\"\\x03\\x03\\x02\\x02\\x02\\x11\\x12\\x07\\x05\\x02\\x02\\x12\\x19\\x05\\x04\\x03\\x02\\x13\" +\n\t\t\"\\x14\\x05\\x06\\x04\\x02\\x14\\x15\\x07\\x04\\x02\\x02\\x15\\x16\\x05\\x04\\x03\\x02\\x16\" +\n\t\t\"\\x19\\x03\\x02\\x02\\x02\\x17\\x19\\x05\\x06\\x04\\x02\\x18\\x11\\x03\\x02\\x02\\x02\\x18\" +\n\t\t\"\\x13\\x03\\x02\\x02\\x02\\x18\\x17\\x03\\x02\\x02\\x02\\x19\\x05\\x03\\x02\\x02\\x02\\x1A\" +\n\t\t\"\\x1B\\x05\\b\\x05\\x02\\x1B\\x1C\\x07\\x03\\x02\\x02\\x1C\\x1D\\x05\\x06\\x04\\x02\\x1D\" +\n\t\t\" \\x03\\x02\\x02\\x02\\x1E \\x05\\b\\x05\\x02\\x1F\\x1A\\x03\\x02\\x02\\x02\\x1F\\x1E\\x03\" +\n\t\t\"\\x02\\x02\\x02 \\x07\\x03\\x02\\x02\\x02!\\\"\\x05\\n\\x06\\x02\\\"#\\x05\\f\\x07\\x02#$\" +\n\t\t\"\\x05\\n\\x06\\x02$+\\x03\\x02\\x02\\x02%+\\x07\\x10\\x02\\x02&\\'\\x07\\r\\x02\\x02\\'\" +\n\t\t\"(\\x05\\x04\\x03\\x02()\\x07\\x0E\\x02\\x02)+\\x03\\x02\\x02\\x02*!\\x03\\x02\\x02\\x02\" +\n\t\t\"*%\\x03\\x02\\x02\\x02*&\\x03\\x02\\x02\\x02+\\t\\x03\\x02\\x02\\x02,/\\x07\\x10\\x02\" +\n\t\t\"\\x02-/\\x07\\x0F\\x02\\x02.,\\x03\\x02\\x02\\x02.-\\x03\\x02\\x02\\x02/\\v\\x03\\x02\" +\n\t\t\"\\x02\\x0201\\t\\x02\\x02\\x021\\r\\x03\\x02\\x02\\x02\\x06\\x18\\x1F*.\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!SimpleBooleanParser.__ATN) {\n\t\t\tSimpleBooleanParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SimpleBooleanParser._serializedATN));\n\t\t}\n\n\t\treturn SimpleBooleanParser.__ATN;\n\t}\n\n}\n\nexport class ParseContext extends ParserRuleContext {\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic EOF(): TerminalNode { return this.getToken(SimpleBooleanParser.EOF, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_parse; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParse) {\n\t\t\tlistener.enterParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParse) {\n\t\t\tlistener.exitParse(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParse) {\n\t\t\treturn visitor.visitParse(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expression; }\n\tpublic copyFrom(ctx: ExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class NotExpressionContext extends ExpressionContext {\n\tpublic NOT(): TerminalNode { return this.getToken(SimpleBooleanParser.NOT, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterNotExpression) {\n\t\t\tlistener.enterNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitNotExpression) {\n\t\t\tlistener.exitNotExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitNotExpression) {\n\t\t\treturn visitor.visitNotExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class OrExpressionContext extends ExpressionContext {\n\tpublic _left: ExpressionAndContext;\n\tpublic _right: ExpressionContext;\n\tpublic OR(): TerminalNode { return this.getToken(SimpleBooleanParser.OR, 0); }\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterOrExpression) {\n\t\t\tlistener.enterOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitOrExpression) {\n\t\t\tlistener.exitOrExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitOrExpression) {\n\t\t\treturn visitor.visitOrExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class AndParentExpressionContext extends ExpressionContext {\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndParentExpression) {\n\t\t\tlistener.enterAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndParentExpression) {\n\t\t\tlistener.exitAndParentExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndParentExpression) {\n\t\t\treturn visitor.visitAndParentExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionAndContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionAnd; }\n\tpublic copyFrom(ctx: ExpressionAndContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class AndExpressionContext extends ExpressionAndContext {\n\tpublic _left: ExpressionSimpleContext;\n\tpublic _right: ExpressionAndContext;\n\tpublic AND(): TerminalNode { return this.getToken(SimpleBooleanParser.AND, 0); }\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tpublic expressionAnd(): ExpressionAndContext {\n\t\treturn this.getRuleContext(0, ExpressionAndContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterAndExpression) {\n\t\t\tlistener.enterAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitAndExpression) {\n\t\t\tlistener.exitAndExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitAndExpression) {\n\t\t\treturn visitor.visitAndExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class SimpleExpressionContext extends ExpressionAndContext {\n\tpublic expressionSimple(): ExpressionSimpleContext {\n\t\treturn this.getRuleContext(0, ExpressionSimpleContext);\n\t}\n\tconstructor(ctx: ExpressionAndContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterSimpleExpression) {\n\t\t\tlistener.enterSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitSimpleExpression) {\n\t\t\tlistener.exitSimpleExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitSimpleExpression) {\n\t\t\treturn visitor.visitSimpleExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ExpressionSimpleContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_expressionSimple; }\n\tpublic copyFrom(ctx: ExpressionSimpleContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class ComparatorExpressionContext extends ExpressionSimpleContext {\n\tpublic _left: NumExpressionContext;\n\tpublic _op: ComparatorContext;\n\tpublic _right: NumExpressionContext;\n\tpublic numExpression(): NumExpressionContext[];\n\tpublic numExpression(i: number): NumExpressionContext;\n\tpublic numExpression(i?: number): NumExpressionContext | NumExpressionContext[] {\n\t\tif (i === undefined) {\n\t\t\treturn this.getRuleContexts(NumExpressionContext);\n\t\t} else {\n\t\t\treturn this.getRuleContext(i, NumExpressionContext);\n\t\t}\n\t}\n\tpublic comparator(): ComparatorContext {\n\t\treturn this.getRuleContext(0, ComparatorContext);\n\t}\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparatorExpression) {\n\t\t\tlistener.enterComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparatorExpression) {\n\t\t\tlistener.exitComparatorExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparatorExpression) {\n\t\t\treturn visitor.visitComparatorExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class IdentifierExpressionContext extends ExpressionSimpleContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierExpression) {\n\t\t\tlistener.enterIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierExpression) {\n\t\t\tlistener.exitIdentifierExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierExpression) {\n\t\t\treturn visitor.visitIdentifierExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class ParenExpressionContext extends ExpressionSimpleContext {\n\tpublic LPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.LPAREN, 0); }\n\tpublic expression(): ExpressionContext {\n\t\treturn this.getRuleContext(0, ExpressionContext);\n\t}\n\tpublic RPAREN(): TerminalNode { return this.getToken(SimpleBooleanParser.RPAREN, 0); }\n\tconstructor(ctx: ExpressionSimpleContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterParenExpression) {\n\t\t\tlistener.enterParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitParenExpression) {\n\t\t\tlistener.exitParenExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitParenExpression) {\n\t\t\treturn visitor.visitParenExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class NumExpressionContext extends ParserRuleContext {\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_numExpression; }\n\tpublic copyFrom(ctx: NumExpressionContext): void {\n\t\tsuper.copyFrom(ctx);\n\t}\n}\nexport class IdentifierNumExpressionContext extends NumExpressionContext {\n\tpublic IDENTIFIER(): TerminalNode { return this.getToken(SimpleBooleanParser.IDENTIFIER, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterIdentifierNumExpression) {\n\t\t\tlistener.enterIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitIdentifierNumExpression) {\n\t\t\tlistener.exitIdentifierNumExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitIdentifierNumExpression) {\n\t\t\treturn visitor.visitIdentifierNumExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\nexport class DecimalExpressionContext extends NumExpressionContext {\n\tpublic DECIMAL(): TerminalNode { return this.getToken(SimpleBooleanParser.DECIMAL, 0); }\n\tconstructor(ctx: NumExpressionContext) {\n\t\tsuper(ctx.parent, ctx.invokingState);\n\t\tthis.copyFrom(ctx);\n\t}\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterDecimalExpression) {\n\t\t\tlistener.enterDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitDecimalExpression) {\n\t\t\tlistener.exitDecimalExpression(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitDecimalExpression) {\n\t\t\treturn visitor.visitDecimalExpression(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\nexport class ComparatorContext extends ParserRuleContext {\n\tpublic GT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GT, 0); }\n\tpublic GE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.GE, 0); }\n\tpublic LT(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LT, 0); }\n\tpublic LE(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.LE, 0); }\n\tpublic EQ(): TerminalNode | undefined { return this.tryGetToken(SimpleBooleanParser.EQ, 0); }\n\tconstructor(parent: ParserRuleContext | undefined, invokingState: number) {\n\t\tsuper(parent, invokingState);\n\t}\n\t// @Override\n\tpublic get ruleIndex(): number { return SimpleBooleanParser.RULE_comparator; }\n\t// @Override\n\tpublic enterRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.enterComparator) {\n\t\t\tlistener.enterComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic exitRule(listener: SimpleBooleanListener): void {\n\t\tif (listener.exitComparator) {\n\t\t\tlistener.exitComparator(this);\n\t\t}\n\t}\n\t// @Override\n\tpublic accept<Result>(visitor: SimpleBooleanVisitor<Result>): Result {\n\t\tif (visitor.visitComparator) {\n\t\t\treturn visitor.visitComparator(this);\n\t\t} else {\n\t\t\treturn visitor.visitChildren(this);\n\t\t}\n\t}\n}\n\n\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { SimpleBooleanLexer } from \"../grammar/SimpleBooleanLexer\";\nimport {\n  ExpressionContext,\n  IdentifierExpressionContext,\n  IdentifierNumExpressionContext,\n  SimpleBooleanParser,\n} from \"../grammar/SimpleBooleanParser\";\nimport { SimpleBooleanVisitor } from \"../grammar/SimpleBooleanVisitor\";\nimport { AbstractParseTreeVisitor } from \"antlr4ts/tree/AbstractParseTreeVisitor\";\nimport { ErrorNode } from \"antlr4ts/tree/ErrorNode\";\nimport { ParseTree } from \"antlr4ts/tree/ParseTree\";\n\n// Extend the AbstractParseTreeVisitor to get default visitor behaviour\nclass ErrorVisitor\n  extends AbstractParseTreeVisitor<string[]>\n  implements SimpleBooleanVisitor<string[]> {\n  isInvalid: boolean = false;\n  constructor(public signals: { numSignals: string[]; boolSignals: string[] }) {\n    super();\n  }\n\n  defaultResult() {\n    return [];\n  }\n\n  aggregateResult(aggregate: string[], nextResult: string[]) {\n    return aggregate.concat(nextResult);\n  }\n\n  visitErrorNode(node: ErrorNode): string[] {\n    if (this.isInvalid) {\n      return [];\n    }\n    this.isInvalid = true;\n    return [\"Invalid boolean expression\"];\n  }\n\n  visitIdentifierExpression(n: IdentifierExpressionContext): string[] {\n    const valid = this.signals.boolSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined boolean signal`];\n  }\n\n  visitIdentifierNumExpression(n: IdentifierNumExpressionContext): string[] {\n    const valid = this.signals.numSignals.includes(n.text);\n    return valid ? [] : [`'${n.text}' is not a defined numeric signal`];\n  }\n\n  visitExpression(n: ExpressionContext): string[] {\n    console.log(\"Dddddddddddddddddddddd\");\n    if (n.exception !== undefined && !this.isInvalid) {\n      this.isInvalid = true;\n      return [\"Invalid boolean expression\"];\n    }\n    return [];\n  }\n}\n\nexport const parseBoolExpression = (\n  text: string,\n  signals: { numSignals: string[]; boolSignals: string[] }\n): { tree: ExpressionContext; errors: string[] } => {\n  // Create the lexer and parser\n  let inputStream = CharStreams.fromString(text);\n  let lexer = new SimpleBooleanLexer(inputStream);\n  let tokenStream = new CommonTokenStream(lexer);\n  let parser = new SimpleBooleanParser(tokenStream);\n\n  // Parse the input, where `compilationUnit` is whatever entry point you defined\n\n  let tree = parser.parse();\n\n  // Create the visitor\n  const countFunctionsVisitor = new ErrorVisitor(signals);\n  // Use the visitor entry point\n  const errors = countFunctionsVisitor.visit(tree);\n\n  if (tree.exception !== undefined) {\n    countFunctionsVisitor.isInvalid = true;\n    errors.push(\"Invalid boolean expression\");\n  }\n\n  let toProcess: ParseTree[] | undefined = tree.children;\n  if (toProcess !== undefined && !countFunctionsVisitor.isInvalid) {\n    while (toProcess.length !== 0) {\n      const curr: ParseTree | undefined = toProcess.pop()!;\n      if (curr instanceof ExpressionContext && curr.exception !== undefined) {\n        errors.push(\"Invalid boolean expression\");\n        break;\n      } else if (curr.childCount > 0) {\n        toProcess = toProcess.concat(\n          [...Array(curr.childCount).keys()].map((i) => curr.getChild(i))\n        );\n      }\n    }\n  }\n  return { tree, errors };\n};\n","import { action, computed, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { JsonType } from \"../canvas/store\";\nimport { FieldSpec, StrFieldSpec } from \"../fields\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { ConnModel } from \"../node/node-model\";\nimport { PropertiesTable } from \"../properties/properties-table\";\nimport { parseBoolExpression } from \"./antlr_parser\";\nimport { CustomToken, getCustomTokens, VarId } from \"./custom_parser\";\nimport { GemmaGrafcet } from \"./gemma\";\nimport { Step } from \"./step\";\n\ntype GemmaConn = ConnModel<Step, GemmaGrafcet, Transition>;\n\nexport class Transition {\n  @observable\n  conditionExpression: string;\n  @observable\n  priority: number;\n  @computed\n  get priorityChoices() {\n    return [...Array(this.connection.from.outputs.length)].map(\n      (_, i) => \"\" + (i + 1)\n    );\n  }\n\n  errors = observable.map<string, string>();\n\n  spec: { [key: string]: FieldSpec } = {\n    conditionExpression: new StrFieldSpec({ default: \"\" }),\n  };\n\n  constructor(\n    private connection: GemmaConn,\n    d?: {\n      conditionExpression?: string;\n      priority?: number;\n    }\n  ) {\n    this.conditionExpression = d?.conditionExpression ?? \"\";\n    this.priority = d?.priority ?? connection.from.outputs.length + 1;\n  }\n\n  @action.bound\n  setPriority = (v: string): void => {\n    const priority = parseInt(v);\n    if (this.priority === priority) {\n      return;\n    }\n    const transitions = this.connection.from.outputs;\n    if (this.priority > priority) {\n      transitions\n        .filter(\n          (t) => t.data.priority >= priority && t.data.priority < this.priority\n        )\n        .forEach((t) => t.data.priority++);\n    } else {\n      transitions\n        .filter(\n          (t) => t.data.priority <= priority && t.data.priority > this.priority\n        )\n        .forEach((t) => t.data.priority--);\n    }\n    this.priority = priority;\n  };\n\n  get from(): Step {\n    return this.connection.from.data;\n  }\n\n  get to(): Step {\n    return this.connection.to.data;\n  }\n\n  @computed\n  get connectionText(): string {\n    const cond = this.conditionExpression.substring(0, 20);\n    return `${this.priority}: ${cond}${\n      this.conditionExpression.length > 20 ? \"...\" : \"\"\n    }`;\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      conditionExpression: this.conditionExpression,\n      priority: this.priority,\n    };\n  }\n\n  @computed\n  get expressionTokens(): [CustomToken, number][] {\n    return getCustomTokens(this.conditionExpression);\n  }\n\n  @computed\n  get expressionErrors(): string[] {\n    const gemma = this.connection.graph.globalData;\n    try {\n      const { errors } = parseBoolExpression(this.conditionExpression, {\n        boolSignals: gemma.boolSignals.map((s) => s.name),\n        numSignals: gemma.numSignals.map((s) => s.name),\n      });\n      return errors;\n    } catch (e) {}\n    return [];\n  }\n\n  ConnectionView = observer(() => {\n    return (\n      <>\n        <PropertiesTable key=\"table\">\n          <tr key=\"priority\">\n            <td>Priority</td>\n            <td>\n              <ChoiceField\n                keys={this.priorityChoices}\n                value={\"\" + this.priority}\n                setValue={this.setPriority}\n              />\n            </td>\n          </tr>\n          <tr key=\"condition\">\n            <td>Condition</td>\n            <td>{<ConditionInput m={this} />}</td>\n          </tr>\n        </PropertiesTable>\n        <div>\n          <h4 style={{ margin: \"0\" }}>Errors</h4>\n          {this.expressionErrors.length === 0 && \"No errors\"}\n          <ul style={{ color: \"indianred\", marginTop: \"0\" }} key=\"errors\">\n            {this.expressionErrors.map((err, index) => (\n              <li key={index}>{err}</li>\n            ))}\n          </ul>\n        </div>\n      </>\n    );\n  });\n}\n\nconst ConditionInput = observer(\n  ({\n    m,\n  }: {\n    m: {\n      conditionExpression: string;\n      expressionTokens: [CustomToken, number][];\n    };\n  }) => {\n    let prevIndex = 0;\n    let _spanStyleRef = useRef<HTMLSpanElement>(null);\n    const font = \"400 15px monospace\";\n\n    return (\n      <div style={{ width: \"180px\", position: \"relative\" }} className=\"center\">\n        <span\n          style={{\n            font,\n            position: \"absolute\",\n            top: 0,\n            padding: \"3px\",\n            textAlign: \"initial\",\n            whiteSpace: \"pre-line\",\n          }}\n          ref={_spanStyleRef}\n        >\n          {m.expressionTokens.map(([c, textIndex], index) => {\n            let color: string;\n            if (c instanceof VarId) {\n              color = \"black\";\n            } else if ([\"AND\", \"NOT\", \"OR\"].includes(c)) {\n              color = \"blue\";\n            } else {\n              color = \"brown\";\n            }\n            const whiteSpace = textIndex - prevIndex;\n            const text = \" \".repeat(whiteSpace) + c.toString();\n            prevIndex = textIndex + c.toString().length;\n            return (\n              <span key={index} style={{ color }}>\n                {text}\n              </span>\n            );\n          })}\n        </span>\n        <textarea\n          onScroll={(s) => {\n            _spanStyleRef.current!.scrollTo(0, s.currentTarget.scrollTop);\n          }}\n          className=\"multiline-input\"\n          style={{\n            font,\n            background: \"transparent\",\n            color: \"transparent\",\n            caretColor: \"black\",\n            position: \"relative\",\n          }}\n          spellCheck={false}\n          value={m.conditionExpression}\n          onChange={(e) => {\n            m.conditionExpression = e.currentTarget.value;\n          }}\n        ></textarea>\n      </div>\n    );\n  }\n);\n","\nexport abstract class SourceItem {\n  constructor(public name: string) {}\n\n  when(f: {file: (f: SourceFile) => void, dir: (f: SourceDirectory) => void}) {\n    if (this instanceof SourceFile) {\n      f.file(this)\n    } else if (this instanceof SourceDirectory) {\n      f.dir(this)\n    }\n  }\n}\n\nexport class SourceFile extends SourceItem {\n  constructor(name: string, public content: string) {\n    super(name);\n  }\n}\n\nexport class SourceDirectory extends SourceItem {\n  constructor(name: string, public items: SourceItem[]) {\n    super(name);\n  }\n}\n","import { MacroStep } from \"./step\";\n\nexport const macroStepTemplate = (model: MacroStep) =>\n  `\\\nFUNCTION_BLOCK ${model.name}_FB\n\n// Variable declaration\nVAR_INPUT\n  Initialization:BOOL;\nEND_VAR\n\nVAR_OUTPUT\n  Complete:BOOL;\nEND_VAR\n\n// FB behavior\nIF Initialization THEN\n  Complete:=FALSE;\n  //Initialization actions\n\nEND_IF\n\n//Nested behavior\n\n//Termination of the nested behavior\nComplete:=TRUE;\n`;\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { NodeModel } from \"./node-model\";\nimport { useStore } from \"../App\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledNode = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  background: #fff;\n  border-radius: 6;\n  border: 1.5px solid;\n`;\n\ntype NodeViewProps = { node: NodeModel<any, any, any> };\nexport const NodeView: React.FC<NodeViewProps> = observer((params) => {\n  const { node, children } = params;\n  const rootStore = useStore();\n  const onDrag = React.useCallback(\n    (_: DraggableEvent, data: DraggableData) => {\n      node.move(data.deltaX, data.deltaY);\n    },\n    [node]\n  );\n  const selectingInput = rootStore.selectingInputFor !== undefined;\n  const isValidInput =\n    selectingInput && rootStore.selectingInputFor!.data.isValidInput(node);\n  const isSelected = rootStore.selectedNode === node;\n\n  const onClick = React.useCallback(\n    (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      console.log(node);\n      if (selectingInput) {\n        if (isValidInput) {\n          rootStore.assignInput(node);\n        }\n      } else {\n        rootStore.selectNode(node);\n      }\n    },\n    [rootStore, node, selectingInput, isValidInput]\n  );\n  // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n  const { x, y } = node;\n\n  let style: React.CSSProperties = {};\n  if (isSelected) {\n    style[\"boxShadow\"] = \"rgb(110 110 110) 1px 1.5px 3px 1px\";\n  }\n  if (selectingInput) {\n    style[\"cursor\"] = isValidInput ? \"pointer\" : \"not-allowed\";\n  }\n\n  return (\n    <Draggable\n      onDrag={onDrag}\n      position={{\n        // TODO: improve x, y with support for nested children\n        x: x - (node.data.parent?.x ?? 0),\n        y: y - (node.data.parent?.y ?? 0),\n      }}\n      bounds=\"parent\"\n    >\n      <StyledNode\n        ref={(e) => {\n          if (e === null) return;\n          node.setSize(e.getBoundingClientRect());\n        }}\n        onClick={onClick}\n        style={style}\n      >\n        <node.data.View children={children} />\n      </StyledNode>\n    </Draggable>\n  );\n});\n","import { templateGemmaGrafcet, templateGlobals } from \"./gemma-templates\";\nimport {\n  GlobalData,\n  RootStoreModel,\n  DataBuilder,\n  JsonType,\n} from \"../canvas/store\";\nimport { action, computed, IObservableArray, observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { ChoiceField } from \"../fields/choice-field\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Transition } from \"./transition\";\nimport {\n  Step,\n  SimpleStep,\n  EnclosingStep,\n  StepType,\n  InitialStep,\n  MacroStep,\n  ProcedureType,\n  ContainerStep,\n} from \"./step\";\nimport { ConnModel, NodeModel } from \"../node/node-model\";\nimport { IndexedDB } from \"../canvas/persistence\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"./gemma-styles.css\";\nimport { SourceDirectory, SourceFile } from \"../codegen/file-system\";\nimport { enclosingStepTemplate } from \"./enclosing-step\";\nimport { macroStepTemplate } from \"./macro-step\";\nimport { NodeView } from \"../node/node\";\nimport { Tooltip } from \"@material-ui/core\";\n\nenum SignalTypeBase {\n  bool = \"bool\",\n  int = \"int\",\n  uint = \"uint\",\n  real = \"real\",\n}\n\nenum SignalType {\n  bool = \"bool\",\n\n  sint = \"sint\",\n  int = \"int\",\n  lint = \"lint\",\n  dint = \"dint\",\n\n  usint = \"usint\",\n  uint = \"uint\",\n  ulint = \"ulint\",\n  udint = \"udint\",\n\n  real = \"real\",\n  lreal = \"lreal\",\n}\n\nenum SignalTypeSize {\n  s = \"s\",\n  i = \"i\",\n  l = \"l\",\n  d = \"d\",\n}\n\nconst signalTypeToPrimitives = (\n  type?: SignalType\n): { base: SignalTypeBase; size: SignalTypeSize } | undefined => {\n  if (type === undefined) {\n    return undefined;\n  }\n  switch (type) {\n    case SignalType.bool:\n      return { base: SignalTypeBase.bool, size: SignalTypeSize.i };\n    case SignalType.real:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.i };\n    case SignalType.lreal:\n      return { base: SignalTypeBase.real, size: SignalTypeSize.l };\n  }\n  let base: SignalTypeBase;\n  let index: number;\n  if (type.startsWith(\"u\")) {\n    base = SignalTypeBase.uint;\n    index = 1;\n  } else {\n    base = SignalTypeBase.int;\n    index = 0;\n  }\n\n  const size = type.charAt(index) as SignalTypeSize;\n\n  if (!Object.keys(SignalTypeSize).includes(size)) {\n    return undefined;\n  }\n\n  return { base, size };\n};\n\nconst signalSizeMap: { [key in SignalTypeBase]: SignalTypeSize[] } = {\n  [SignalType.bool]: [SignalTypeSize.i],\n  [SignalType.int]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.uint]: [...Object.keys(SignalTypeSize)] as SignalTypeSize[],\n  [SignalType.real]: [SignalTypeSize.i, SignalTypeSize.l],\n};\n\nexport class GemmaGrafcet implements GlobalData<Step> {\n  constructor(\n    private graph: RootStoreModel<Step, GemmaGrafcet, Transition>,\n    json?: JsonType\n  ) {\n    let signals: Signal[] = [];\n    if (Array.isArray(json?.signals)) {\n      signals = json?.signals\n        .map((s) => (typeof s === \"object\" ? Signal.fromJson(s) : undefined))\n        .filter((s) => s !== undefined) as Signal[];\n    }\n    this.signals = observable.array<Signal>(signals);\n  }\n\n  canAddNode = (nodeType: string): boolean => {\n    if (nodeType === StepType.INITIAL) {\n      return !this._hasInitialStep();\n    }\n    return true;\n  };\n\n  initState(): void {\n    this.fFamily = this.graph.addNode(StepType.CONTAINER, { x: 600, y: 0 })!;\n    this.fFamily.setName(\"F family\");\n    this.fFamily.data.family = ProcedureType.F;\n\n    this.aFamily = this.graph.addNode(StepType.CONTAINER, { x: 0, y: 0 })!;\n    this.aFamily.setName(\"A family\");\n    this.aFamily.data.family = ProcedureType.A;\n\n    this.dFamily = this.graph.addNode(StepType.CONTAINER, { x: 0, y: 500 })!;\n    this.dFamily.setName(\"D family\");\n    this.dFamily.data.family = ProcedureType.D;\n  }\n\n  fFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  aFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n  dFamily?: NodeModel<Step, GemmaGrafcet, Transition>;\n\n  private _hasInitialStep(): boolean {\n    return [...this.graph.nodes.values()].some(\n      (n) => n.data.type === StepType.INITIAL\n    );\n  }\n\n  workingFamilyTransitions: Transition[] = [];\n\n  @computed\n  get steps(): Step[] {\n    return [...this.graph.nodes.values()].map((node) => node.data);\n  }\n\n  readonly signals: IObservableArray<Signal>;\n\n  @computed\n  get numSignals(): Signal[] {\n    return this.signals.filter((s) => s.type !== SignalType.bool);\n  }\n\n  @computed\n  get boolSignals(): Signal[] {\n    return this.signals.filter((s) => s.type === SignalType.bool);\n  }\n\n  @computed\n  get initialStep(): Step | undefined {\n    return this.steps.find((s) => s.type === StepType.INITIAL);\n  }\n\n  @computed\n  get generateMainFile(): string {\n    return templateGemmaGrafcet(this);\n  }\n\n  @computed\n  get generateSourceCode(): SourceDirectory {\n    const main = templateGemmaGrafcet(this);\n    const globals = templateGlobals(this.signals);\n    const files = [\n      new SourceFile(\"main.txt\", main),\n      new SourceFile(\"GVL.txt\", globals),\n    ];\n\n    for (const s of this.steps.values()) {\n      if (s.type === StepType.ENCLOSING) {\n        files.push(\n          new SourceFile(s.name + \"_FB.txt\", enclosingStepTemplate(s))\n        );\n      } else if (s.type === StepType.MACRO) {\n        files.push(new SourceFile(s.name + \"_FB.txt\", macroStepTemplate(s)));\n      }\n    }\n\n    return new SourceDirectory(\"gemma_grafcet\", files);\n  }\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      signals: this.signals.map((s) => s.toJson),\n    };\n  }\n\n  View = observer(() => {\n    const [showDelete, setShowDelete] = useState(false);\n    return (\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <h3 style={{ margin: \"5px 0 10px 5px\" }}>Signals</h3>\n          <Button onClick={(_) => setShowDelete(!showDelete)}>\n            {showDelete ? \"Hide Delete\" : \"Show Delete\"}\n            <FontAwesomeIcon\n              style={{ paddingLeft: \"7px\" }}\n              icon={\"trash-alt\"}\n              color={\"#000\"}\n            />\n          </Button>\n        </div>\n        <Table\n          id=\"signals-table\"\n          size=\"small\"\n          aria-label=\"a dense table\"\n          stickyHeader={true}\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Size</TableCell>\n              <TableCell>Default</TableCell>\n              {showDelete && <TableCell>Delete</TableCell>}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.signals.map((s, index) => (\n              <SignalRow\n                signal={s}\n                key={index}\n                showDelete={showDelete}\n                removeSignal={(s) => this.signals.remove(s)}\n                error={\n                  this.signals.findIndex(\n                    (s2) => s2.name === s.name && s !== s2\n                  ) !== -1\n                    ? \"Duplicate name\"\n                    : undefined\n                }\n              />\n            ))}\n          </TableBody>\n        </Table>\n        <Button\n          style={{ alignSelf: \"flex-end\" }}\n          onClick={(_) => this.signals.push(new Signal())}\n        >\n          Add Signal\n        </Button>\n      </div>\n    );\n  });\n\n  CanvasView = observer(() => {\n    const nodes = [...this.graph.nodes.values()];\n    const _nodesFromFamily = (family: ProcedureType) => {\n      return nodes\n        .filter(\n          (n) => n.data.family === family && n.data.type !== StepType.CONTAINER\n        )\n        .map((n) => {\n          return <NodeView node={n} key={n.key} />;\n        });\n    };\n\n    const _color = {\n      [ProcedureType.A]: { color: \"#ecf5ff\", size: { w: 600, h: 500 } },\n      [ProcedureType.D]: { color: \"#ffd6d6\", size: { w: 600, h: 500 } },\n      [ProcedureType.F]: { color: \"#ebffec\", size: { w: 600, h: 1000 } },\n    };\n\n    return (\n      <div style={{ width: \"100%\", height: \"100%\", position: \"absolute\" }}>\n        {nodes\n          .filter((n) => n.data.type === StepType.CONTAINER)\n          .map((n) => {\n            const _d = _color[n.data.family]!;\n            return (\n              <div\n                style={{\n                  background: _d.color,\n                  width: _d.size.w,\n                  height: _d.size.h,\n                  position: \"absolute\",\n                  top: n.y,\n                  left: n.x,\n                }}\n                key={n.key}\n              >\n                {_nodesFromFamily(n.data.family)}\n              </div>\n            );\n          })}\n      </div>\n    );\n  });\n}\n\nconst SignalRow = observer(\n  ({\n    signal: s,\n    showDelete,\n    removeSignal,\n    error,\n  }: {\n    signal: Signal;\n    showDelete: boolean;\n    removeSignal: (s: Signal) => void;\n    error?: string;\n  }) => (\n    <TableRow>\n      <TableCell>\n        <Tooltip title={error !== undefined ? error : \"\"}>\n          <TextField\n            type=\"text\"\n            value={s.name}\n            onChange={(e) => (s.name = e.target.value)}\n            style={{ width: \"110px\" }}\n            error={error !== undefined}\n          />\n        </Tooltip>\n      </TableCell>\n      <TableCell>\n        <ChoiceField\n          keys={Object.keys(SignalTypeBase)}\n          setValue={(v) => s.setTypeBase(v as any)}\n          value={s.typeBase}\n        />\n      </TableCell>\n      <TableCell>\n        <ChoiceField\n          keys={signalSizeMap[s.typeBase]}\n          setValue={(v) => (s.typeSize = v as any)}\n          value={s.typeSize}\n          maxButton={0}\n        />\n      </TableCell>\n      <TableCell>\n        <TextField\n          type=\"text\"\n          value={s.defaultValue}\n          onChange={(e) => {\n            s.defaultValue = e.target.value.replace(/\\s/g, \"\");\n          }}\n          style={{ width: \"80px\" }}\n          error={\n            s.didBlur\n              ? !regexSignalDefaultValid[s.typeBase].test(s.defaultValue)\n              : false\n          }\n          onBlur={(_) => (s.didBlur = true)}\n        />\n      </TableCell>\n      {showDelete && (\n        <TableCell align=\"center\">\n          <IconButton onClick={(_) => removeSignal(s)} size=\"small\">\n            <FontAwesomeIcon icon={\"trash-alt\"} color={\"#000\"} />\n          </IconButton>\n        </TableCell>\n      )}\n    </TableRow>\n  )\n);\n\nconst regexSignalDefaultValid = {\n  [SignalTypeBase.bool]: /^(TRUE|FALSE)$/,\n  [SignalTypeBase.int]: /^-?[1-9][0-9]*$/,\n  [SignalTypeBase.uint]: /^[1-9][0-9]*$/,\n  [SignalTypeBase.real]: /^-?[0-9]*\\.?[0-9]+$/,\n};\n\nexport class Signal {\n  @observable\n  didBlur: boolean = false;\n\n  @observable\n  name: string;\n  @observable\n  defaultValue: string;\n  @observable\n  typeSize: SignalTypeSize;\n  @observable\n  typeBase: SignalTypeBase;\n  @computed\n  get type(): SignalType {\n    if (this.typeBase === SignalTypeBase.bool) {\n      return SignalType.bool;\n    }\n    const sizeStr = this.typeSize === SignalTypeSize.i ? \"\" : this.typeSize!;\n    if (this.typeBase.startsWith(\"u\")) {\n      return (\"u\" + sizeStr + this.typeBase.substring(1)) as SignalType;\n    } else {\n      return (sizeStr + this.typeBase) as SignalType;\n    }\n  }\n\n  @action.bound\n  setTypeBase = (base: SignalTypeBase) => {\n    this.typeBase = base;\n    if (!signalSizeMap[base].includes(this.typeSize)) {\n      this.typeSize = signalSizeMap[base][0];\n    }\n  };\n\n  description?: string;\n\n  @computed\n  get toJson(): JsonType {\n    return {\n      name: this.name,\n      type: this.type,\n      defaultValue: this.defaultValue,\n    };\n  }\n\n  static fromJson(json: JsonType): Signal | undefined {\n    if (\n      typeof json[\"name\"] === \"string\" &&\n      Object.keys(SignalType).includes(json[\"type\"] as any)\n    ) {\n      return new Signal(json);\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(d?: {\n    name?: string;\n    description?: string;\n    type?: SignalType;\n    defaultValue?: string;\n  }) {\n    this.name = d?.name ?? \"\";\n    this.description = d?.description;\n    const typePrim = signalTypeToPrimitives(d?.type);\n    this.typeBase = typePrim?.base ?? SignalTypeBase.bool;\n    this.typeSize = typePrim?.size ?? SignalTypeSize.i;\n    this.defaultValue = d?.defaultValue ?? \"\";\n  }\n}\n\nexport const gemmaBuilders: DataBuilder<Step, GemmaGrafcet, Transition> = {\n  graphBuilder: (g, json) => new GemmaGrafcet(g, json),\n  nodeBuilder: (n, json) => {\n    console.log(json);\n    const type = json !== undefined ? json[\"type\"] : undefined;\n    if (typeof type === \"string\" && Object.keys(StepType).includes(type)) {\n      switch (type) {\n        case StepType.ENCLOSING:\n          return new EnclosingStep(n, json);\n        case StepType.INITIAL:\n          return new InitialStep(n, json);\n        case StepType.MACRO:\n          return new MacroStep(n, json);\n        case StepType.SIMPLE:\n          return new SimpleStep(n, json);\n        case StepType.CONTAINER:\n          return new ContainerStep(n, json);\n      }\n    }\n    return new SimpleStep(n);\n  },\n  connectionBuilder: (c, json) => new Transition(c, json),\n};\n\nexport const make5NodesGraph = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const s1 = rootStore.addNode(StepType.INITIAL, { x: 72, y: 60 });\n  const s2 = rootStore.addNode(StepType.MACRO, { x: 261, y: 170 });\n\n  const _t = new ConnModel(\n    s1!,\n    s2!,\n    (c) =>\n      new Transition(c, {\n        conditionExpression: \"I1 & I2\",\n      })\n  );\n  rootStore.globalData.workingFamilyTransitions.push(_t.data);\n\n  [\n    s1,\n    s2,\n    rootStore.addNode(StepType.ENCLOSING, { x: 441, y: 316 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 211, y: 410 }),\n    rootStore.addNode(StepType.SIMPLE, { x: 441, y: 500 }),\n  ].forEach((s, index) => s?.setName(`S${index + 1}`));\n\n  s1!.data.family = ProcedureType.A;\n  s2!.data.family = ProcedureType.D;\n  rootStore.selectNode(s1!);\n\n  rootStore.selectingInput(s1!);\n  const conn = rootStore.assignInput(s2!);\n\n  rootStore.selectConnection(conn);\n  rootStore.globalData.signals.push(new Signal({ name: \"\" }));\n  return rootStore;\n};\n\nexport const makeBaseGemmaTemplate = (\n  db: IndexedDB\n): RootStoreModel<Step, GemmaGrafcet, Transition> => {\n  const rootStore = new RootStoreModel<Step, GemmaGrafcet, Transition>({\n    db,\n    builders: gemmaBuilders,\n  });\n\n  const nodesRaw: {\n    [key in ProcedureType]: {\n      [key: string]: { type: StepType; x: number; y: number };\n    };\n  } = {\n    [ProcedureType.A]: {\n      A6: { type: StepType.INITIAL, x: 60, y: 60 },\n      A1: { type: StepType.SIMPLE, x: 200, y: 25 },\n      A2: { type: StepType.SIMPLE, x: 180, y: 300 },\n      A3: { type: StepType.SIMPLE, x: 270, y: 300 },\n      A4: { type: StepType.SIMPLE, x: 360, y: 200 },\n      A5: { type: StepType.MACRO, x: 60, y: 300 },\n      A7: { type: StepType.MACRO, x: 160, y: 200 },\n    },\n    [ProcedureType.D]: {\n      D1: { type: StepType.MACRO, x: 60, y: 800 },\n      D2: { type: StepType.SIMPLE, x: 90, y: 700 },\n      D3: { type: StepType.ENCLOSING, x: 200, y: 700 },\n    },\n    [ProcedureType.F]: {\n      F1: { type: StepType.MACRO, x: 800, y: 500 },\n      F2: { type: StepType.MACRO, x: 800, y: 200 },\n      F3: { type: StepType.MACRO, x: 840, y: 200 },\n      F4: { type: StepType.ENCLOSING, x: 850, y: 60 },\n      F5: { type: StepType.ENCLOSING, x: 850, y: 350 },\n      F6: { type: StepType.ENCLOSING, x: 850, y: 500 },\n    },\n  };\n\n  const nodes: {\n    [key: string]: NodeModel<Step, GemmaGrafcet, Transition>;\n  } = {};\n\n  for (const [family, nn] of Object.entries(nodesRaw)) {\n    for (const [k, v] of Object.entries(nn)) {\n      const n = rootStore.addNode(v.type, { x: v.x, y: v.y });\n      n?.setName(k);\n      n!.data.family = family as ProcedureType;\n      nodes[k] = n!;\n    }\n  }\n\n  const connextions = {\n    A1: [\"F2\", \"F1\", \"F6\", \"F5\", \"F4\"],\n    A2: [\"A1\"],\n    A3: [\"A4\"],\n    A4: [\"F1\"],\n    A5: [\"A7\"],\n    A6: [\"A1\"],\n    A7: [\"A4\"],\n    F1: [\"F3\", \"A2\", \"A3\", \"D1\", \"D3\"],\n    F2: [\"F1\"],\n    F3: [\"A1\"],\n    F4: [\"A6\"],\n    D1: [\"D2\", \"A5\"],\n    D2: [\"A5\"],\n    D3: [\"A2\", \"A3\"],\n  };\n\n  for (const [k, v] of Object.entries(connextions)) {\n    for (const to of v) {\n      rootStore.addConnection(nodes[k], nodes[to]);\n    }\n  }\n\n  const _t = new ConnModel(\n    nodes[\"A1\"]!,\n    nodes[\"D1\"]!,\n    (c) =>\n      new Transition(c, {\n        conditionExpression: \"I1 & I2\",\n      })\n  );\n  rootStore.globalData.workingFamilyTransitions.push(_t.data);\n\n  const a1 = nodes[\"A1\"]!;\n  rootStore.selectNode(a1);\n  rootStore.selectConnection(a1.outputs[0]);\n\n  return rootStore;\n};\n","import { EnclosingStep } from \"./step\";\n\nexport const enclosingStepTemplate = (model: EnclosingStep) =>\n  `\\\nFUNCTION_BLOCK ${model.name}_FB\n\n// Variable declaration\nVAR_INPUT\n  Initialization:BOOL;\nEND_VAR\n\n// FB behavior\nIF Initialization THEN\n  //Initialization actions\n\nEND_IF\n\n//Nested behavior\n\n`;\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { ConfigView } from \"./canvas/config-view\";\nimport { createIndexedDB, IndexedDB } from \"./canvas/persistence\";\nimport { RootStoreModel, GlobalData } from \"./canvas/store\";\nimport { NodeData, ConnectionData } from \"./node/node-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\nimport { gemmaBuilders, makeBaseGemmaTemplate } from \"./step/gemma\";\nimport { importJson } from \"./utils\";\n\nexport const storeContext = React.createContext<RootStoreModel<\n  any,\n  any,\n  any\n> | null>(null);\n\nexport function useStore<\n  D extends NodeData<D, G, C>,\n  G extends GlobalData<D>,\n  C extends ConnectionData<D>\n>() {\n  const store = React.useContext<RootStoreModel<D, G, C> | null>(storeContext);\n  if (!store) {\n    throw Error(\"useStore should be used inside a Store provider.\");\n  }\n  return store;\n}\n\ntype RootStore = RootStoreModel<any, any, any>;\n\nexport function App() {\n  const [globalDB, setDB] = React.useState<IndexedDB | null>(null);\n  const [store, setStore] = React.useState<RootStore | null>(null);\n  const _isReset = store && store.resetStore;\n  React.useEffect(() => {\n    if (!store) {\n      createIndexedDB().then(async (db) => {\n        setDB(db);\n        const graphs = await db.fetchGraphs();\n\n        let _store: RootStore;\n        const graph = graphs[0];\n        if (graph !== undefined) {\n          const graphExt = await db.loadGraph(graph.key);\n          _store = new RootStoreModel({\n            db,\n            json: { graph, ...graphExt },\n            builders: gemmaBuilders,\n          });\n        } else {\n          _store = makeBaseGemmaTemplate(db);\n        }\n\n        (window as any).store = _store;\n        setStore(_store);\n      });\n    } else if (store.resetStore) {\n      setStore(null);\n    }\n  }, [store, _isReset]);\n\n  if (!store) {\n    return <div className=\"center\">Loading...</div>;\n  }\n\n  return (\n    <storeContext.Provider value={store}>\n      <div\n        className=\"row\"\n        style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n      >\n        {/* <div className=\"col\">\n          <MainMenu items={Object.keys(rootStore.builders.nodeBuilder)} />\n        </div> */}\n        <div\n          className=\"col\"\n          style={{\n            width: \"0px\",\n            background: \"rgba(250,250,250,0.7)\",\n            flex: \"1 0 auto\",\n          }}\n        >\n          <div className=\"row\" style={{ minHeight: 0, flex: 1 }}>\n            <div className=\"col\">\n              <TopMenu store={store} globalDB={globalDB!} setStore={setStore} />\n              <MainCanvas />\n            </div>\n            <ConfigView />\n          </div>\n          <PropertiesView />\n        </div>\n      </div>\n    </storeContext.Provider>\n  );\n}\n\nfunction TopMenu({\n  store,\n  setStore,\n  globalDB,\n}: {\n  store: RootStore;\n  globalDB: IndexedDB;\n  setStore: (store: RootStore) => void;\n}) {\n  return (\n    <div\n      className=\"row\"\n      style={{\n        justifyContent: \"flex-end\",\n        borderBottom: \"rgb(221 220 220) solid 1.5px\",\n      }}\n    >\n      <Button\n        onClick={(e) => {\n          store.saveModel();\n        }}\n      >\n        Save\n      </Button>\n      <Button\n        onClick={(e) => {\n          store.downloadModel();\n        }}\n      >\n        Export\n      </Button>\n      <Button>\n        <label\n          htmlFor=\"import-file-input\"\n          style={{ margin: 0, width: \"100%\", cursor: \"pointer\" }}\n        >\n          Import\n        </label>\n        <input\n          type=\"file\"\n          id=\"import-file-input\"\n          accept=\"application/json\"\n          style={{ display: \"none\" }}\n          onChange={async (e) => {\n            const json = await importJson(e);\n            if (typeof json === \"string\") {\n              try {\n                const val = JSON.parse(json);\n                const _store = new RootStoreModel({\n                  db: globalDB,\n                  json: val,\n                  builders: gemmaBuilders,\n                });\n                setStore(_store);\n              } catch (e) {\n                console.log(e);\n              }\n            }\n          }}\n        />\n      </Button>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp, faTrashAlt);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}